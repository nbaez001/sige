package com.sige.gui;

import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Map;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import com.sige.entidad.Dependencia;
import com.sige.entidad.DocumentoInterno;
import com.sige.entidad.DocumentoInternoDestino;
import com.sige.entidad.DocumentoInternoReferen;
import com.sige.entidad.Expediente;
import com.sige.entidad.ExpedienteMovimiento;
import com.sige.entidad.ExpedientePago;
import com.sige.entidad.ExpedienteRequisito;
import com.sige.entidad.PagosTupa;
import com.sige.entidad.Persona;
import com.sige.entidad.PersonaDocumento;
import com.sige.entidad.RequisitoTupa;
import com.sige.entidad.TipoDocumento;
import com.sige.entidad.TipoTramite;
import com.sige.entidad.Tupa;
import com.sige.gui.ui.NumberField;
import com.sige.servicio.DependenciaServicio;
import com.sige.servicio.DocumentoInternoDestinoService;
import com.sige.servicio.DocumentoInternoService;
import com.sige.servicio.ExpedienteMovimientoServicio;
import com.sige.servicio.ExpedientePagoServicio;
import com.sige.servicio.ExpedienteRequisitoServicio;
import com.sige.servicio.ExpedienteServicio;
import com.sige.servicio.PagosTupaService;
import com.sige.servicio.PersonaDocumentoServicio;
import com.sige.servicio.PersonaServicio;
import com.sige.servicio.RequisitoTupaService;
import com.sige.servicio.TipoDocumentoServicio;
import com.sige.servicio.TipoTramiteService;
import com.sige.servicio.TupaService;
import com.sige.servicio.UtilService;
import com.sige.util.Boton;
import com.sige.util.Cargo;
import com.sige.util.Constantes;
import com.sige.util.Injector;
import com.sige.util.Notificacion;
import com.sige.util.Permiso;
import com.sige.util.SigeUtil;
import com.sige.util.TextField;
import com.sige.util.TipoTramiteCanonico;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Item;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.Property.ValueChangeListener;
import com.vaadin.data.util.IndexedContainer;
import com.vaadin.event.FieldEvents.BlurEvent;
import com.vaadin.event.FieldEvents.BlurListener;
import com.vaadin.event.ShortcutAction.KeyCode;
import com.vaadin.event.ShortcutListener;
import com.vaadin.server.ThemeResource;
import com.vaadin.shared.ui.combobox.FilteringMode;
import com.vaadin.shared.ui.label.ContentMode;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.Accordion;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.CheckBox;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.Label;
import com.vaadin.ui.Panel;
import com.vaadin.ui.PopupDateField;
import com.vaadin.ui.TabSheet;
import com.vaadin.ui.TabSheet.Tab;
import com.vaadin.ui.Table;
import com.vaadin.ui.TextArea;
import com.vaadin.ui.UI;
import com.vaadin.ui.Window;
import com.vaadin.ui.themes.Reindeer;

public class ExpedienteMantenimiento extends CustomComponent implements
		ClickListener {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@AutoGenerated
	private AbsoluteLayout mainLayout;
	@AutoGenerated
	private Button btnBuscarExpediente;
	@AutoGenerated
	private Button btnImprimir;
	@AutoGenerated
	private Button btnCancelar;
	@AutoGenerated
	private Button btnEliminar;
	@AutoGenerated
	private Button btnGuardar;
	@AutoGenerated
	private Button btnNuevo;
	@AutoGenerated
	private Accordion accordion_1;
	@AutoGenerated
	private AbsoluteLayout lytNoTUPA;
	@AutoGenerated
	private TabSheet tabSheet_1;
	@AutoGenerated
	private AbsoluteLayout lytPersonaNT;
	@AutoGenerated
	private Panel panel_10;
	@AutoGenerated
	private AbsoluteLayout absoluteLayout_9;
	@AutoGenerated
	private Boton btnLimparRepresentanteNT;
	@AutoGenerated
	private Boton btnAgregarRepresentanteNT;
	@AutoGenerated
	private Boton btnBuscarRepresentanteNT;
	@AutoGenerated
	private TextField txtDireccionRepresentanteNT;
	@AutoGenerated
	private Label label_25;
	@AutoGenerated
	private TextField txtNombreRepresentanteNT;
	@AutoGenerated
	private TextField txtRepresentanteNT;
	@AutoGenerated
	private Label label_24;
	@AutoGenerated
	private Label label_23;
	@AutoGenerated
	private Panel panel_9;
	@AutoGenerated
	private AbsoluteLayout absoluteLayout_8;
	@AutoGenerated
	private Boton btnAgregarSolicitanteNT;
	@AutoGenerated
	private Boton btnBuscarSolicitanteNT;
	@AutoGenerated
	private TextField txtDireccionSolicitanteNT;
	@AutoGenerated
	private Label label_22;
	@AutoGenerated
	private TextField txtNombreSolicitanteNT;
	@AutoGenerated
	private NumberField txtCodigoSolicitanteNT;
	@AutoGenerated
	private Label label_21;
	@AutoGenerated
	private Label label_20;
	@AutoGenerated
	private AbsoluteLayout lytDetalleTramiteNT;
	@AutoGenerated
	private TextArea txtAObservacion;
	@AutoGenerated
	private Label label_19;
	@AutoGenerated
	private TextArea txtAGlosa;
	@AutoGenerated
	private Label label_18;
	@AutoGenerated
	private ComboBox cbxProcedimiento;
	@AutoGenerated
	private Label label_17;
	@AutoGenerated
	private TextField txtNumeroDoc;
	@AutoGenerated
	private Label label_16;
	@AutoGenerated
	private ComboBox cbxTipoDocumento;
	@AutoGenerated
	private Label label_15;
	@AutoGenerated
	private AbsoluteLayout lytTupa;
	@AutoGenerated
	private TabSheet tabTramTuPA;
	@AutoGenerated
	private AbsoluteLayout lytMovimientoExpedientes;
	@AutoGenerated
	private NumberField txtAnioExpedienteMov;
	@AutoGenerated
	private Label lblAnioBusqeda;
	@AutoGenerated
	private Button btnBuscarExpedienteMov;
	@AutoGenerated
	private NumberField txtCodigoExpedienteBuscar;
	@AutoGenerated
	private Label label_27;
	@AutoGenerated
	private Button btnVerDetalleExpedientes;
	@AutoGenerated
	private Table tbMovimientoExpedientes;
	@AutoGenerated
	private AbsoluteLayout lytPersonaRealizaTramite;
	@AutoGenerated
	private Panel panel_6;
	@AutoGenerated
	private AbsoluteLayout absoluteLayout_5;
	@AutoGenerated
	private Boton btnLimpiarRepresentanteTUPA;
	@AutoGenerated
	private TextField txtDireccionRepresentante;
	@AutoGenerated
	private Label label_14;
	@AutoGenerated
	private TextField txtNombreRepresentante;
	@AutoGenerated
	private NumberField txtCodigoRepresentante;
	@AutoGenerated
	private Boton btnAgregarRepresentanteLegal;
	@AutoGenerated
	private Boton btnBuscarRepresentanteLegal;
	@AutoGenerated
	private Label label_13;
	@AutoGenerated
	private Label label_12;
	@AutoGenerated
	private Panel panel_5;
	@AutoGenerated
	private AbsoluteLayout absoluteLayout_4;
	@AutoGenerated
	private TextField txtDireccionSolicitante;
	@AutoGenerated
	private Label label_11;
	@AutoGenerated
	private TextField txtNombreSolicitante;
	@AutoGenerated
	private NumberField txtCodigoSolicitante;
	@AutoGenerated
	private Boton btnAgregarSolicitante;
	@AutoGenerated
	private Boton btnBuscarPersonaSolicitante;
	@AutoGenerated
	private Label label_10;
	@AutoGenerated
	private Label label_9;
	@AutoGenerated
	private AbsoluteLayout lytObservaciones;
	@AutoGenerated
	private TextArea txtAObservacionesTUPA;
	@AutoGenerated
	private Label label_26;
	@AutoGenerated
	private AbsoluteLayout lytDetalleTramite;
	@AutoGenerated
	private CheckBox chkArchivoProv;
	@AutoGenerated
	private TextField txtDerPagos;
	@AutoGenerated
	private Label label_8;
	@AutoGenerated
	private TextField txtDiasAtencion;
	@AutoGenerated
	private Label label_7;
	@AutoGenerated
	private Table tbPagos;
	@AutoGenerated
	private Table tbRequisitos;
	@AutoGenerated
	private TextField txtNombreTramite;
	@AutoGenerated
	private NumberField txtCodigoTramite;
	@AutoGenerated
	private Boton btnBuscarTramite;
	@AutoGenerated
	private Panel panel_2;
	@AutoGenerated
	private AbsoluteLayout absoluteLayout_2;
	@AutoGenerated
	private Boton btnBuscarOficinaDestino;
	@AutoGenerated
	private TextField txtOficina;
	@AutoGenerated
	private NumberField txtCodigoOficina;
	@AutoGenerated
	private Label label_6;
	@AutoGenerated
	private ComboBox cbxTipoExpediente;
	@AutoGenerated
	private Label label_5;
	@AutoGenerated
	private NumberField txtNumFolio;
	@AutoGenerated
	private Label label_4;
	@AutoGenerated
	private PopupDateField fecRecepcion;
	@AutoGenerated
	private Label label_3;
	@AutoGenerated
	private TextField txtExpediente;
	@AutoGenerated
	private Label label_2;
	@AutoGenerated
	private NumberField txtAnio;
	@AutoGenerated
	private Label label_1;
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private Window quienLlama;
	private Log logger = LogFactory.getLog(ExpedienteMantenimiento.class);
	private DependenciaServicio dependenciaService;
	private TipoTramiteService tipoTramiteService;
	private PagosTupaService pagosTupaService;
	private TupaService tupaService;
	private PersonaServicio personaService;
	private TipoDocumentoServicio tipoDocumentoService;
	private RequisitoTupaService requisitosTupaService;
	private ExpedienteServicio expedienteService;
	private ExpedienteRequisitoServicio expedienteRequisitoService;
	private ExpedienteMovimientoServicio expedienteMovimientoService;
	private DocumentoInternoService documentoInternoService;
	private ExpedientePagoServicio expedientePagoService;
	private DocumentoInternoDestinoService documentoInternoDestinoService;
	private List<RequisitoTupa> lsRequisitosTupa;
	private List<PagosTupa> lsPagosTupas;
	private Persona persona;
	private static final String[] tipoExpediente = { "TRÁMITE TUPA",
			"TRÁMITE NO TUPA" };
	private Tab acTupa;
	private Tab acNoTupa;
	private Tab tbDetalleTramiteTupa, tbObservacionesTupa, tbPersonaTupa,
			tbMovimientoExpediente, tbDetalleTramiteNT, tbPersonaNT;
	private Permiso permiso;
	private Boolean isNuevo = false;
	private int codBusqueda;
	private Persona solicitanteTupa;
	private Persona representanteLegalTupa;
	private Persona solicitanteNoTupa;
	private Persona representanteLegalNoTupa;
	private Expediente expediente;
	private TipoTramite tipoTramite;
	private DocumentoInterno documentoInterno;
	private DocumentoInternoDestino documentoInternoDestino;
	private Dependencia dependenciaObtenida;
	private Boolean personaObligatoria = false;
	private List<ExpedienteRequisito> lsExpedienteRequisitos;
	private List<ExpedientePago> lsExpedientePagos;
	private Expediente expedienteObtenido;
	private Boolean numCompleto = false;
	private UtilService utilService;
	private Map<String, Integer> expedienteColumnLenghts;
	private Map<String, Integer> tramiteColumnLenghts;
	private Map<String, Integer> personaColumnLenghts;
	private Map<String, Integer> expedientePagosColumnLenghts;
	private Boolean movimientoSeleccionado = false;
	private ExpedienteMovimiento movimientoObtenido;
	private List<Cargo> cargos;
	private Cargo cargo;
	private PersonaDocumentoServicio personaDocumentoServicio;
	private boolean confirmacion = false;

	/**
	 * The constructor should first build the main layout, set the composition
	 * root and then do any custom initialization.
	 * 
	 * The constructor will not be automatically regenerated by the visual
	 * editor.
	 */
	public ExpedienteMantenimiento(Window quienLlama, Permiso permiso) {
		this.utilService = Injector.obtenerServicio(UtilService.class);
		this.documentoInternoDestinoService = Injector
				.obtenerServicio(DocumentoInternoDestinoService.class);
		this.documentoInternoService = Injector
				.obtenerServicio(DocumentoInternoService.class);
		this.expedientePagoService = Injector
				.obtenerServicio(ExpedientePagoServicio.class);
		this.expedienteMovimientoService = Injector
				.obtenerServicio(ExpedienteMovimientoServicio.class);
		this.expedienteRequisitoService = Injector
				.obtenerServicio(ExpedienteRequisitoServicio.class);
		this.expedienteService = Injector
				.obtenerServicio(ExpedienteServicio.class);
		this.personaService = Injector.obtenerServicio(PersonaServicio.class);
		this.dependenciaService = Injector
				.obtenerServicio(DependenciaServicio.class);
		this.tipoTramiteService = Injector
				.obtenerServicio(TipoTramiteService.class);
		this.requisitosTupaService = Injector
				.obtenerServicio(RequisitoTupaService.class);
		this.tupaService = Injector.obtenerServicio(TupaService.class);
		this.pagosTupaService = Injector
				.obtenerServicio(PagosTupaService.class);
		this.tipoDocumentoService = Injector
				.obtenerServicio(TipoDocumentoServicio.class);
		this.personaDocumentoServicio = Injector
				.obtenerServicio(PersonaDocumentoServicio.class);
		this.quienLlama = quienLlama;
		this.permiso = permiso;
		buildMainLayout();
		setCompositionRoot(mainLayout);
		postBuild();
		llenarCombos();
		resetarFormulario();
	}

	public void obtenerMotivo(String motivo, Boolean confirmacion,
			Integer tipoOperacion) {
		if (confirmacion) {
			expedienteObtenido.setMotivoModificacion(motivo);
			this.confirmacion = true;
			if (tipoOperacion.equals(Constantes.TIPO_OPERACION.MODIFICACION)) {
				btnGuardar.click();
			} else {
				btnEliminar.click();
			}
			this.confirmacion = false;
		}
	}

	public void postBuild() {
		label_25.setContentMode(ContentMode.HTML);
		label_24.setContentMode(ContentMode.HTML);
		label_23.setContentMode(ContentMode.HTML);
		label_22.setContentMode(ContentMode.HTML);
		label_21.setContentMode(ContentMode.HTML);
		label_20.setContentMode(ContentMode.HTML);
		label_19.setContentMode(ContentMode.HTML);
		label_18.setContentMode(ContentMode.HTML);
		label_17.setContentMode(ContentMode.HTML);
		label_16.setContentMode(ContentMode.HTML);
		label_15.setContentMode(ContentMode.HTML);
		label_14.setContentMode(ContentMode.HTML);
		label_13.setContentMode(ContentMode.HTML);
		label_12.setContentMode(ContentMode.HTML);
		label_11.setContentMode(ContentMode.HTML);
		label_10.setContentMode(ContentMode.HTML);
		label_9.setContentMode(ContentMode.HTML);
		label_26.setContentMode(ContentMode.HTML);
		label_8.setContentMode(ContentMode.HTML);
		label_7.setContentMode(ContentMode.HTML);
		label_6.setContentMode(ContentMode.HTML);
		label_5.setContentMode(ContentMode.HTML);
		label_4.setContentMode(ContentMode.HTML);
		label_3.setContentMode(ContentMode.HTML);
		label_2.setContentMode(ContentMode.HTML);
		label_1.setContentMode(ContentMode.HTML);
		label_27.setContentMode(ContentMode.HTML);
		lblAnioBusqeda.setContentMode(ContentMode.HTML);

		txtAnioExpedienteMov.setMaxLength(4);
		Calendar calendario = Calendar.getInstance();
		txtAnioExpedienteMov.setValue("" + calendario.get(Calendar.YEAR));
		this.expedienteColumnLenghts = utilService
				.getLengthColumns("expediente");
		this.expedientePagosColumnLenghts = utilService
				.getLengthColumns("expedientepagos");
		this.tramiteColumnLenghts = utilService.getLengthColumns("tipotramite");
		this.personaColumnLenghts = utilService.getLengthColumns("persona");
		this.txtCodigoRepresentante.setMaxLength(personaColumnLenghts
				.get("codpersona"));
		this.txtCodigoSolicitante.setMaxLength(personaColumnLenghts
				.get("codpersona"));
		this.txtCodigoSolicitanteNT.setMaxLength(personaColumnLenghts
				.get("codpersona"));
		this.txtRepresentanteNT.setMaxLength(personaColumnLenghts
				.get("codpersona"));
		this.txtCodigoTramite.setMaxLength(tramiteColumnLenghts
				.get("codtipotramite"));
		btnAgregarRepresentanteLegal.setStyleName(Reindeer.BUTTON_LINK);
		btnAgregarRepresentanteNT.setStyleName(Reindeer.BUTTON_LINK);
		btnAgregarSolicitante.setStyleName(Reindeer.BUTTON_LINK);
		btnAgregarSolicitanteNT.setStyleName(Reindeer.BUTTON_LINK);
		btnBuscarOficinaDestino.setStyleName(Reindeer.BUTTON_LINK);
		btnBuscarPersonaSolicitante.setStyleName(Reindeer.BUTTON_LINK);
		btnBuscarRepresentanteLegal.setStyleName(Reindeer.BUTTON_LINK);
		btnBuscarRepresentanteNT.setStyleName(Reindeer.BUTTON_LINK);
		btnBuscarSolicitanteNT.setStyleName(Reindeer.BUTTON_LINK);
		btnBuscarTramite.setStyleName(Reindeer.BUTTON_LINK);
		btnLimparRepresentanteNT.setStyleName(Reindeer.BUTTON_LINK);
		btnLimpiarRepresentanteTUPA.setStyleName(Reindeer.BUTTON_LINK);
		btnLimparRepresentanteNT.addClickListener((ClickListener) this);
		btnLimpiarRepresentanteTUPA.addClickListener((ClickListener) this);
		btnBuscarExpediente.addClickListener((ClickListener) this);
		btnNuevo.addClickListener((ClickListener) this);
		btnGuardar.addClickListener((ClickListener) this);
		btnEliminar.addClickListener((ClickListener) this);
		btnCancelar.addClickListener((ClickListener) this);
		btnBuscarExpedienteMov.addClickListener((ClickListener) this);
		btnVerDetalleExpedientes.addClickListener((ClickListener) this);
		btnImprimir.addClickListener((ClickListener) this);
		btnBuscarOficinaDestino.addClickListener((ClickListener) this);
		btnBuscarTramite.addClickListener((ClickListener) this);
		btnBuscarPersonaSolicitante.addClickListener((ClickListener) this);
		btnAgregarSolicitante.addClickListener((ClickListener) this);
		btnBuscarRepresentanteLegal.addClickListener((ClickListener) this);
		btnAgregarRepresentanteLegal.addClickListener((ClickListener) this);
		btnBuscarSolicitanteNT.addClickListener((ClickListener) this);
		btnBuscarRepresentanteNT.addClickListener((ClickListener) this);
		btnAgregarSolicitanteNT.addClickListener((ClickListener) this);
		fecRecepcion.setEnabled(false);
		txtExpediente.setEnabled(false);
		btnAgregarRepresentanteNT.addClickListener((ClickListener) this);
		txtOficina.setEnabled(false);
		txtNombreTramite.setEnabled(false);
		txtNumFolio.setEnabled(false);
		txtDiasAtencion.setEnabled(false);
		txtDerPagos.setEnabled(false);
		txtNumFolio.setTabIndex(1);
		txtCodigoOficina.setTabIndex(2);
		btnBuscarOficinaDestino.setTabIndex(3);
		btnBuscarTramite.setTabIndex(4);
		txtCodigoTramite.setTabIndex(5);
		btnAgregarSolicitante.setTabIndex(7);
		btnBuscarPersonaSolicitante.setTabIndex(6);
		txtCodigoSolicitante.setTabIndex(8);
		btnBuscarRepresentanteLegal.setTabIndex(9);
		btnAgregarRepresentanteLegal.setTabIndex(10);
		txtCodigoRepresentante.setTabIndex(11);
		btnLimpiarRepresentanteTUPA.setTabIndex(12);
		txtAnioExpedienteMov.setTabIndex(13);
		txtCodigoExpedienteBuscar.setTabIndex(14);
		btnBuscarExpedienteMov.setTabIndex(15);
		btnVerDetalleExpedientes.setTabIndex(16);
		txtNumeroDoc.setTabIndex(17);
		cbxProcedimiento.setTabIndex(18);
		txtAGlosa.setTabIndex(19);
		txtAObservacion.setTabIndex(20);
		btnBuscarSolicitanteNT.setTabIndex(21);
		btnAgregarSolicitanteNT.setTabIndex(22);
		txtCodigoSolicitanteNT.setTabIndex(23);
		btnBuscarRepresentanteNT.setTabIndex(24);
		btnAgregarRepresentanteNT.setTabIndex(25);
		txtRepresentanteNT.setTabIndex(26);
		btnLimparRepresentanteNT.setTabIndex(27);

		btnGuardar.setTabIndex(28);
		btnEliminar.setTabIndex(29);
		btnBuscarExpediente.setTabIndex(30);
		btnImprimir.setTabIndex(31);
		txtAnio.setValue("" + calendario.get(Calendar.YEAR));
		txtAnio.setEnabled(false);

		acTupa = accordion_1.addTab(lytTupa, "Trámite TUPA");
		acNoTupa = accordion_1.addTab(lytNoTUPA, "Trámite No TUPA");
		tbDetalleTramiteTupa = tabTramTuPA.addTab(lytDetalleTramite,
				"Detalle Trámite");
		tbObservacionesTupa = tabTramTuPA.addTab(lytObservaciones,
				"Observaciones");
		tbPersonaTupa = tabTramTuPA.addTab(lytPersonaRealizaTramite,
				"Persona que Realiza Trámite");
		tbMovimientoExpediente = tabTramTuPA.addTab(lytMovimientoExpedientes,
				"Movimiento Expedientes");
		tbDetalleTramiteNT = tabSheet_1.addTab(lytDetalleTramiteNT,
				"Detalle Trámite");
		tbPersonaNT = tabSheet_1.addTab(lytPersonaNT,
				"Persona que Realiza Trámite");
		acNoTupa.setVisible(false);
		tbRequisitos.setSelectable(true);
		tbRequisitos.setImmediate(true);
		IndexedContainer contenedor = new IndexedContainer();
		contenedor.addContainerProperty("id", Long.class, null);
		contenedor.addContainerProperty("item", Integer.class, null);
		contenedor.addContainerProperty("chk", CheckBox.class, null);
		contenedor.addContainerProperty("requisito", String.class, null);
		contenedor.addContainerProperty("fedatear", Boolean.class, null);
		tbRequisitos.setContainerDataSource(contenedor);
		tbRequisitos.setVisibleColumns(new Object[] { "item", "chk",
				"requisito" });
		tbRequisitos.setColumnHeader("item", "Item");
		tbRequisitos.setColumnHeader("chk", "Chk");
		tbRequisitos.setColumnHeader("requisito", "Requisito");
		tbRequisitos.setColumnWidth("item", 40);
		tbRequisitos.setColumnWidth("chk", 50);
		tbRequisitos.setColumnWidth("requisito", 430);

		tbPagos.setSelectable(true);
		tbPagos.setImmediate(true);
		IndexedContainer contenedorPagos = new IndexedContainer();
		contenedorPagos.addContainerProperty("id", Long.class, null);
		contenedorPagos.addContainerProperty("item", Integer.class, null);
		contenedorPagos.addContainerProperty("chk", CheckBox.class, null);
		contenedorPagos.addContainerProperty("nombre", String.class, null);
		contenedorPagos.addContainerProperty("costo", Float.class, null);
		contenedorPagos
				.addContainerProperty("numRecibo", TextField.class, null);
		tbPagos.setContainerDataSource(contenedorPagos);
		tbPagos.setVisibleColumns(new Object[] { "item", "chk", "nombre",
				"costo", "numRecibo" });
		tbPagos.setColumnHeader("item", "Item");
		tbPagos.setColumnHeader("chk", "Chk");
		tbPagos.setColumnHeader("nombre", "Tributo");
		tbPagos.setColumnHeader("costo", "Importe(S/.)");
		tbPagos.setColumnHeader("numRecibo", "N°Rec.");
		tbPagos.setColumnWidth("item", 20);
		tbPagos.setColumnWidth("chk", 25);
		tbPagos.setColumnWidth("nombre", 240);
		tbPagos.setColumnWidth("costo", 60);
		tbPagos.setColumnWidth("numRecibo", 165);

		IndexedContainer contenedorMovimientos = new IndexedContainer();
		contenedorMovimientos.addContainerProperty("id", Long.class, null);
		contenedorMovimientos.addContainerProperty("item", Long.class, null);
		contenedorMovimientos
				.addContainerProperty("origen", String.class, null);
		contenedorMovimientos.addContainerProperty("destino", String.class,
				null);
		contenedorMovimientos.addContainerProperty("fechaenvio", String.class,
				null);
		contenedorMovimientos.addContainerProperty("fecharecepcion",
				String.class, null);
		contenedorMovimientos.addContainerProperty("fechaRespuesta",
				String.class, null);
		tbMovimientoExpedientes.setContainerDataSource(contenedorMovimientos);
		tbMovimientoExpedientes.setVisibleColumns(new Object[] { "item",
				"destino", "fechaenvio", "fecharecepcion", "fechaRespuesta" });
		tbMovimientoExpedientes.setColumnWidth("item", 15);
		tbMovimientoExpedientes.setColumnWidth("destino", 150);
		tbMovimientoExpedientes.setColumnWidth("fechaenvio", 90);
		tbMovimientoExpedientes.setColumnWidth("fecharecepcion", 90);
		tbMovimientoExpedientes.setColumnWidth("fechaRespuesta", 90);
		tbMovimientoExpedientes.setColumnHeader("item", "N°");
		tbMovimientoExpedientes.setColumnHeader("destino", "Dependencia");
		tbMovimientoExpedientes.setColumnHeader("fechaenvio", "Fecha Envío");
		tbMovimientoExpedientes.setColumnHeader("fechaRespuesta",
				"Fecha Respuesta");
		tbMovimientoExpedientes.setColumnHeader("fecharecepcion",
				"Fecha Recepción");
		tbMovimientoExpedientes.setImmediate(true);
		tbMovimientoExpedientes.setSelectable(true);
		tbMovimientoExpedientes
				.addValueChangeListener(new ValueChangeListener() {

					@Override
					public void valueChange(ValueChangeEvent event) {
						// TODO Auto-generated method stub
						Item item = tbMovimientoExpedientes
								.getItem(tbMovimientoExpedientes.getValue());
						if (item != null) {
							movimientoSeleccionado = true;
							getMovimientoSeleccionado(Long.parseLong(item
									.getItemProperty("id").getValue()
									.toString()));
						}

					}
				});

		cbxTipoExpediente.setImmediate(true);
		cbxTipoExpediente.setFilteringMode(FilteringMode.CONTAINS);
		cbxTipoExpediente.addValueChangeListener(new ValueChangeListener() {

			private static final long serialVersionUID = 1L;

			@Override
			public void valueChange(ValueChangeEvent event) {
				// TODO Auto-generated method stub
				logger.info(event.getProperty().getValue() + "Codigo");
				if (event.getProperty().getValue().toString().trim()
						.equals("0")) {
					acNoTupa.setVisible(false);
					acTupa.setVisible(true);
					txtCodigoOficina.setEnabled(false);
					txtOficina.setEnabled(false);
					btnBuscarOficinaDestino.setEnabled(false);
					limpiarFormulario();
					txtCodigoTramite.focus();
				} else if (event.getProperty().getValue().toString().trim()
						.equals("1")) {
					acNoTupa.setVisible(true);
					acTupa.setVisible(false);
					txtCodigoOficina.setEnabled(true);
					txtOficina.setEnabled(true);
					btnBuscarOficinaDestino.setEnabled(true);
					limpiarFormulario();
					cbxTipoDocumento.focus();
				}
			}
		});
		txtNumFolio.setImmediate(true);
		// txtNumFolio.addListener(new ValueChangeListener() {
		//
		// @Override
		// public void valueChange(ValueChangeEvent event) {
		// // TODO Auto-generated method stub
		//
		// }
		// });

		txtNumFolio.addBlurListener(new BlurListener() {

			@Override
			public void blur(BlurEvent event) {
				if (txtNumFolio.getValue().toString().equals("")) {
					txtNumFolio.setValue("1");
				} else {
					if (txtNumFolio.getValue().toString().length() > 6) {
						txtNumFolio.setValue("1");
					} else {
						txtNumFolio.setValue(obtenerNumFolio(Long
								.parseLong(txtNumFolio.getValue().toString())));

					}
				}

			}
		});
		txtCodigoExpedienteBuscar.setImmediate(true);
		txtCodigoExpedienteBuscar.addBlurListener(new BlurListener() {

			@Override
			public void blur(BlurEvent event) {
				// TODO Auto-generated method stub
				if (txtCodigoExpedienteBuscar.getValue().toString().equals("")) {
					txtCodigoExpedienteBuscar.setValue("1");
				} else {
					if (txtCodigoExpedienteBuscar.getValue().toString()
							.length() > 8) {
						txtCodigoExpedienteBuscar.setValue("0");
					} else {
						Long codExpediente = Long
								.parseLong(txtCodigoExpedienteBuscar.getValue()
										.toString());
						txtCodigoExpedienteBuscar.setValue(SigeUtil
								.completarCeros(codExpediente.toString(), 8, 1));
					}
				}
			}
		});

		this.txtCodigoOficina.setImmediate(true);
		this.txtCodigoOficina.setId("codOficina");
		this.txtNumFolio.setId("numFolio");
		this.txtCodigoTramite.setImmediate(true);
		this.txtCodigoTramite.setId("codTramite");
		this.txtCodigoSolicitanteNT.setImmediate(true);
		this.txtCodigoSolicitanteNT.setId("solicitanteNT");
		this.txtRepresentanteNT.setImmediate(true);
		this.txtRepresentanteNT.setId("representanteNT");
		this.txtCodigoSolicitante.setImmediate(true);
		this.txtCodigoSolicitante.setId("solicitante");
		this.txtCodigoRepresentante.setImmediate(true);
		this.txtCodigoRepresentante.setId("representante");
		this.txtCodigoExpedienteBuscar.setImmediate(true);
		this.txtCodigoExpedienteBuscar.setId("codExpediente");
		txtNumFolio.addShortcutListener(new ShortcutListener("", KeyCode.ENTER,
				null) {
			private static final long serialVersionUID = 1L;

			@Override
			public void handleAction(Object sender, Object target) {
				// TODO Auto-generated method stub
				if (target instanceof NumberField
						&& ((NumberField) target).getId().equals("numFolio")) {
					cbxTipoExpediente.focus();
				} else if (target instanceof NumberField
						&& ((NumberField) target).getId().equals(
								"codExpediente")) {
					if (txtAnioExpedienteMov.getValue().toString().equals("")) {
						Notificacion.show(new Notificacion(
								"Debe ingresar el año",
								Constantes.MENSAJE.TYPE_WARNING));
					} else {
						obtenerMovimientosDelExpediente();
					}

				} else if (target instanceof NumberField
						&& ((NumberField) target).getId().equals("codOficina")) {
					Dependencia dependenciaObtenida = dependenciaService
							.obtener(Long.parseLong(txtCodigoOficina.getValue()
									.toString()));
					if (dependenciaObtenida == null) {
						Notificacion.show(new Notificacion(
								"No se encontró Oficina con ese código",
								Constantes.MENSAJE.TYPE_WARNING));
					} else {
						txtCodigoOficina.setValue(dependenciaObtenida.getId()
								+ "");
						txtOficina.setValue(dependenciaObtenida.getNombre());
					}
				} else if (target instanceof NumberField
						&& ((NumberField) target).getId().equals("codTramite")) {
					TipoTramite tipoTramiteObtenido = tipoTramiteService
							.obtenerTipoTramitePorCod(txtCodigoTramite
									.getValue().toString());
					if (tipoTramiteObtenido == null) {
						Notificacion.show(new Notificacion(
								"No se encontró tramite con ese código",
								Constantes.MENSAJE.TYPE_WARNING));

					} else {
						obtenerDetalleTramite(txtCodigoTramite.getValue()
								.toString());
					}
				} else if (target instanceof NumberField
						&& ((NumberField) target).getId().equals(
								"solicitanteNT")) {
					Persona personaObtenida = personaService.obtener(Long
							.parseLong(txtCodigoSolicitanteNT.getValue()
									.toString()));
					if (personaObtenida == null) {
						Notificacion.show(new Notificacion(
								"No se encontró Persona con ese código",
								Constantes.MENSAJE.TYPE_WARNING));

					} else {
						txtNombreSolicitanteNT.setValue(personaObtenida
								.getNombreCompleto());
						txtDireccionSolicitanteNT
								.setValue(obtenerDireccion(personaObtenida));
					}
				} else if (target instanceof NumberField
						&& ((NumberField) target).getId().equals(
								"representanteNT")) {
					Persona personaObtenida = personaService.obtener(Long
							.parseLong(txtRepresentanteNT.getValue().toString()));
					if (personaObtenida == null) {
						Notificacion.show(new Notificacion(
								"No se encontró persona con ese código",
								Constantes.MENSAJE.TYPE_WARNING));
						;

					} else {
						txtNombreRepresentanteNT.setValue(personaObtenida
								.getNombreCompleto());
						txtDireccionRepresentanteNT
								.setValue(obtenerDireccion(personaObtenida));
					}
				} else if (target instanceof NumberField
						&& ((NumberField) target).getId().equals("solicitante")) {
					Persona personaObtenida = personaService.obtener(Long
							.parseLong(txtCodigoSolicitante.getValue()
									.toString()));
					if (personaObtenida == null) {
						Notificacion.show(new Notificacion(
								"No se encontró persona con ese código",
								Constantes.MENSAJE.TYPE_WARNING));

					} else {
						txtNombreSolicitante.setValue(personaObtenida
								.getNombreCompleto());
						txtDireccionSolicitante
								.setValue(obtenerDireccion(personaObtenida));
					}
				} else if (target instanceof NumberField
						&& ((NumberField) target).getId().equals(
								"representante")) {
					Persona personaObtenida = personaService.obtener(Long
							.parseLong(txtCodigoRepresentante.getValue()
									.toString()));
					if (personaObtenida == null) {
						Notificacion.show(new Notificacion(
								"No se encontró persona con ese código",
								Constantes.MENSAJE.TYPE_WARNING));

					} else {
						txtNombreRepresentante.setValue(personaObtenida
								.getNombreCompleto());
						txtDireccionRepresentante
								.setValue(obtenerDireccion(personaObtenida));
					}
				}
			}
		});

		this.btnCancelar.setId("cancelar");
		this.btnEliminar.setId("eliminar");
		this.btnGuardar.setId("guardar");
		this.btnNuevo.setId("nuevo");
		this.btnBuscarOficinaDestino.setId("consultar");
		this.btnBuscarTramite.setId("consultar");
		this.btnImprimir.setId("imprimir");
		this.btnBuscarExpediente.setId("consultar");
		SigeUtil.validarBotones(permiso, this.btnNuevo, this.btnEliminar,
				this.btnGuardar, this.btnCancelar, this.btnImprimir,
				this.btnBuscarOficinaDestino, this.btnBuscarTramite,
				this.btnBuscarExpediente);

		// Expediente expedienteCodigos = obtenerCodigosCorrelativos();
		// logger.info("Codigo Expediente " + expedienteCodigos.getCodigo());
		// logger.info("Numero Expediente" + expedienteCodigos.getNumero());

	}

	public Expediente obtenerCodigosCorrelativos() {
		Expediente expedienteConCodigos = new Expediente();
		Long codExpediente = 0L;
		Long numExpediente = expedienteService.obtenerUltimoCorrelativo();
		List<Expediente> lsExpedientes = expedienteService
				.obtenerUltimoRegistro();
		if (lsExpedientes.size() > 0) {
			codExpediente = Long.parseLong(lsExpedientes.get(0).getCodigo());
		}
		codExpediente = codExpediente + 1L;
		String ultCodExpediente = "0000000" + codExpediente;
		ultCodExpediente = ultCodExpediente.substring(
				ultCodExpediente.length() - 8, ultCodExpediente.length());
		ultCodExpediente = this.txtAnio.getValue().toString().trim()
				+ ultCodExpediente;

		String ultNumExpediente = "0000000" + numExpediente;
		ultNumExpediente = ultNumExpediente.substring(
				ultNumExpediente.length() - 8, ultNumExpediente.length());
		expedienteConCodigos.setCodigo(ultCodExpediente);
		expedienteConCodigos.setNumero(ultNumExpediente);
		return expedienteConCodigos;
	}

	public String obtenerNumFolio(Long numFolio) {
		String numFoliosFinal;
		numFoliosFinal = "00000" + numFolio;
		numFoliosFinal = numFoliosFinal.substring(numFoliosFinal.length() - 6,
				numFoliosFinal.length());

		return numFoliosFinal;
	}

	public void getMovimientoSeleccionado(Long idMovimiento) {
		movimientoObtenido = expedienteMovimientoService.obtener(idMovimiento);
	}

	public void llenarCombos() {
		// Llenar Combo de Tipo de Expediente
		for (int i = 0; i < tipoExpediente.length; i++) {
			cbxTipoExpediente.addItem(i);
			cbxTipoExpediente.setItemCaption(i, tipoExpediente[i]);
		}
		cbxTipoExpediente.setValue(0);

		// Llenar comboTipoDocumento
		List<TipoDocumento> lsTipoDocumento = tipoDocumentoService
				.obtenerDocumentosExpediente();
		for (TipoDocumento td : lsTipoDocumento) {
			cbxTipoDocumento.addItem(td.getId());
			cbxTipoDocumento.setItemCaption(td.getId(), td.getNombre());
		}

		if (lsTipoDocumento.size() > 0) {
			cbxTipoDocumento.setValue(lsTipoDocumento.get(0).getId());
		}

		// Llenar comboProcedimiento
		List<TipoTramite> lsTipoTramiteNoTUPA = tipoTramiteService
				.obtenerTipoTramiteNoTupa();
		for (TipoTramite tt : lsTipoTramiteNoTUPA) {
			cbxProcedimiento.addItem(tt.getId());
			cbxProcedimiento.setItemCaption(tt.getId(), tt.getNombre());
		}
		if (lsTipoTramiteNoTUPA.size() > 0) {
			cbxProcedimiento.setValue(lsTipoTramiteNoTUPA.get(0).getId());
		}

		cbxTipoExpediente.setNullSelectionAllowed(false);
		cbxTipoDocumento.setNullSelectionAllowed(false);
		cbxProcedimiento.setNullSelectionAllowed(false);
	}

	@Override
	public void buttonClick(ClickEvent event) {
		// TODO Auto-generated method stub
		if (event.getSource() == this.btnBuscarOficinaDestino) {
			Window subWindow = SigeUtil.generarBuscador(new Window(),
					"BUSCAR OFICINA DE DESTINO", "645px", "375px");
			subWindow.setContent(new DependenciaBuscar(subWindow, this));
			UI.getCurrent().addWindow(subWindow);
		} else if (event.getSource() == this.btnLimparRepresentanteNT) {
			representanteLegalNoTupa = null;
			txtRepresentanteNT.setValue("");
			txtNombreRepresentanteNT.setValue("");
			txtDireccionRepresentanteNT.setValue("");
		} else if (event.getSource() == this.btnLimpiarRepresentanteTUPA) {
			representanteLegalTupa = null;
			txtCodigoRepresentante.setValue("");
			txtNombreRepresentante.setValue("");
			txtDireccionRepresentante.setValue("");
		} else if (event.getSource() == this.btnVerDetalleExpedientes) {
			if (movimientoSeleccionado) {
				Window ventana = SigeUtil.generarBuscador(new Window(),
						"DETALLE DEL MOVIMIENTO", "620", "420");
				ventana.setContent(new DetalleMovimientoExpediente(ventana,
						this, this.movimientoObtenido));
				UI.getCurrent().addWindow(ventana);
			} else {
				Notificacion.show(new Notificacion(
						"Debe seleccionar un elemento de la tabla",
						Constantes.MENSAJE.TYPE_ERROR));
			}
			movimientoSeleccionado = false;
			tbMovimientoExpedientes
					.unselect(tbMovimientoExpedientes.getValue());
		} else if (event.getSource() == this.btnBuscarTramite) {
			TipoTramiteCanonico canonico = new TipoTramiteCanonico();
			Calendar calendario = Calendar.getInstance();
			canonico.setAnio("" + calendario.get(Calendar.YEAR));
			canonico.setTupa("T");
			canonico.setMensaje("<center><b>De doble click en la celda para seleccionarla</b></center>");
			Window subWindow = SigeUtil.generarBuscador(new Window(),
					"BUSCAR PROCEDIMIENTO TUPA", "800px", "450px");
			TipoTramiteBuscar tipoTramiteBuscar = new TipoTramiteBuscar(
					subWindow, this, canonico);
			subWindow.setContent(tipoTramiteBuscar);
			UI.getCurrent().addWindow(subWindow);
			tipoTramiteBuscar.rellenarDatosTablaTipoTramite();
		} else if (event.getSource() == this.btnBuscarPersonaSolicitante) {
			this.codBusqueda = 1;
			Window subWindow = SigeUtil.generarBuscador(new Window(),
					"BUSCAR SOLICITANTE", "550px", "425px");
			subWindow.setContent(new PersonaBuscar(subWindow, this));
			UI.getCurrent().addWindow(subWindow);
		} else if (event.getSource() == this.btnBuscarRepresentanteLegal) {
			this.codBusqueda = 2;
			Window subWindow = SigeUtil.generarBuscador(new Window(),
					"BUSCAR REPRESENTANTE LEGAL", "550px", "425px");
			subWindow.setContent(new PersonaBuscar(subWindow, this));
			UI.getCurrent().addWindow(subWindow);
		} else if (event.getSource() == this.btnBuscarSolicitanteNT) {
			this.codBusqueda = 3;
			Window subWindow = SigeUtil.generarBuscador(new Window(),
					"BUSCAR SOLICITANTE", "550px", "425px");
			subWindow.setContent(new PersonaBuscar(subWindow, this));
			UI.getCurrent().addWindow(subWindow);
		} else if (event.getSource() == this.btnBuscarRepresentanteNT) {
			this.codBusqueda = 4;
			Window subWindow = SigeUtil.generarBuscador(new Window(),
					"BUSCAR REPRESENTANTE", "550px", "425px");
			subWindow.setContent(new PersonaBuscar(subWindow, this));
			UI.getCurrent().addWindow(subWindow);
		} else if (event.getSource() == this.btnAgregarRepresentanteLegal) {
			this.codBusqueda = 2;
			Window subWindow = SigeUtil.generarBuscador(new Window(),
					"AGREGAR REPRESENTANTE LEGAL", "645px", "485px");
			subWindow.setContent(new PersonaMantenimiento(subWindow, this,
					this.permiso));
			UI.getCurrent().addWindow(subWindow);
		} else if (event.getSource() == this.btnAgregarSolicitante) {
			this.codBusqueda = 1;
			Window subWindow = SigeUtil.generarBuscador(new Window(),
					"AGREGAR SOLICITANTE", "645px", "485px");
			subWindow.setContent(new PersonaMantenimiento(subWindow, this,
					this.permiso));
			UI.getCurrent().addWindow(subWindow);
		} else if (event.getSource() == this.btnAgregarRepresentanteNT) {
			this.codBusqueda = 4;
			Window subWindow = SigeUtil.generarBuscador(new Window(),
					"AGREGAR REPRESENTANTE LEGAL", "645px", "485px");
			subWindow.setContent(new PersonaMantenimiento(subWindow, this,
					this.permiso));
			UI.getCurrent().addWindow(subWindow);
		} else if (event.getSource() == this.btnAgregarSolicitanteNT) {
			this.codBusqueda = 3;
			Window subWindow = SigeUtil.generarBuscador(new Window(),
					"AGREGAR SOLICITANTE", "645px", "485px");
			subWindow.setContent(new PersonaMantenimiento(subWindow, this,
					this.permiso));
			UI.getCurrent().addWindow(subWindow);
		} else if (event.getSource() == this.btnBuscarExpediente) {
			Window ventana = SigeUtil.generarBuscador(new Window(),
					"BUSCAR EXPEDIENTE", "910px", "390px");
			ExpedienteBuscar expedienteBuscar = new ExpedienteBuscar(ventana,
					this, 0, false, null);
			ventana.setContent(expedienteBuscar);
			UI.getCurrent().addWindow(ventana);
			expedienteBuscar.getAllExpedientes();
		} else if (event.getSource() == this.btnNuevo) {
			txtNumFolio.focus();
			NuevoRegistro();
		} else if (event.getSource() == this.btnCancelar) {
			resetarFormulario();
			limpiarFormulario();
		} else if (event.getSource() == this.btnBuscarExpedienteMov) {
			if (txtAnioExpedienteMov.getValue().toString().equals("")
					|| txtCodigoExpedienteBuscar.getValue().equals("")) {
				Notificacion.show(new Notificacion(
						"Debe ingresar año y número de expediente",
						Constantes.MENSAJE.TYPE_WARNING));
			} else {
				obtenerMovimientosDelExpediente();
			}
		} else if (event.getSource() == this.btnEliminar) {
			if (expedienteObtenido != null) {
				ExpedienteMovimiento expedienteMovEliminar = expedienteMovimientoService
						.obtenerExpedienteMovimiento(expedienteObtenido
								.getCodigo());
				Window ventana = SigeUtil.generarBuscador(new Window(),
						"ARCHIVAR EXPEDIENTE", "585", "310");
				ventana.setContent(new ArchivarExpedienteProceso(this, ventana,
						expedienteMovEliminar));
				UI.getCurrent().addWindow(ventana);
			} else {
				Notificacion.show(new Notificacion(
						"No se encuentra un expediente para archivar",
						Constantes.MENSAJE.TYPE_ERROR));
			}
		} else if (event.getSource() == this.btnImprimir) {
			cargos = new ArrayList<Cargo>();
			cargo = new Cargo();
			if (expediente != null) {
				cargo.setNumeroExpediente(expediente.getNumero());
				cargo.setAnio(expediente.getAnio());
				cargo.setAsunto(expediente.getAsunto());
				cargo.setDependenciaDestino(expedienteMovimientoService
						.obtenerPrimerOficinaExpediente(expediente.getCodigo()));
				List<PersonaDocumento> documentos = personaDocumentoServicio
						.obtenerPorCodigoPersona(expediente.getSolicitante()
								.getCodigoPersona());
				for (PersonaDocumento pd : documentos) {
					if (pd.getTipoDocumentoPersona() != null) {
						if (pd.getTipoDocumentoPersona().getAbreviatura()
								.trim().equals("DNI")) {
							cargo.setDniSolicitante(pd.getNumeroDocumento());
						} else if ((pd.getTipoDocumentoPersona()
								.getAbreviatura().trim().equals("RUC"))) {
							cargo.setRucSolicitante(pd.getNumeroDocumento());
						}
					}
					if (cargo.getDniSolicitante() != null
							&& cargo.getRucSolicitante() != null
							&& cargo.getDniSolicitante().length() > 0
							&& cargo.getRucSolicitante().length() > 0) {
						break;
					}
				}
				cargo.setFechaIngreso(SigeUtil.obtenerFormatoFecha(expediente
						.getFechaExpediente()));
				if (expediente.getRepresentanteLegal() != null) {
					cargo.setNombreRepresentanteLegal(expediente
							.getRepresentanteLegal().getNombreCompleto());
				}
				cargo.setNombreSolicitante(expediente.getSolicitante().getNombreCompleto());
				cargo.setNumeroFolios(expediente.getNumeroFolios() + "");
				cargo.setObservaciones(expediente.getObservaciones());
				cargos.add(cargo);
				Window ventana = SigeUtil.generarBuscador(new Window(),
						"IMPRIMIR CARGO", "800px", "550px");
				ventana.setContent(new PDFVizualizador(this, permiso, null,
						null, "ExpedienteCargo", cargos));
				UI.getCurrent().addWindow(ventana);
			}

		}

		else if (event.getSource() == this.btnGuardar) {
			if (isNuevo) {
				List<ExpedienteMovimiento> expedienteMovimientos = new ArrayList<ExpedienteMovimiento>();
				expediente = obtenerCodigosCorrelativos();
				Dependencia dependenciaOrigen = dependenciaService.obtener(dependenciaService.getCodigoMesaPartes());
				String codDocumentoInterno = SigeUtil.completarCeros(documentoInternoService.obtenerUltimoCorrelativo().toString(), 8, 1);
				Boolean personaObligatoriaNOTUPA = false;
				if (solicitanteNoTupa == null || txtNombreSolicitanteNT.getValue().toString().equals("")) {
					personaObligatoriaNOTUPA = false;
				} else {
					personaObligatoriaNOTUPA = validarPersonaObligatoriaNoTUPA(this.solicitanteNoTupa);
				}

				//CONDICION PARA VER SI ES NO TUPA
				if (cbxTipoExpediente.getValue() != null && (Integer) cbxTipoExpediente.getValue() == 1) {
					if (SigeUtil.validarCamposTexto(this.txtOficina,txtCodigoOficina, txtNumFolio) && cbxProcedimiento.getValue() != null && personaObligatoriaNOTUPA) {
						expediente.setTipoDocumento(obtenerTipoDocumento());
						expediente.setNumeroDocumento(txtNumeroDoc.getValue().toString());
						expediente.setNumeroFolios(new Short(txtNumFolio.getValue().toString()));
						expediente.setTipoTramite(obtenerTipoTramite());
						expediente.setAsunto(txtAGlosa.getValue().toString().toUpperCase());
						expediente.setObservaciones(txtAObservacion.getValue().toString().toUpperCase());
						expediente.setArchivoProvicional(Boolean.FALSE);
						expediente.setSolicitante(solicitanteNoTupa);
						expediente.setRepresentanteLegal(representanteLegalNoTupa);
						expediente.setAnio(txtAnio.getValue().toString());
						expediente.setTramiteFinalizado(Boolean.FALSE);
						// Documento Interno
						documentoInterno.setCodigodocumento(codDocumentoInterno);
						documentoInterno.setAsunto(txtAGlosa.getValue().toString().toUpperCase());
						documentoInterno.setDependencia(dependenciaService.obtener(dependenciaService.getCodigoMesaPartes()));
						documentoInterno.setAñoDocumento(this.txtAnio.getValue().toString());
						TipoDocumento tipoDocumentoInterno = tipoDocumentoService.obtener(Long.parseLong(cbxTipoDocumento.getValue().toString()));
						documentoInterno.setCodigoTipoDocumento(tipoDocumentoInterno.getCodigoTipoDocumento());
						documentoInterno.setCopiaArchivo(Boolean.FALSE);
						Long numDocumento = documentoInternoService
								.obtenerNumDocumento(dependenciaService
										.obtener(dependenciaService
												.getCodigoMesaPartes()));
						documentoInterno.setNumerodocumento(SigeUtil
								.completarCeros(numDocumento.toString(), 5, 1));
						Date date = new Date();
						Timestamp fechaHora = new Timestamp(date.getTime());
						documentoInterno.setFechadocumento(fechaHora);
						documentoInterno.setNumerofolios(Short
								.parseShort(txtNumFolio.getValue().toString()));
						documentoInterno.setSiglasdocumento("");
						ExpedienteMovimiento expedienteMovimiento = new ExpedienteMovimiento();
						// expedienteMovimiento
						// .setCodigoDependencia(dependenciaObtenida.getId());
						expedienteMovimiento
								.setDependencia(dependenciaObtenida);
						expedienteMovimiento
								.setDocumentoInterno(documentoInterno);
						expedienteMovimiento.setOrden(1);
						expedienteMovimiento
								.setCorrelativo(expedienteMovimientoService
										.obtenerCorrelativoPorExpediente(expediente));
						expedienteMovimiento.setEscopia('0');
						expedienteMovimiento.setExpediente(expediente);
						expedienteMovimientos.add(expedienteMovimiento);
						expediente.setExpedientesMovimiento(expedienteMovimientos);
						// Documento Interno Referencia
						DocumentoInternoReferen docInternoReferen = new DocumentoInternoReferen();
						docInternoReferen.setCodigoDocumento(documentoInterno.getCodigodocumento());
						docInternoReferen.setCodigoDocumentoReferencia(documentoInterno.getCodigodocumento());
						docInternoReferen.setOrden(new Short("1"));
						// Documento Interno Destino
						documentoInternoDestino.setDocumentoInterno(documentoInterno);
						documentoInternoDestino.setDependencia(dependenciaObtenida);
						documentoInternoDestino.setOrden(new Short("1"));
						documentoInternoDestino.setTipoMovimiento('0');
						expediente.setFechaExpediente(new Timestamp(new Date().getTime()));
						expedienteService.registrarExpediente(expediente,expedienteMovimiento, documentoInterno,documentoInternoDestino, docInternoReferen);
						Notificacion
								.show(new Notificacion(
										"Se registró correctamente el expediente <br/>"
												+ "<table>"
												+ "<tr><td><b>Cód.Exp/Hora: </b></td><td>"
												+ expediente.getCodigo()
												+ expediente
														.getFechaExpediente()
												+ "</td></tr>"
												+ "<tr><td><b>Oficina Destino: </b></td><td>"
												+ dependenciaObtenida
														.getNombre()
												+ "</td></tr>" + "</table>",
										Constantes.MENSAJE.TYPE_SUCCES));
						resetarFormulario();
						limpiarFormulario();
						btnImprimir.setEnabled(true);
						tbObservacionesTupa.setEnabled(true);
						tbPersonaTupa.setEnabled(true);
					} else {
						Notificacion.show(new Notificacion(
								"Debe ingresar todos los campos",
								Constantes.MENSAJE.TYPE_ERROR));
					}
				}

				else if (cbxTipoExpediente.getValue() != null && (Integer) cbxTipoExpediente.getValue() == 0) {
					Boolean personaObligatoriaTUPA = false;
					if (solicitanteTupa == null || txtNombreSolicitante.getValue().toString().equals("")) {
						personaObligatoriaTUPA = false;
					} else {
						personaObligatoriaTUPA = validarPersonaObligatoriaTUPA(this.solicitanteTupa);
					}
					if (SigeUtil.validarCamposTexto(this.txtOficina,txtCodigoOficina, txtNumFolio) && personaObligatoriaTUPA) {
						expediente.setTipoTramite(tipoTramite);
						expediente.setSolicitante(solicitanteTupa);
						expediente.setAsunto(tipoTramite.getNombre());
						expediente.setObservaciones(txtAObservacionesTUPA.getValue().toString().toUpperCase());
						expediente.setNumeroDocumento("");
						expediente.setNumeroFolios(new Short(txtNumFolio.getValue().toString()));
						expediente.setAnio(txtAnio.getValue().toString());
						expediente.setRepresentanteLegal(representanteLegalTupa);
						expediente.setArchivoProvicional((Boolean) chkArchivoProv.getValue());
						expediente.setTramiteFinalizado(Boolean.FALSE);
						List<ExpedientePago> expedientePagos = new ArrayList<ExpedientePago>();
						ExpedientePago expedientePago = null;
						int item = 1;
						for (Object id : tbPagos.getItemIds()) {
							expedientePago = new ExpedientePago();
							expedientePago.setCodigoTipoTramite(tipoTramite.getCodigoTipoTramite());
							expedientePago.setPresenta((Boolean) ((CheckBox) tbPagos.getItem(id).getItemProperty("chk").getValue()).getValue());
							expedientePago.setExpediente(expediente);
							expedientePago.setItem(item++);
							expedientePago.setNumeroRecibo((String) ((TextField) tbPagos.getItem(id).getItemProperty("numRecibo").getValue()).getValue());
							expedientePagos.add(expedientePago);
						}

						List<ExpedienteRequisito> expedienteRequisitos = new ArrayList<ExpedienteRequisito>();
						ExpedienteRequisito expedienteRequisito = null;
						Integer correlativo = expedienteRequisitoService.obtenerUltimoCorrelativo();
						logger.info("Ultimo Correlativo Requisot" + correlativo);
						for (Object id : tbRequisitos.getItemIds()) {
							expedienteRequisito = new ExpedienteRequisito();
							expedienteRequisito.setCodigoTipoTramite(tipoTramite.getCodigoTipoTramite());
							expedienteRequisito.setPresenta((Boolean) ((CheckBox) tbRequisitos.getItem(id).getItemProperty("chk").getValue()).getValue());
							expedienteRequisito.setCorrelativo(correlativo++);
							expedienteRequisito.setExpediente(expediente);
							expedienteRequisito.setFedatado(Boolean.parseBoolean(tbRequisitos.getItem(id).getItemProperty("fedatear").getValue().toString()));
							expedienteRequisitos.add(expedienteRequisito);
						}
						expediente.setExpedientesResquisito(expedienteRequisitos);
						expediente.setExpedientesPagos(expedientePagos);
						documentoInterno.setCodigodocumento(codDocumentoInterno);
						// logger.info("Codigo Documento Interno" +
						// codDocumentoInterno);
						documentoInterno.setAsunto(txtNombreTramite.getValue().toString().toUpperCase());
						documentoInterno.setDependencia(dependenciaService.obtener(dependenciaService.getCodigoMesaPartes()));
						documentoInterno.setAñoDocumento(this.txtAnio.getValue().toString());
						documentoInterno.setCodigoTipoDocumento("33");
						Date date = new Date();
						Timestamp fechaHora = new Timestamp(date.getTime());
						documentoInterno.setFechadocumento(fechaHora);
						Long numDocumento = documentoInternoService.obtenerNumDocumento(dependenciaService.obtener(dependenciaService.getCodigoMesaPartes()));
						documentoInterno.setNumerodocumento(SigeUtil.completarCeros(numDocumento.toString(), 5, 1));
						documentoInterno.setNumerofolios(Short.parseShort(txtNumFolio.getValue().toString()));
						documentoInterno.setSiglasdocumento("");
						documentoInterno.setCopiaArchivo(Boolean.FALSE);
						ExpedienteMovimiento expedienteMovimiento = new ExpedienteMovimiento();
						expedienteMovimiento.setDependencia(dependenciaObtenida);
						expedienteMovimiento.setDocumentoInterno(documentoInterno);
						expedienteMovimiento.setOrden(1);
						expedienteMovimiento.setCorrelativo(expedienteMovimientoService.obtenerCorrelativoPorExpediente(expediente));
						//expedienteMovimiento.set
						expedienteMovimiento.setEscopia('0');
						expedienteMovimiento.setExpediente(expediente);
						expedienteMovimientos.add(expedienteMovimiento);
						expediente.setExpedientesMovimiento(expedienteMovimientos);
						expediente.setFechaExpediente(new Timestamp(new Date().getTime()));
						// Documento Interno Referencia
						DocumentoInternoReferen docInternoReferen = new DocumentoInternoReferen();
						docInternoReferen.setCodigoDocumento(documentoInterno.getCodigodocumento());
						docInternoReferen.setCodigoDocumentoReferencia(documentoInterno.getCodigodocumento());
						docInternoReferen.setOrden(new Short("1"));
						// Documento Interno Destino
						documentoInternoDestino.setDocumentoInterno(documentoInterno);
						documentoInternoDestino.setDependencia(dependenciaObtenida);
						documentoInternoDestino.setOrden(new Short("1"));
						documentoInternoDestino.setTipoMovimiento('0');
						expedienteService.registrarExpediente(expediente,expedienteMovimiento, expedienteRequisitos,expedientePagos, documentoInterno,documentoInternoDestino, docInternoReferen);
						// txtExpediente.setValue(expediente.getCodigo());
						// fecRecepcion.setValue(expediente.getFechaExpediente());

						Notificacion
								.show(new Notificacion(
										"Se registró correctamente el expediente <br/>"
												+ "<table>"
												+ "<tr><td><b>Cód.Exp / Hora: </b></td><td>"
												+ expediente.getCodigo()
												+ "  "
												+ expediente.getFechaExpediente()
												+ "</td></tr>"
												+ "<tr><td><b>Oficina Destino: </b></td><td>"
												+ dependenciaObtenida.getNombre()
												+ "</td></tr>" + "</table>",
										Constantes.MENSAJE.TYPE_SUCCES));
						resetarFormulario();
						limpiarFormulario();
						btnImprimir.setEnabled(true);
						tbObservacionesTupa.setEnabled(true);
						tbPersonaTupa.setEnabled(true);
					} else {
						Notificacion.show(new Notificacion("Debe llenar todos los campos",Constantes.MENSAJE.TYPE_ERROR));
					}
				}
			} else {
				if (!confirmacion) {
					Window ventana = SigeUtil.generarBuscador(new Window(),"INGRESAR MOTIVO", "360", "260");
					ventana.setContent(new PanelMotivoObservacion(ventana,this, Constantes.TIPO_OPERACION.MODIFICACION,(expedienteColumnLenghts.get("motivomodifica"))));
					UI.getCurrent().addWindow(ventana);
					return;
				}
				int i = 0;
				for (Object id : tbRequisitos.getItemIds()) {
					lsExpedienteRequisitos.get(i).setPresenta((Boolean) ((CheckBox) tbRequisitos.getItem(id).getItemProperty("chk").getValue()).getValue());
					i++;
				}
				for (ExpedienteRequisito expedienteReq : lsExpedienteRequisitos) {
					expedienteReq.setMotivoModificacion(expedienteObtenido.getMotivoModificacion());
					expedienteRequisitoService.actualizar(expedienteReq);
				}

				int j = 0;
				for (Object id : tbPagos.getItemIds()) {
					lsExpedientePagos.get(j).setPresenta((Boolean) ((CheckBox) tbPagos.getItem(id).getItemProperty("chk").getValue()).getValue());
					lsExpedientePagos.get(j).setNumeroRecibo((String) ((TextField) tbPagos.getItem(id).getItemProperty("numRecibo").getValue()).getValue());
					j++;
				}
				for (ExpedientePago expedientePago : lsExpedientePagos) {
					expedientePago.setMotivoModificacion(expedienteObtenido.getMotivoModificacion());
					expedientePagoService.actualizar(expedientePago);
				}
				expedienteObtenido.setArchivoProvicional(this.chkArchivoProv.getValue());
				expedienteService.actualizar(expedienteObtenido);
				Notificacion.show(new Notificacion("Se Actualizó el expediente",Constantes.MENSAJE.TYPE_SUCCES));
				resetarFormulario();
				limpiarFormulario();
				btnImprimir.setEnabled(true);
			}
		}
	}

	public Boolean validarCamposPersonaNatural() {
		if (!txtCodigoSolicitante.getValue().toString().equals("")&& !txtNombreSolicitante.getValue().toString().equals("")&& !txtDireccionSolicitante.getValue().toString().equals("")) {
			return true;
		} else {
			return false;
		}
	}

	public Boolean validarPersonaObligatoriaTUPA(Persona solicitanteTUPA) {
		if (persona.getCodigoTipoPersona().equals('1')) {
			return SigeUtil.validarCamposTexto(txtCodigoSolicitante,
					txtNombreSolicitante, txtDireccionSolicitante);
		} else {
			return SigeUtil.validarCamposTexto(txtCodigoSolicitante,
					txtNombreSolicitante, txtDireccionSolicitante,
					txtCodigoRepresentante, txtNombreRepresentante,
					txtDireccionRepresentante);
		}
	}

	public Boolean validarPersonaObligatoriaNoTUPA(Persona solicitanteNoTUPA) {
		if (persona.getCodigoTipoPersona().equals('1')) {
			return SigeUtil.validarCamposTexto(txtCodigoSolicitanteNT,
					txtNombreSolicitanteNT, txtDireccionSolicitanteNT);
		} else {
			return SigeUtil.validarCamposTexto(txtCodigoSolicitanteNT,
					txtNombreSolicitanteNT, txtDireccionSolicitanteNT,
					txtRepresentanteNT, txtNombreRepresentanteNT,
					txtDireccionRepresentanteNT);
		}
	}

	// public Boolean validarCampos

	public Boolean validarCamposPersonaJuridica() {
		if (!txtCodigoSolicitante.getValue().toString().equals("")
				&& !txtNombreSolicitante.getValue().toString().equals("")
				&& !txtDireccionSolicitante.getValue().toString().equals("")
				&& !txtCodigoRepresentante.getValue().toString().equals("")
				&& !txtNombreRepresentante.getValue().toString().equals("")
				&& !txtDireccionRepresentante.getValue().toString().equals("")) {
			return true;
		} else {
			return false;
		}
	}

	public TipoTramite obtenerTipoTramite() {

		return tipoTramiteService.obtener((Long) cbxProcedimiento.getValue());
	}

	public TipoDocumento obtenerTipoDocumento() {

		return tipoDocumentoService.obtener((Long) cbxTipoDocumento.getValue());
	}

	public String obtenerDireccion(Persona persona) {
		String direccion = persona.getVia().getNombre() + " "
				+ persona.getDireccionNumero();
		if (persona.getDireccionManzana() != null
				&& persona.getDireccionManzana().length() > 0) {
			direccion += " MZ " + persona.getDireccionManzana();
		}
		if (persona.getDireccionLote() != null
				&& persona.getDireccionLote().length() > 0) {
			direccion += " Lote " + persona.getDireccionLote();
		}
		if (persona.getDireccionPiso() != null
				&& persona.getDireccionPiso().length() > 0) {
			direccion += " Piso " + persona.getDireccionPiso();
		}
		if (persona.getDireccionDepartamento() != null
				&& persona.getDireccionDepartamento().length() > 0) {
			direccion += " Dep " + persona.getDireccionDepartamento();
		}
		direccion += " -  " + persona.getLugar().getNombre();
		return direccion;
	}

	public void obtenerPersona(Long idPersona) {
		persona = personaService.obtener(idPersona);
		if (this.codBusqueda == 1) {
			this.solicitanteTupa = personaService.obtener(idPersona);
			txtCodigoSolicitante.setValue(solicitanteTupa.getId() + "");
			txtNombreSolicitante.setValue(solicitanteTupa.getNombreCompleto());
			txtDireccionSolicitante.setValue(obtenerDireccion(solicitanteTupa));

		} else if (this.codBusqueda == 2) {
			this.representanteLegalTupa = personaService.obtener(idPersona);
			txtCodigoRepresentante
					.setValue(representanteLegalTupa.getId() + "");
			txtNombreRepresentante.setValue(representanteLegalTupa
					.getNombreCompleto());
			txtDireccionRepresentante
					.setValue(obtenerDireccion(representanteLegalTupa));

		} else if (this.codBusqueda == 3) {
			this.solicitanteNoTupa = personaService.obtener(idPersona);
			txtCodigoSolicitanteNT.setValue(solicitanteNoTupa.getId() + "");
			txtNombreSolicitanteNT.setValue(solicitanteNoTupa
					.getNombreCompleto());
			txtDireccionSolicitanteNT
					.setValue(obtenerDireccion(solicitanteNoTupa));
			// if (this.solicitanteNoTupa.getCodigoTipoPersona().equals('1')) {
			// this.personaObligatoria = SigeUtil.validarCamposTexto(
			// txtCodigoSolicitanteNT, txtNombreSolicitanteNT,
			// txtDireccionSolicitanteNT);
			// } else {
			// this.personaObligatoria = SigeUtil.validarCamposTexto(
			// txtCodigoSolicitanteNT, txtNombreSolicitanteNT,
			// txtDireccionSolicitanteNT, txtRepresentanteNT,
			// txtNombreRepresentanteNT, txtDireccionRepresentanteNT);
			// }

		} else if (this.codBusqueda == 4) {
			this.representanteLegalNoTupa = personaService.obtener(idPersona);
			txtRepresentanteNT.setValue(representanteLegalNoTupa.getId() + "");
			txtNombreRepresentanteNT.setValue(representanteLegalNoTupa
					.getNombreCompleto());

			txtDireccionRepresentanteNT
					.setValue(obtenerDireccion(representanteLegalNoTupa));
		}
	}

	public void obtenerDependencia(Long idDependencia) {
		dependenciaObtenida = new Dependencia();
		dependenciaObtenida = dependenciaService.obtener(idDependencia);
		txtCodigoOficina.setValue(dependenciaObtenida.getId() + "");
		txtOficina.setValue(dependenciaObtenida.getNombre());
	}

	public void obtenerDetalleTramite(String codTramite) {
		tipoTramite = tipoTramiteService.obtenerTipoTramitePorCod(codTramite);
		txtCodigoTramite.setValue(tipoTramite.getCodigoTipoTramite());
		txtNombreTramite.setValue(tipoTramite.getNombre());
		txtNombreTramite.setDescription(tipoTramite.getNombre());
		txtDiasAtencion.setValue(tipoTramite.getTipoAten() + "");
		this.lsRequisitosTupa = requisitosTupaService
				.obtenerRequisitosPorTramite(codTramite);
		getAllRequisitos();
		this.lsPagosTupas = pagosTupaService.obtenerPagosPorTramite(codTramite);
		getAllPagos();
		Tupa tupa = tupaService.obtenerTupaPorTramite(codTramite);
		Integer codDependencia = tupa.getCodigoDependencia();
		// txtCodigoOficina.setValue(codDependencia+"");
		dependenciaObtenida = dependenciaService.obtener(Long
				.parseLong(codDependencia.toString()));
		txtOficina.setValue(dependenciaObtenida.getNombre());
		txtCodigoOficina.setValue(dependenciaObtenida.getId() + "");
		chkArchivoProv.setValue(false);
	}

	@SuppressWarnings("unchecked")
	public void getAllPagos() {
		BigDecimal costoTotal = new BigDecimal(0);
		int contador = 1;
		IndexedContainer contenedorPagos = (IndexedContainer) tbPagos
				.getContainerDataSource();
		contenedorPagos.removeAllItems();
		for (int i = 0; i < lsPagosTupas.size(); i++) {
			Item item = contenedorPagos.addItem(i);
			TextField numRecibo = new TextField();
			numRecibo.setMaxLength(expedientePagosColumnLenghts
					.get("numerorecibo"));
			item.getItemProperty("id").setValue(lsPagosTupas.get(i).getId());
			item.getItemProperty("item").setValue(contador++);
			item.getItemProperty("chk").setValue(addListener(new CheckBox()));
			item.getItemProperty("chk").setValue(new CheckBox());
			item.getItemProperty("nombre").setValue(
					lsPagosTupas.get(i).getDescripcion());
			costoTotal = costoTotal.add(lsPagosTupas.get(i).getCosto());
			item.getItemProperty("costo").setValue(
					lsPagosTupas.get(i).getCosto().floatValue());
			item.getItemProperty("numRecibo").setValue(
					validarNumeroRecibo(
							numRecibo,
							Boolean.parseBoolean(item.getItemProperty("chk")
									.getValue().toString())));
		}
		txtDerPagos.setValue(costoTotal + "");

	}

	@SuppressWarnings("unchecked")
	public void getAllRequisitos() {
		int contador = 1;
		IndexedContainer contenedor = (IndexedContainer) tbRequisitos
				.getContainerDataSource();
		contenedor.removeAllItems();
		for (int i = 0; i < lsRequisitosTupa.size(); i++) {
			Item item = contenedor.addItem(i);
			item.getItemProperty("id")
					.setValue(lsRequisitosTupa.get(i).getId());
			item.getItemProperty("item").setValue(contador++);
			// item.getItemProperty("chk").setValue(addListener(new
			// CheckBox()));
			item.getItemProperty("chk").setValue(new CheckBox());
			item.getItemProperty("requisito").setValue(
					lsRequisitosTupa.get(i).getDescripcion());
			item.getItemProperty("fedatear").setValue(
					lsRequisitosTupa.get(i).getFedatear());
		}
	}

	public TextField validarNumeroRecibo(final TextField txt, final Boolean chk) {
		if (chk && txt.getValue().toString().trim().equals("")) {
			numCompleto = false;
		}
		txt.setImmediate(true);
		txt.addValueChangeListener(new ValueChangeListener() {

			@Override
			public void valueChange(ValueChangeEvent event) {
				// TODO Auto-generated method stub
				if (chk && txt.getValue().toString().trim().equals("")) {
					numCompleto = false;
				} else {
					numCompleto = true;
				}
			}
		});
		return txt;
	}

	public CheckBox addListener(CheckBox chk) {
		chk.setImmediate(true);
		chk.addValueChangeListener(new ValueChangeListener() {

			private static final long serialVersionUID = 1L;

			@Override
			public void valueChange(ValueChangeEvent event) {
				// TODO Auto-generated method stub
				Boolean chkRequisitos = validarTodosChk(tbRequisitos);
				Boolean chkPagos = validarTodosChk(tbPagos);
				if (chkRequisitos && chkPagos) {

					chkArchivoProv.setValue(Boolean.FALSE);
				} else {

					chkArchivoProv.setValue(Boolean.TRUE);
				}
			}
		});
		return chk;
	}

	public Boolean validarTodosChk(Table tabla) {
		for (Object id : tabla.getItemIds()) {
			Item item = tabla.getItem(id);

			Boolean chk = ((CheckBox) item.getItemProperty("chk").getValue())
					.getValue();
			logger.info(chk);
			if (chk.equals(Boolean.FALSE)) {

				return false;
			}
		}

		return true;
	}

	@SuppressWarnings("unchecked")
	public void getExpediente(String codExpediente) {
		chkArchivoProv.setEnabled(true);
		btnEliminar.setEnabled(true);
		tbObservacionesTupa.setEnabled(false);
		tbPersonaTupa.setEnabled(false);
		solicitanteTupa = new Persona();
		representanteLegalTupa = new Persona();
		solicitanteNoTupa = new Persona();

		representanteLegalNoTupa = new Persona();
		lsExpedientePagos = new ArrayList<ExpedientePago>();
		lsExpedienteRequisitos = new ArrayList<ExpedienteRequisito>();
		expedienteObtenido = expedienteService.obtenerExpediente(codExpediente);
		this.txtExpediente.setValue(expedienteObtenido.getCodigo());
		this.fecRecepcion.setValue(expedienteObtenido.getFechaExpediente());
		txtAnio.setValue(expedienteObtenido.getAnio());
		txtNumFolio.setValue(expedienteObtenido.getNumeroFolios() + "");
		ExpedienteMovimiento expedienteMovimiento = expedienteMovimientoService
				.obtenerExpedienteMovimiento(codExpediente);
		dependenciaObtenida = dependenciaService.obtener(expedienteMovimiento
				.getDependencia().getId());
		tipoTramite = tipoTramiteService
				.obtenerTipoTramitePorCod(expedienteObtenido.getTipoTramite()
						.getCodigoTipoTramite());
		txtCodigoOficina.setValue(dependenciaObtenida.getId() + "");
		txtOficina.setValue(dependenciaObtenida.getNombre());
		String tupa = tipoTramite.getTupa();
		if (tupa.equalsIgnoreCase("T")) {
			cbxTipoExpediente.setValue(0);
			txtCodigoTramite.setValue(tipoTramite.getCodigoTipoTramite());
			txtNombreTramite.setValue(tipoTramite.getNombre());
			txtDiasAtencion.setValue(tipoTramite.getTipoAten() + "");
			chkArchivoProv.setValue(Boolean.FALSE);
			solicitanteTupa = personaService.obtenerPersona(expedienteObtenido
					.getSolicitante().getCodigoPersona());
			txtCodigoSolicitante.setValue(solicitanteTupa.getCodigoPersona());
			txtNombreSolicitante.setValue(solicitanteTupa.getNombreCompleto());
			txtDireccionSolicitante.setValue(obtenerDireccion(solicitanteTupa));
			if (expedienteObtenido.getRepresentanteLegal() != null) {
				representanteLegalTupa = personaService
						.obtenerPersona(expedienteObtenido
								.getRepresentanteLegal().getCodigoPersona());

				txtCodigoRepresentante.setValue(representanteLegalTupa
						.getCodigoPersona());
				txtNombreRepresentante.setValue(representanteLegalTupa
						.getNombreCompleto());
				txtDireccionRepresentante
						.setValue(obtenerDireccion(representanteLegalTupa));
			}
			IndexedContainer contenedorRequisitos = (IndexedContainer) tbRequisitos
					.getContainerDataSource();
			contenedorRequisitos.removeAllItems();
			int contador = 1;
			lsExpedienteRequisitos = expedienteRequisitoService
					.obtenerExpedienteRequisito(codExpediente);
			for (int i = 0; i < lsExpedienteRequisitos.size(); i++) {

				List<RequisitoTupa> requisitosTupa = requisitosTupaService
						.obtenerRequisitosPorTramite(lsExpedienteRequisitos
								.get(i).getCodigoTipoTramite());
				CheckBox chk = new CheckBox();
				chk.setValue(lsExpedienteRequisitos.get(i).getPresenta()
						.booleanValue());
				Item item = contenedorRequisitos.addItem(i);
				item.getItemProperty("id").setValue(
						lsExpedienteRequisitos.get(i).getId());
				item.getItemProperty("item").setValue(contador++);
				// item.getItemProperty("chk").setValue(addListener(chk));
				item.getItemProperty("chk").setValue(chk);
				item.getItemProperty("requisito").setValue(
						requisitosTupa.get(i).getDescripcion());
				item.getItemProperty("fedatear").setValue(
						requisitosTupa.get(i).getFedatear());
			}

			lsExpedientePagos = expedientePagoService
					.obtenerExpedientesPago(codExpediente);
			IndexedContainer contenedorPagos = (IndexedContainer) tbPagos
					.getContainerDataSource();
			contenedorPagos.removeAllItems();
			int contadorP = 1;
			BigDecimal costoTotal = new BigDecimal(0);
			for (int i = 0; i < lsExpedientePagos.size(); i++) {
				List<PagosTupa> pagosTupa = pagosTupaService
						.obtenerPagosPorTramite(lsExpedientePagos.get(i)
								.getCodigoTipoTramite());
				CheckBox chk = new CheckBox();
				chk.setValue(lsExpedientePagos.get(i).getPresenta());
				TextField numRecibo = new TextField();
				numRecibo.setMaxLength(expedientePagosColumnLenghts
						.get("numerorecibo"));
				numRecibo.setValue(lsExpedientePagos.get(i).getNumeroRecibo());
				Item item = contenedorPagos.addItem(i);
				item.getItemProperty("id").setValue(
						lsExpedientePagos.get(i).getId());
				item.getItemProperty("item").setValue(contadorP++);
				// item.getItemProperty("chk").setValue(addListener(chk));
				item.getItemProperty("chk").setValue(chk);
				item.getItemProperty("nombre").setValue(
						pagosTupa.get(i).getDescripcion());
				item.getItemProperty("costo").setValue(
						pagosTupa.get(i).getCosto().floatValue());
				item.getItemProperty("numRecibo").setValue(
						validarNumeroRecibo(
								numRecibo,
								Boolean.parseBoolean(item
										.getItemProperty("chk").getValue()
										.toString())));
				costoTotal = costoTotal.add(pagosTupa.get(i).getCosto());
				this.txtDerPagos.setValue(costoTotal + "");

			}
		} else {
			cbxTipoExpediente.setValue(1);
			cbxTipoDocumento.setValue(expedienteObtenido.getTipoDocumento()
					.getCodigoTipoDocumento());
			cbxProcedimiento.setValue(expedienteObtenido.getTipoTramite()
					.getCodigoTipoTramite());
			txtNumeroDoc.setValue(expedienteObtenido.getNumeroDocumento());
			txtAGlosa.setValue(expedienteObtenido.getAsunto());
			txtAObservacion.setValue(expedienteObtenido.getObservaciones());
			solicitanteNoTupa = personaService
					.obtenerPersona(expedienteObtenido.getRepresentanteLegal()
							.getCodigoPersona());
			txtCodigoSolicitanteNT.setValue(solicitanteNoTupa.getId() + "");
			txtNombreSolicitanteNT.setValue(solicitanteNoTupa
					.getNombreCompleto());

			txtDireccionSolicitanteNT
					.setValue(obtenerDireccion(solicitanteNoTupa));
			if (expedienteObtenido.getRepresentanteLegal() != null) {
				this.representanteLegalNoTupa = personaService
						.obtenerPersona(expedienteObtenido
								.getRepresentanteLegal().getCodigoPersona());
				txtRepresentanteNT.setValue(representanteLegalNoTupa.getId()
						+ "");
				txtNombreRepresentanteNT.setValue(representanteLegalNoTupa
						.getNombreCompleto());
				txtDireccionRepresentanteNT
						.setValue(obtenerDireccion(representanteLegalNoTupa));
			}
			expediente = expedienteObtenido;

		}

		this.txtCodigoTramite.setEnabled(false);
		this.txtNumFolio.setEnabled(false);
		this.txtCodigoSolicitante.setEnabled(false);
		this.txtNombreSolicitante.setEnabled(false);
		this.txtDireccionSolicitante.setEnabled(false);
		this.txtCodigoRepresentante.setEnabled(false);
		this.txtNombreRepresentante.setEnabled(false);
		this.txtDireccionRepresentante.setEnabled(false);
		this.btnBuscarPersonaSolicitante.setEnabled(false);
		this.btnAgregarSolicitante.setEnabled(false);
		this.btnAgregarRepresentanteLegal.setEnabled(false);
		this.btnBuscarRepresentanteLegal.setEnabled(false);
		this.txtNombreSolicitanteNT.setEnabled(false);
		this.txtCodigoSolicitanteNT.setEnabled(false);
		this.txtDireccionSolicitanteNT.setEnabled(false);
		this.txtRepresentanteNT.setEnabled(false);
		this.txtNombreRepresentanteNT.setEnabled(false);
		this.txtDireccionRepresentanteNT.setEnabled(false);
		this.btnAgregarRepresentanteNT.setEnabled(false);
		this.btnAgregarSolicitanteNT.setEnabled(false);
		this.btnBuscarRepresentanteNT.setEnabled(false);
		this.btnBuscarSolicitanteNT.setEnabled(false);
		this.accordion_1.setEnabled(true);
		this.btnGuardar.setCaption("Actualizar");
		this.btnGuardar.setEnabled(true);
		this.btnCancelar.setEnabled(true);
		this.btnNuevo.setEnabled(false);
		this.txtAObservacionesTUPA.setEnabled(false);
		this.btnImprimir.setEnabled(true);
		this.isNuevo = false;
		expediente = expedienteObtenido;
		// this.numCompleto = true;
	}

	@SuppressWarnings("unchecked")
	public void obtenerMovimientosDelExpediente() {
		Long codExpediente = Long.parseLong(txtCodigoExpedienteBuscar
				.getValue().toString());
		String anioExpediente = this.txtAnioExpedienteMov.getValue().toString();
		String codigoExpediente = anioExpediente
				+ SigeUtil.completarCeros(codExpediente.toString(), 8, 1);
		List<ExpedienteMovimiento> movimientos = expedienteMovimientoService
				.obtenerTodosMovimientosExpediente(codigoExpediente);
		if (movimientos.size() == 0) {
			Notificacion.show(new Notificacion(
					"Lo sentimos, no se encontraron datos",
					Constantes.MENSAJE.TYPE_WARNING));
		} else {
			IndexedContainer contenedorMovimientos = (IndexedContainer) tbMovimientoExpedientes
					.getContainerDataSource();
			contenedorMovimientos.removeAllItems();
			Long nroItem = 1L;
			for (int i = 0; i < movimientos.size(); i++) {
				Item item = contenedorMovimientos.addItem(i);
				DocumentoInternoDestino docDestino = documentoInternoDestinoService
						.obtenerDocInternoDestinoPorDocInterno(movimientos
								.get(i).getDocumentoInterno()
								.getCodigodocumento());

				item.getItemProperty("id").setValue(movimientos.get(i).getId());
				item.getItemProperty("item").setValue(nroItem++);
				item.getItemProperty("destino").setValue(
						docDestino.getDependencia().getNombre());
				item.getItemProperty("fechaenvio").setValue(
						SigeUtil.obtenerFormatoFecha(movimientos.get(i)
								.getDocumentoInterno().getFechadocumento()));
				if (docDestino.getFechaRecepcion() != null) {
					item.getItemProperty("fecharecepcion").setValue(
							SigeUtil.obtenerFormatoFecha(docDestino
									.getFechaRecepcion()));
				} else {
					item.getItemProperty("fecharecepcion").setValue("");
				}
				ExpedienteMovimiento movimientoRespuesta = expedienteMovimientoService
						.obtenerMovimientoPorCorrelativo(movimientos.get(i)
								.getExpediente(), movimientos.get(i)
								.getCorrelativo() + 1);
				if (movimientoRespuesta != null) {
					DocumentoInterno docInternoRespuesta = movimientoRespuesta
							.getDocumentoInterno();
					DocumentoInternoDestino docInternodestinoRespuesta = documentoInternoDestinoService
							.obtenerDocInternoDestinoPorDocInterno(docInternoRespuesta
									.getCodigodocumento());
					if (docDestino.getTipoMovimiento().equals('1')
							|| docDestino.getTipoMovimiento().equals('2')) {
						item.getItemProperty("fechaRespuesta")
								.setValue(
										SigeUtil.obtenerFormatoFecha(docInternoRespuesta
												.getFechadocumento()));
					}
				} else {
					item.getItemProperty("fechaRespuesta").setValue(" ");
				}
				// if (i < movimientos.size() - 1) {
				// DocumentoInternoDestino docDestinoRespuesta =
				// documentoInternoDestinoService
				// .obtenerDocInternoDestinoPorDocInterno(movimientos
				// .get(i + 1).getDocumentoInterno()
				// .getCodigodocumento());
				// if (docDestino.getTipoMovimiento().equals('1')
				// || docDestino.getTipoMovimiento().equals('2')) {
				// item.getItemProperty("fechaRespuesta").setValue(
				// SigeUtil.obtenerFormatoFecha(movimientos.get(i)
				// .getDocumentoInterno()
				// .getFechaCreacion()));
				// } else {
				// item.getItemProperty("fechaRespuesta").setValue(" ");
				// }
				// }
			}
		}
	}

	public void mostrarMensajeExitoArchivar() {
		Notificacion.show(new Notificacion("Se archivo el expediente "
				+ " con éxito", Constantes.MENSAJE.TYPE_SUCCES));
		resetarFormulario();
		limpiarFormulario();
	}

	public void resetarFormulario() {
		this.txtCodigoTramite.setEnabled(true);
		this.txtNumFolio.setEnabled(true);
		this.txtCodigoSolicitante.setEnabled(true);
		this.txtNombreSolicitante.setEnabled(true);
		this.txtDireccionSolicitante.setEnabled(true);
		this.txtCodigoRepresentante.setEnabled(true);
		this.txtNombreRepresentante.setEnabled(true);
		this.txtDireccionRepresentante.setEnabled(true);
		this.btnBuscarPersonaSolicitante.setEnabled(true);
		this.btnAgregarSolicitante.setEnabled(true);
		this.btnAgregarRepresentanteLegal.setEnabled(true);
		this.btnBuscarRepresentanteLegal.setEnabled(true);
		this.txtNombreSolicitanteNT.setEnabled(true);
		this.txtCodigoSolicitanteNT.setEnabled(true);
		this.txtDireccionSolicitanteNT.setEnabled(true);
		this.txtRepresentanteNT.setEnabled(true);
		this.txtNombreRepresentanteNT.setEnabled(true);
		this.txtDireccionRepresentanteNT.setEnabled(true);
		this.btnAgregarRepresentanteNT.setEnabled(true);
		this.btnAgregarSolicitanteNT.setEnabled(true);
		this.btnBuscarRepresentanteNT.setEnabled(true);
		this.btnBuscarSolicitanteNT.setEnabled(true);
		this.txtNombreRepresentante.setEnabled(false);
		this.txtDireccionRepresentante.setEnabled(false);
		this.txtNombreSolicitante.setEnabled(false);
		this.txtDireccionSolicitante.setEnabled(false);
		this.txtNombreRepresentanteNT.setEnabled(false);
		this.txtDireccionSolicitanteNT.setEnabled(false);
		this.txtNombreSolicitanteNT.setEnabled(false);
		this.txtDireccionRepresentanteNT.setEnabled(false);
		this.txtNumFolio.setEnabled(false);
		this.txtCodigoOficina.setEnabled(false);
		expedienteObtenido = null;
		btnCancelar.setEnabled(false);
		btnGuardar.setEnabled(false);
		btnEliminar.setEnabled(false);
		btnImprimir.setEnabled(false);
		btnNuevo.setEnabled(true);
		isNuevo = false;
		// accordion_1.setEnabled(mfalse);
		tbDetalleTramiteTupa.setEnabled(true);
		this.btnBuscarTramite.setEnabled(false);
		this.txtCodigoTramite.setEnabled(false);
		this.txtNombreTramite.setEnabled(false);
		this.chkArchivoProv.setEnabled(false);
		tbObservacionesTupa.setEnabled(false);
		tbPersonaTupa.setEnabled(false);
		cbxTipoExpediente.setValue(0);
		tabTramTuPA.setSelectedTab(tbDetalleTramiteTupa);
		tbMovimientoExpediente.setEnabled(true);
		cbxTipoExpediente.setEnabled(false);
		this.btnImprimir.setEnabled(false);
		if (cbxTipoExpediente.getValue().equals("0")) {
			this.txtCodigoTramite.focus();
		} else {
			cbxTipoDocumento.focus();
		}
		// personaObligatoria = Boolean.FALSE;
		numCompleto = Boolean.FALSE;
	}

	public void limpiarFormulario() {
		// txtAnioExpedienteMov.setValue("");
		txtCodigoExpedienteBuscar.setValue("");
		movimientoSeleccionado = false;
		txtExpediente.setValue("");
		txtNumFolio.setValue("0");
		txtOficina.setValue("");
		txtCodigoOficina.setValue("");
		txtCodigoTramite.setValue("");
		txtNombreTramite.setValue("");
		txtAObservacion.setValue("");
		txtAObservacionesTUPA.setValue("");

		IndexedContainer contenedor = (IndexedContainer) tbRequisitos
				.getContainerDataSource();
		contenedor.removeAllItems();
		IndexedContainer contenedorPagos = (IndexedContainer) tbPagos
				.getContainerDataSource();
		contenedorPagos.removeAllItems();
		IndexedContainer contenedorMovExpedientes = (IndexedContainer) tbMovimientoExpedientes
				.getContainerDataSource();
		contenedorMovExpedientes.removeAllItems();
		txtDiasAtencion.setValue("");
		txtDerPagos.setValue("");
		txtNombreSolicitante.setValue("");
		txtDireccionSolicitante.setValue("");
		txtNombreRepresentante.setValue("");
		txtDireccionRepresentante.setValue("");
		txtCodigoSolicitante.setValue("");
		txtCodigoRepresentante.setValue("");
		txtNumFolio.setValue("");
		txtAGlosa.setValue("");
		txtAObservacion.setValue("");
		fecRecepcion.setValue(null);
		txtDireccionRepresentanteNT.setValue("");
		txtNombreRepresentanteNT.setValue("");
		txtRepresentanteNT.setValue("");
		txtCodigoSolicitanteNT.setValue("");
		txtDireccionSolicitanteNT.setValue("");
		txtNombreSolicitanteNT.setValue("");
	}

	public void NuevoRegistro() {
		// expediente = obtenerCodigosCorrelativos();
		movimientoSeleccionado = false;
		solicitanteTupa = new Persona();
		representanteLegalTupa = new Persona();
		solicitanteNoTupa = new Persona();
		representanteLegalNoTupa = new Persona();
		expediente = new Expediente();
		documentoInterno = new DocumentoInterno();
		documentoInternoDestino = new DocumentoInternoDestino();
		// accordion_1.setEnabled(true);
		tbDetalleTramiteTupa.setEnabled(true);
		this.btnBuscarTramite.setEnabled(true);
		this.txtCodigoTramite.setEnabled(true);
		this.txtNombreTramite.setEnabled(true);
		this.chkArchivoProv.setEnabled(true);
		this.txtCodigoOficina.setEnabled(true);
		tbObservacionesTupa.setEnabled(true);
		tbPersonaTupa.setEnabled(true);
		tabTramTuPA.setSelectedTab(tbDetalleTramiteTupa);
		cbxTipoExpediente.setEnabled(true);
		txtNumFolio.setEnabled(true);
		isNuevo = true;
		this.btnCancelar.setVisible(permiso.getNuevo());
		this.btnCancelar.setEnabled(true);
		this.btnGuardar.setCaption("Guardar");
		this.btnGuardar.setVisible(permiso.getNuevo());
		this.btnGuardar.setEnabled(true);
		txtAObservacionesTUPA.setEnabled(true);
		txtNumFolio.setValue("");
		this.btnNuevo.setEnabled(false);
		this.btnImprimir.setEnabled(false);
		limpiarFormulario();
	}

	@AutoGenerated
	private AbsoluteLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");

		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");

		// panel_2
		panel_2 = buildPanel_2();
		mainLayout.addComponent(panel_2, "top:0.0px;left:20.0px;");

		// accordion_1
		accordion_1 = buildAccordion_1();
		mainLayout.addComponent(accordion_1, "top:100.0px;left:20.0px;");

		// btnNuevo
		btnNuevo = new Button();
		btnNuevo.setCaption("Nuevo");
		btnNuevo.setIcon(new ThemeResource("images/botones/new.png"));
		btnNuevo.setImmediate(true);
		btnNuevo.setDescription("Nuevo Registro");
		btnNuevo.setWidth("110px");
		btnNuevo.setHeight("-1px");
		mainLayout.addComponent(btnNuevo, "top:480.0px;left:21.0px;");

		// btnGuardar
		btnGuardar = new Button();
		btnGuardar.setCaption("Guardar");
		btnGuardar.setIcon(new ThemeResource("images/botones/save.png"));
		btnGuardar.setImmediate(true);
		btnGuardar.setDescription("Guardar Regstro");
		btnGuardar.setWidth("110px");
		btnGuardar.setHeight("-1px");
		mainLayout.addComponent(btnGuardar, "top:480.0px;left:141.0px;");

		// btnEliminar
		btnEliminar = new Button();
		btnEliminar.setCaption("Archivar");
		btnEliminar.setIcon(new ThemeResource("images/botones/archivar.png"));
		btnEliminar.setImmediate(true);
		btnEliminar.setDescription("Archivar Expediente");
		btnEliminar.setWidth("110px");
		btnEliminar.setHeight("-1px");
		mainLayout.addComponent(btnEliminar, "top:480.0px;left:260.0px;");

		// btnCancelar
		btnCancelar = new Button();
		btnCancelar.setCaption("Cancelar");
		btnCancelar.setIcon(new ThemeResource("images/botones/undo.png"));
		btnCancelar.setImmediate(true);
		btnCancelar.setDescription("Cancelar Cambios");
		btnCancelar.setWidth("110px");
		btnCancelar.setHeight("-1px");
		mainLayout.addComponent(btnCancelar, "top:480.0px;left:380.0px;");

		// btnImprimir
		btnImprimir = new Button();
		btnImprimir.setCaption("Imprimir Cargo");
		btnImprimir.setIcon(new ThemeResource("images/botones/print.png"));
		btnImprimir.setImmediate(true);
		btnImprimir.setDescription("Imprimir");
		btnImprimir.setWidth("120px");
		btnImprimir.setHeight("-1px");
		mainLayout.addComponent(btnImprimir, "top:480.0px;left:620.0px;");

		// btnBuscarExpediente
		btnBuscarExpediente = new Button();
		btnBuscarExpediente.setCaption("Buscar");
		btnBuscarExpediente
				.setIcon(new ThemeResource("images/botones/find.png"));
		btnBuscarExpediente.setImmediate(true);
		btnBuscarExpediente.setDescription("Buscar Expediente");
		btnBuscarExpediente.setWidth("110px");
		btnBuscarExpediente.setHeight("-1px");
		mainLayout.addComponent(btnBuscarExpediente,
				"top:480.0px;left:500.0px;");

		return mainLayout;
	}

	@AutoGenerated
	private Panel buildPanel_2() {
		// common part: create layout
		panel_2 = new Panel();
		panel_2.setImmediate(false);
		panel_2.setWidth("720px");
		panel_2.setHeight("100px");

		// absoluteLayout_2
		absoluteLayout_2 = buildAbsoluteLayout_2();
		panel_2.setContent(absoluteLayout_2);

		return panel_2;
	}

	@AutoGenerated
	private AbsoluteLayout buildAbsoluteLayout_2() {
		// common part: create layout
		absoluteLayout_2 = new AbsoluteLayout();
		absoluteLayout_2.setImmediate(false);
		absoluteLayout_2.setWidth("100.0%");
		absoluteLayout_2.setHeight("100.0%");

		// label_1
		label_1 = new Label();
		label_1.setImmediate(false);
		label_1.setWidth("-1px");
		label_1.setHeight("-1px");
		label_1.setValue("<b>A&ntilde;o:</b>");
		absoluteLayout_2.addComponent(label_1, "top:10.0px;left:10.0px;");

		// txtAnio
		txtAnio = new NumberField();
		txtAnio.setImmediate(false);
		txtAnio.setWidth("57px");
		txtAnio.setHeight("-1px");
		absoluteLayout_2.addComponent(txtAnio, "top:10.0px;left:39.0px;");

		// label_2
		label_2 = new Label();
		label_2.setImmediate(false);
		label_2.setWidth("-1px");
		label_2.setHeight("-1px");
		label_2.setValue("<b>Expediente: </b>");
		absoluteLayout_2.addComponent(label_2, "top:10.0px;left:139.0px;");

		// txtExpediente
		txtExpediente = new TextField();
		txtExpediente.setImmediate(false);
		txtExpediente.setWidth("94px");
		txtExpediente.setHeight("24px");
		absoluteLayout_2
				.addComponent(txtExpediente, "top:10.0px;left:208.0px;");

		// label_3
		label_3 = new Label();
		label_3.setImmediate(false);
		label_3.setWidth("-1px");
		label_3.setHeight("-1px");
		label_3.setValue("<b>Fec. Recepci&oacute;n:</b>");
		absoluteLayout_2.addComponent(label_3, "top:10.0px;left:330.0px;");

		// fecRecepcion
		fecRecepcion = new PopupDateField();
		fecRecepcion.setImmediate(false);
		fecRecepcion.setWidth("120px");
		fecRecepcion.setHeight("-1px");
		absoluteLayout_2.addComponent(fecRecepcion, "top:8.0px;left:421.0px;");

		// label_4
		label_4 = new Label();
		label_4.setImmediate(false);
		label_4.setWidth("-1px");
		label_4.setHeight("-1px");
		label_4.setValue("<b>N° Folios:</b>");
		absoluteLayout_2.addComponent(label_4, "top:10.0px;left:579.0px;");

		// txtNumFolio
		txtNumFolio = new NumberField();
		txtNumFolio.setImmediate(false);
		txtNumFolio.setWidth("70px");
		txtNumFolio.setHeight("-1px");
		absoluteLayout_2.addComponent(txtNumFolio, "top:8.0px;left:639.0px;");

		// label_5
		label_5 = new Label();
		label_5.setImmediate(false);
		label_5.setWidth("-1px");
		label_5.setHeight("-1px");
		label_5.setValue("<b>Tipo de Expediente:</b>");
		absoluteLayout_2.addComponent(label_5, "top:41.0px;left:10.0px;");

		// cbxTipoExpediente
		cbxTipoExpediente = new ComboBox();
		cbxTipoExpediente.setImmediate(false);
		cbxTipoExpediente.setWidth("-1px");
		cbxTipoExpediente.setHeight("24px");
		absoluteLayout_2.addComponent(cbxTipoExpediente,
				"top:59.0px;left:10.0px;");

		// label_6
		label_6 = new Label();
		label_6.setImmediate(false);
		label_6.setWidth("-1px");
		label_6.setHeight("-1px");
		label_6.setValue("<b>Oficina de Destino: </b>");
		absoluteLayout_2.addComponent(label_6, "top:41.0px;left:259.0px;");

		// txtCodigoOficina
		txtCodigoOficina = new NumberField();
		txtCodigoOficina.setImmediate(false);
		txtCodigoOficina.setWidth("50px");
		txtCodigoOficina.setHeight("-1px");
		absoluteLayout_2.addComponent(txtCodigoOficina,
				"top:58.0px;left:259.0px;");

		// txtOficina
		txtOficina = new TextField();
		txtOficina.setImmediate(false);
		txtOficina.setWidth("330px");
		txtOficina.setHeight("-1px");
		absoluteLayout_2.addComponent(txtOficina, "top:58.0px;left:309.0px;");

		// btnBuscarOficinaDestino
		btnBuscarOficinaDestino = new Boton();
		btnBuscarOficinaDestino.setIcon(new ThemeResource(
				"images/botones/find.png"));
		btnBuscarOficinaDestino.setImmediate(false);
		btnBuscarOficinaDestino.setDescription("Buscar Oficina de Destino");
		btnBuscarOficinaDestino.setWidth("30px");
		btnBuscarOficinaDestino.setHeight("24px");
		absoluteLayout_2.addComponent(btnBuscarOficinaDestino,
				"top:58.0px;left:639.0px;");

		return absoluteLayout_2;
	}

	@AutoGenerated
	private Accordion buildAccordion_1() {
		// common part: create layout
		accordion_1 = new Accordion();
		accordion_1.setImmediate(true);
		accordion_1.setWidth("720px");
		accordion_1.setHeight("370px");

		// lytTupa
		lytTupa = buildLytTupa();
		accordion_1.addTab(lytTupa, "Tramite TUPA", null);

		// lytNoTUPA
		lytNoTUPA = buildLytNoTUPA();
		accordion_1.addTab(lytNoTUPA, "Tramite No TUPA", null);

		return accordion_1;
	}

	@AutoGenerated
	private AbsoluteLayout buildLytTupa() {
		// common part: create layout
		lytTupa = new AbsoluteLayout();
		lytTupa.setImmediate(false);
		lytTupa.setWidth("100.0%");
		lytTupa.setHeight("100.0%");

		// tabTramTuPA
		tabTramTuPA = buildTabTramTuPA();
		lytTupa.addComponent(tabTramTuPA, "top:19.0px;left:10.0px;");

		return lytTupa;
	}

	@AutoGenerated
	private TabSheet buildTabTramTuPA() {
		// common part: create layout
		tabTramTuPA = new TabSheet();
		tabTramTuPA.setImmediate(true);
		tabTramTuPA.setWidth("699px");
		tabTramTuPA.setHeight("300px");

		// lytDetalleTramite
		lytDetalleTramite = buildLytDetalleTramite();
		tabTramTuPA.addTab(lytDetalleTramite, "Detalle Trámite", null);

		// lytObservaciones
		lytObservaciones = buildLytObservaciones();
		tabTramTuPA.addTab(lytObservaciones, "Observaciones", null);

		// lytPersonaRealizaTramite
		lytPersonaRealizaTramite = buildLytPersonaRealizaTramite();
		tabTramTuPA.addTab(lytPersonaRealizaTramite,
				"Persona que Realiza Trámite", null);

		// lytMovimientoExpedientes
		lytMovimientoExpedientes = buildLytMovimientoExpedientes();
		tabTramTuPA.addTab(lytMovimientoExpedientes,
				"Movimiento de Expedientes", null);

		return tabTramTuPA;
	}

	@AutoGenerated
	private AbsoluteLayout buildLytDetalleTramite() {
		// common part: create layout
		lytDetalleTramite = new AbsoluteLayout();
		lytDetalleTramite.setImmediate(false);
		lytDetalleTramite.setWidth("100.0%");
		lytDetalleTramite.setHeight("100.0%");

		// btnBuscarTramite
		btnBuscarTramite = new Boton();
		btnBuscarTramite.setIcon(new ThemeResource("images/botones/find.png"));
		btnBuscarTramite.setImmediate(false);
		btnBuscarTramite.setDescription("Buscar Tr&aacute;mite");
		btnBuscarTramite.setWidth("30px");
		btnBuscarTramite.setHeight("25px");
		lytDetalleTramite.addComponent(btnBuscarTramite,
				"top:8.0px;left:20.0px;");

		// txtCodigoTramite
		txtCodigoTramite = new NumberField();
		txtCodigoTramite.setImmediate(false);
		txtCodigoTramite.setWidth("80px");
		txtCodigoTramite.setHeight("-1px");
		lytDetalleTramite.addComponent(txtCodigoTramite,
				"top:5.0px;left:48.0px;");

		// txtNombreTramite
		txtNombreTramite = new TextField();
		txtNombreTramite.setImmediate(false);
		txtNombreTramite.setWidth("540px");
		txtNombreTramite.setHeight("-1px");
		lytDetalleTramite.addComponent(txtNombreTramite,
				"top:5.0px;left:128.0px;");

		// tbRequisitos
		tbRequisitos = new Table();
		tbRequisitos.setImmediate(false);
		tbRequisitos.setWidth("580px");
		tbRequisitos.setHeight("108px");
		lytDetalleTramite.addComponent(tbRequisitos, "top:40.0px;left:8.0px;");

		// tbPagos
		tbPagos = new Table();
		tbPagos.setImmediate(false);
		tbPagos.setWidth("580px");
		tbPagos.setHeight("80px");
		lytDetalleTramite.addComponent(tbPagos, "top:158.0px;left:8.0px;");

		// label_7
		label_7 = new Label();
		label_7.setImmediate(false);
		label_7.setWidth("86.96%");
		label_7.setHeight("-1px");
		label_7.setValue("<b>Plazo de atenci&oacute;n (d&iacute;as)</b>");
		lytDetalleTramite.addComponent(label_7, "top:48.0px;left:608.0px;");

		// txtDiasAtencion
		txtDiasAtencion = new TextField();
		txtDiasAtencion.setImmediate(false);
		txtDiasAtencion.setWidth("57px");
		txtDiasAtencion.setHeight("-1px");
		lytDetalleTramite.addComponent(txtDiasAtencion,
				"top:108.0px;left:611.0px;");

		// label_8
		label_8 = new Label();
		label_8.setImmediate(false);
		label_8.setWidth("77px");
		label_8.setHeight("-1px");
		label_8.setValue("<b>Derechos de Pago</b>");
		lytDetalleTramite.addComponent(label_8, "top:170.0px;left:611.0px;");

		// txtDerPagos
		txtDerPagos = new TextField();
		txtDerPagos.setImmediate(false);
		txtDerPagos.setWidth("80px");
		txtDerPagos.setHeight("-1px");
		lytDetalleTramite
				.addComponent(txtDerPagos, "top:208.0px;left:608.0px;");

		// chkArchivoProv
		chkArchivoProv = new CheckBox();
		chkArchivoProv.setCaption("Expediente en Espera");
		chkArchivoProv.setImmediate(false);
		chkArchivoProv.setWidth("-1px");
		chkArchivoProv.setHeight("-1px");
		lytDetalleTramite.addComponent(chkArchivoProv,
				"top:240.0px;left:8.0px;");

		return lytDetalleTramite;
	}

	@AutoGenerated
	private AbsoluteLayout buildLytObservaciones() {
		// common part: create layout
		lytObservaciones = new AbsoluteLayout();
		lytObservaciones.setImmediate(false);
		lytObservaciones.setWidth("100.0%");
		lytObservaciones.setHeight("100.0%");

		// label_26
		label_26 = new Label();
		label_26.setImmediate(false);
		label_26.setWidth("-1px");
		label_26.setHeight("-1px");
		label_26.setValue("<b>Observaciones:");
		lytObservaciones.addComponent(label_26, "top:8.0px;left:8.0px;");

		// txtAObservacionesTUPA
		txtAObservacionesTUPA = new TextArea();
		txtAObservacionesTUPA.setImmediate(false);
		txtAObservacionesTUPA.setWidth("680px");
		txtAObservacionesTUPA.setHeight("220px");
		lytObservaciones.addComponent(txtAObservacionesTUPA,
				"top:28.0px;left:8.0px;");

		return lytObservaciones;
	}

	@AutoGenerated
	private AbsoluteLayout buildLytPersonaRealizaTramite() {
		// common part: create layout
		lytPersonaRealizaTramite = new AbsoluteLayout();
		lytPersonaRealizaTramite.setImmediate(false);
		lytPersonaRealizaTramite.setWidth("100.0%");
		lytPersonaRealizaTramite.setHeight("100.0%");

		// panel_5
		panel_5 = buildPanel_5();
		lytPersonaRealizaTramite.addComponent(panel_5, "top:8.0px;left:7.0px;");

		// panel_6
		panel_6 = buildPanel_6();
		lytPersonaRealizaTramite.addComponent(panel_6,
				"top:140.0px;left:7.0px;");

		return lytPersonaRealizaTramite;
	}

	@AutoGenerated
	private Panel buildPanel_5() {
		// common part: create layout
		panel_5 = new Panel();
		panel_5.setImmediate(false);
		panel_5.setWidth("681px");
		panel_5.setHeight("120px");

		// absoluteLayout_4
		absoluteLayout_4 = buildAbsoluteLayout_4();
		panel_5.setContent(absoluteLayout_4);

		return panel_5;
	}

	@AutoGenerated
	private AbsoluteLayout buildAbsoluteLayout_4() {
		// common part: create layout
		absoluteLayout_4 = new AbsoluteLayout();
		absoluteLayout_4.setImmediate(false);
		absoluteLayout_4.setWidth("100.0%");
		absoluteLayout_4.setHeight("100.0%");

		// label_9
		label_9 = new Label();
		label_9.setImmediate(false);
		label_9.setWidth("-1px");
		label_9.setHeight("-1px");
		label_9.setValue("<b>Presenta Expediente</b>");
		absoluteLayout_4.addComponent(label_9, "top:1.0px;left:16.0px;");

		// label_10
		label_10 = new Label();
		label_10.setImmediate(false);
		label_10.setWidth("-1px");
		label_10.setHeight("-1px");
		label_10.setValue("C&oacute;digo / Nombre: ");
		absoluteLayout_4.addComponent(label_10, "top:21.0px;left:40.0px;");

		// btnBuscarPersonaSolicitante
		btnBuscarPersonaSolicitante = new Boton();
		btnBuscarPersonaSolicitante.setIcon(new ThemeResource(
				"images/botones/find.png"));
		btnBuscarPersonaSolicitante.setImmediate(false);
		btnBuscarPersonaSolicitante.setDescription("Buscar Solicitante");
		btnBuscarPersonaSolicitante.setWidth("30px");
		btnBuscarPersonaSolicitante.setHeight("25px");
		absoluteLayout_4.addComponent(btnBuscarPersonaSolicitante,
				"top:22.0px;left:140.0px;");

		// btnAgregarSolicitante
		btnAgregarSolicitante = new Boton();
		btnAgregarSolicitante.setIcon(new ThemeResource(
				"images/botones/add.png"));
		btnAgregarSolicitante.setImmediate(false);
		btnAgregarSolicitante.setDescription("Registrar Solicitante");
		btnAgregarSolicitante.setWidth("30px");
		btnAgregarSolicitante.setHeight("25px");
		absoluteLayout_4.addComponent(btnAgregarSolicitante,
				"top:22.0px;left:170.0px;");

		// txtCodigoSolicitante
		txtCodigoSolicitante = new NumberField();
		txtCodigoSolicitante.setImmediate(false);
		txtCodigoSolicitante.setWidth("88px");
		txtCodigoSolicitante.setHeight("-1px");
		absoluteLayout_4.addComponent(txtCodigoSolicitante,
				"top:40.0px;left:60.0px;");

		// txtNombreSolicitante
		txtNombreSolicitante = new TextField();
		txtNombreSolicitante.setImmediate(false);
		txtNombreSolicitante.setWidth("472px");
		txtNombreSolicitante.setHeight("-1px");
		absoluteLayout_4.addComponent(txtNombreSolicitante,
				"top:40.0px;left:148.0px;");

		// label_11
		label_11 = new Label();
		label_11.setImmediate(false);
		label_11.setWidth("-1px");
		label_11.setHeight("-1px");
		label_11.setValue("Direcci&oacute;n");
		absoluteLayout_4.addComponent(label_11, "top:64.0px;left:40.0px;");

		// txtDireccionSolicitante
		txtDireccionSolicitante = new TextField();
		txtDireccionSolicitante.setImmediate(false);
		txtDireccionSolicitante.setWidth("560px");
		txtDireccionSolicitante.setHeight("-1px");
		absoluteLayout_4.addComponent(txtDireccionSolicitante,
				"top:82.0px;left:60.0px;");

		return absoluteLayout_4;
	}

	@AutoGenerated
	private Panel buildPanel_6() {
		// common part: create layout
		panel_6 = new Panel();
		panel_6.setImmediate(false);
		panel_6.setWidth("681px");
		panel_6.setHeight("120px");

		// absoluteLayout_5
		absoluteLayout_5 = buildAbsoluteLayout_5();
		panel_6.setContent(absoluteLayout_5);

		return panel_6;
	}

	@AutoGenerated
	private AbsoluteLayout buildAbsoluteLayout_5() {
		// common part: create layout
		absoluteLayout_5 = new AbsoluteLayout();
		absoluteLayout_5.setImmediate(false);
		absoluteLayout_5.setWidth("100.0%");
		absoluteLayout_5.setHeight("100.0%");

		// label_12
		label_12 = new Label();
		label_12.setImmediate(false);
		label_12.setWidth("-1px");
		label_12.setHeight("-1px");
		label_12.setValue("<b>Representante Legal</b>");
		absoluteLayout_5.addComponent(label_12, "top:1.0px;left:16.0px;");

		// label_13
		label_13 = new Label();
		label_13.setImmediate(false);
		label_13.setWidth("-1px");
		label_13.setHeight("-1px");
		label_13.setValue("C&oacute;digo / Nombre");
		absoluteLayout_5.addComponent(label_13, "top:23.0px;left:40.0px;");

		// btnBuscarRepresentanteLegal
		btnBuscarRepresentanteLegal = new Boton();
		btnBuscarRepresentanteLegal.setIcon(new ThemeResource(
				"images/botones/find.png"));
		btnBuscarRepresentanteLegal.setImmediate(false);
		btnBuscarRepresentanteLegal
				.setDescription("Buscar Representante Legal");
		btnBuscarRepresentanteLegal.setWidth("30px");
		btnBuscarRepresentanteLegal.setHeight("25px");
		absoluteLayout_5.addComponent(btnBuscarRepresentanteLegal,
				"top:27.0px;left:140.0px;");

		// btnAgregarRepresentanteLegal
		btnAgregarRepresentanteLegal = new Boton();
		btnAgregarRepresentanteLegal.setIcon(new ThemeResource(
				"images/botones/add.png"));
		btnAgregarRepresentanteLegal.setImmediate(false);
		btnAgregarRepresentanteLegal
				.setDescription("Agregar Representante Legal");
		btnAgregarRepresentanteLegal.setWidth("30px");
		btnAgregarRepresentanteLegal.setHeight("25px");
		absoluteLayout_5.addComponent(btnAgregarRepresentanteLegal,
				"top:27.0px;left:170.0px;");

		// txtCodigoRepresentante
		txtCodigoRepresentante = new NumberField();
		txtCodigoRepresentante.setImmediate(false);
		txtCodigoRepresentante.setWidth("88px");
		txtCodigoRepresentante.setHeight("-1px");
		absoluteLayout_5.addComponent(txtCodigoRepresentante,
				"top:45.0px;left:60.0px;");

		// txtNombreRepresentante
		txtNombreRepresentante = new TextField();
		txtNombreRepresentante.setImmediate(false);
		txtNombreRepresentante.setWidth("472px");
		txtNombreRepresentante.setHeight("-1px");
		absoluteLayout_5.addComponent(txtNombreRepresentante,
				"top:45.0px;left:148.0px;");

		// label_14
		label_14 = new Label();
		label_14.setImmediate(false);
		label_14.setWidth("-1px");
		label_14.setHeight("-1px");
		label_14.setValue("Direcci&oacute;n:");
		absoluteLayout_5.addComponent(label_14, "top:71.0px;left:40.0px;");

		// txtDireccionRepresentante
		txtDireccionRepresentante = new TextField();
		txtDireccionRepresentante.setImmediate(false);
		txtDireccionRepresentante.setWidth("560px");
		txtDireccionRepresentante.setHeight("-1px");
		absoluteLayout_5.addComponent(txtDireccionRepresentante,
				"top:87.0px;left:60.0px;");

		// btnLimpiarRepresentanteTUPA
		btnLimpiarRepresentanteTUPA = new Boton();
		btnLimpiarRepresentanteTUPA.setIcon(new ThemeResource(
				"images/botones/clear.png"));
		btnLimpiarRepresentanteTUPA.setImmediate(false);
		btnLimpiarRepresentanteTUPA.setDescription("Limpiar ");
		btnLimpiarRepresentanteTUPA.setWidth("30px");
		btnLimpiarRepresentanteTUPA.setHeight("25px");
		absoluteLayout_5.addComponent(btnLimpiarRepresentanteTUPA,
				"top:27.0px;left:200.0px;");

		return absoluteLayout_5;
	}

	@AutoGenerated
	private AbsoluteLayout buildLytMovimientoExpedientes() {
		// common part: create layout
		lytMovimientoExpedientes = new AbsoluteLayout();
		lytMovimientoExpedientes.setImmediate(false);
		lytMovimientoExpedientes.setWidth("100.0%");
		lytMovimientoExpedientes.setHeight("100.0%");

		// tbMovimientoExpedientes
		tbMovimientoExpedientes = new Table();
		tbMovimientoExpedientes.setImmediate(false);
		tbMovimientoExpedientes.setWidth("580px");
		tbMovimientoExpedientes.setHeight("210px");
		lytMovimientoExpedientes.addComponent(tbMovimientoExpedientes,
				"top:32.0px;left:8.0px;");

		// btnVerDetalleExpedientes
		btnVerDetalleExpedientes = new Button();
		btnVerDetalleExpedientes.setCaption("Ver Detalle");
		btnVerDetalleExpedientes.setImmediate(true);
		btnVerDetalleExpedientes.setWidth("-1px");
		btnVerDetalleExpedientes.setHeight("-1px");
		lytMovimientoExpedientes.addComponent(btnVerDetalleExpedientes,
				"top:48.0px;left:600.0px;");

		// label_27
		label_27 = new Label();
		label_27.setImmediate(false);
		label_27.setWidth("-1px");
		label_27.setHeight("-1px");
		label_27.setValue("<b>C&oacute;digo del Expediente: ");
		lytMovimientoExpedientes.addComponent(label_27,
				"top:8.0px;left:168.0px;");

		// txtCodigoExpedienteBuscar
		txtCodigoExpedienteBuscar = new NumberField();
		txtCodigoExpedienteBuscar.setImmediate(false);
		txtCodigoExpedienteBuscar.setWidth("110px");
		txtCodigoExpedienteBuscar.setHeight("-1px");
		lytMovimientoExpedientes.addComponent(txtCodigoExpedienteBuscar,
				"top:5.0px;left:298.0px;");

		// btnBuscarExpedienteMov
		btnBuscarExpedienteMov = new Button();
		btnBuscarExpedienteMov.setCaption("Buscar");
		btnBuscarExpedienteMov.setImmediate(true);
		btnBuscarExpedienteMov
				.setDescription("Buscar Movimientos del Expediente");
		btnBuscarExpedienteMov.setWidth("110px");
		btnBuscarExpedienteMov.setHeight("-1px");
		lytMovimientoExpedientes.addComponent(btnBuscarExpedienteMov,
				"top:5.0px;left:478.0px;");

		// lblAnioBusqeda
		lblAnioBusqeda = new Label();
		lblAnioBusqeda.setImmediate(false);
		lblAnioBusqeda.setWidth("-1px");
		lblAnioBusqeda.setHeight("-1px");
		lblAnioBusqeda.setValue("<b>A&ntilde;o: ");
		lytMovimientoExpedientes.addComponent(lblAnioBusqeda,
				"top:8.0px;left:8.0px;");

		// txtAnioExpedienteMov
		txtAnioExpedienteMov = new NumberField();
		txtAnioExpedienteMov.setImmediate(false);
		txtAnioExpedienteMov.setWidth("108px");
		txtAnioExpedienteMov.setHeight("-1px");
		lytMovimientoExpedientes.addComponent(txtAnioExpedienteMov,
				"top:5.0px;left:48.0px;");

		return lytMovimientoExpedientes;
	}

	@AutoGenerated
	private AbsoluteLayout buildLytNoTUPA() {
		// common part: create layout
		lytNoTUPA = new AbsoluteLayout();
		lytNoTUPA.setImmediate(false);
		lytNoTUPA.setWidth("100.0%");
		lytNoTUPA.setHeight("100.0%");

		// tabSheet_1
		tabSheet_1 = buildTabSheet_1();
		lytNoTUPA.addComponent(tabSheet_1, "top:18.0px;left:19.0px;");

		return lytNoTUPA;
	}

	@AutoGenerated
	private TabSheet buildTabSheet_1() {
		// common part: create layout
		tabSheet_1 = new TabSheet();
		tabSheet_1.setImmediate(true);
		tabSheet_1.setWidth("680px");
		tabSheet_1.setHeight("99.33%");

		// lytDetalleTramiteNT
		lytDetalleTramiteNT = buildLytDetalleTramiteNT();
		tabSheet_1.addTab(lytDetalleTramiteNT, "Detalle Trámite", null);

		// lytPersonaNT
		lytPersonaNT = buildLytPersonaNT();
		tabSheet_1.addTab(lytPersonaNT, "Persona que Realiza Trámite", null);

		return tabSheet_1;
	}

	@AutoGenerated
	private AbsoluteLayout buildLytDetalleTramiteNT() {
		// common part: create layout
		lytDetalleTramiteNT = new AbsoluteLayout();
		lytDetalleTramiteNT.setImmediate(false);
		lytDetalleTramiteNT.setWidth("100.0%");
		lytDetalleTramiteNT.setHeight("100.0%");

		// label_15
		label_15 = new Label();
		label_15.setImmediate(false);
		label_15.setWidth("-1px");
		label_15.setHeight("-1px");
		label_15.setValue("<b>Tipo de Documento:</b>");
		lytDetalleTramiteNT.addComponent(label_15, "top:8.0px;left:19.0px;");

		// cbxTipoDocumento
		cbxTipoDocumento = new ComboBox();
		cbxTipoDocumento.setImmediate(false);
		cbxTipoDocumento.setWidth("200px");
		cbxTipoDocumento.setHeight("-1px");
		lytDetalleTramiteNT.addComponent(cbxTipoDocumento,
				"top:26.0px;left:19.0px;");

		// label_16
		label_16 = new Label();
		label_16.setImmediate(false);
		label_16.setWidth("-1px");
		label_16.setHeight("-1px");
		label_16.setValue("<b>N&uacute;mero:</b>");
		lytDetalleTramiteNT.addComponent(label_16, "top:8.0px;left:339.0px;");

		// txtNumeroDoc
		txtNumeroDoc = new TextField();
		txtNumeroDoc.setImmediate(false);
		txtNumeroDoc.setWidth("230px");
		txtNumeroDoc.setHeight("-1px");
		lytDetalleTramiteNT.addComponent(txtNumeroDoc,
				"top:26.0px;left:339.0px;");

		// label_17
		label_17 = new Label();
		label_17.setImmediate(false);
		label_17.setWidth("-1px");
		label_17.setHeight("-1px");
		label_17.setValue("<b>Procedimiento:</b>");
		lytDetalleTramiteNT.addComponent(label_17, "top:55.0px;left:19.0px;");

		// cbxProcedimiento
		cbxProcedimiento = new ComboBox();
		cbxProcedimiento.setImmediate(false);
		cbxProcedimiento.setWidth("200px");
		cbxProcedimiento.setHeight("-1px");
		lytDetalleTramiteNT.addComponent(cbxProcedimiento,
				"top:73.0px;left:19.0px;");

		// label_18
		label_18 = new Label();
		label_18.setImmediate(false);
		label_18.setWidth("-1px");
		label_18.setHeight("-1px");
		label_18.setValue("<b>Glosa:</b>");
		lytDetalleTramiteNT.addComponent(label_18, "top:108.0px;left:19.0px;");

		// txtAGlosa
		txtAGlosa = new TextArea();
		txtAGlosa.setImmediate(false);
		txtAGlosa.setWidth("640px");
		txtAGlosa.setHeight("52px");
		lytDetalleTramiteNT.addComponent(txtAGlosa, "top:128.0px;left:19.0px;");

		// label_19
		label_19 = new Label();
		label_19.setImmediate(false);
		label_19.setWidth("-1px");
		label_19.setHeight("-1px");
		label_19.setValue("<b>Observaciones:</b>");
		lytDetalleTramiteNT.addComponent(label_19, "top:190.0px;left:19.0px;");

		// txtAObservacion
		txtAObservacion = new TextArea();
		txtAObservacion.setImmediate(false);
		txtAObservacion.setWidth("640px");
		txtAObservacion.setHeight("50px");
		lytDetalleTramiteNT.addComponent(txtAObservacion,
				"top:208.0px;left:19.0px;");

		return lytDetalleTramiteNT;
	}

	@AutoGenerated
	private AbsoluteLayout buildLytPersonaNT() {
		// common part: create layout
		lytPersonaNT = new AbsoluteLayout();
		lytPersonaNT.setImmediate(false);
		lytPersonaNT.setWidth("100.0%");
		lytPersonaNT.setHeight("100.0%");

		// panel_9
		panel_9 = buildPanel_9();
		lytPersonaNT.addComponent(panel_9, "top:8.0px;left:15.0px;");

		// panel_10
		panel_10 = buildPanel_10();
		lytPersonaNT.addComponent(panel_10, "top:135.0px;left:15.0px;");

		return lytPersonaNT;
	}

	@AutoGenerated
	private Panel buildPanel_9() {
		// common part: create layout
		panel_9 = new Panel();
		panel_9.setImmediate(false);
		panel_9.setWidth("644px");
		panel_9.setHeight("115px");

		// absoluteLayout_8
		absoluteLayout_8 = buildAbsoluteLayout_8();
		panel_9.setContent(absoluteLayout_8);

		return panel_9;
	}

	@AutoGenerated
	private AbsoluteLayout buildAbsoluteLayout_8() {
		// common part: create layout
		absoluteLayout_8 = new AbsoluteLayout();
		absoluteLayout_8.setImmediate(false);
		absoluteLayout_8.setWidth("100.0%");
		absoluteLayout_8.setHeight("100.0%");

		// label_20
		label_20 = new Label();
		label_20.setImmediate(false);
		label_20.setWidth("-1px");
		label_20.setHeight("-1px");
		label_20.setValue("<b>Presenta Expediente</b>");
		absoluteLayout_8.addComponent(label_20, "top:0.0px;left:12.0px;");

		// label_21
		label_21 = new Label();
		label_21.setImmediate(false);
		label_21.setWidth("-1px");
		label_21.setHeight("-1px");
		label_21.setValue("C&oacute;digo / Nombre");
		absoluteLayout_8.addComponent(label_21, "top:20.0px;left:23.0px;");

		// txtCodigoSolicitanteNT
		txtCodigoSolicitanteNT = new NumberField();
		txtCodigoSolicitanteNT.setImmediate(false);
		txtCodigoSolicitanteNT.setWidth("80px");
		txtCodigoSolicitanteNT.setHeight("-1px");
		absoluteLayout_8.addComponent(txtCodigoSolicitanteNT,
				"top:39.0px;left:43.0px;");

		// txtNombreSolicitanteNT
		txtNombreSolicitanteNT = new TextField();
		txtNombreSolicitanteNT.setImmediate(false);
		txtNombreSolicitanteNT.setWidth("500px");
		txtNombreSolicitanteNT.setHeight("-1px");
		absoluteLayout_8.addComponent(txtNombreSolicitanteNT,
				"top:39.0px;left:123.0px;");

		// label_22
		label_22 = new Label();
		label_22.setImmediate(false);
		label_22.setWidth("-1px");
		label_22.setHeight("-1px");
		label_22.setValue("Direcci&oacute;n");
		absoluteLayout_8.addComponent(label_22, "top:63.0px;left:23.0px;");

		// txtDireccionSolicitanteNT
		txtDireccionSolicitanteNT = new TextField();
		txtDireccionSolicitanteNT.setImmediate(false);
		txtDireccionSolicitanteNT.setWidth("580px");
		txtDireccionSolicitanteNT.setHeight("-1px");
		absoluteLayout_8.addComponent(txtDireccionSolicitanteNT,
				"top:80.0px;left:43.0px;");

		// btnBuscarSolicitanteNT
		btnBuscarSolicitanteNT = new Boton();
		btnBuscarSolicitanteNT.setIcon(new ThemeResource(
				"images/botones/find.png"));
		btnBuscarSolicitanteNT.setImmediate(false);
		btnBuscarSolicitanteNT.setDescription("Buscar Solicitante");
		btnBuscarSolicitanteNT.setWidth("30px");
		btnBuscarSolicitanteNT.setHeight("25px");
		absoluteLayout_8.addComponent(btnBuscarSolicitanteNT,
				"top:21.0px;left:123.0px;");

		// btnAgregarSolicitanteNT
		btnAgregarSolicitanteNT = new Boton();
		btnAgregarSolicitanteNT.setIcon(new ThemeResource(
				"images/botones/add.png"));
		btnAgregarSolicitanteNT.setImmediate(false);
		btnAgregarSolicitanteNT.setDescription("Agregar Solicitante");
		btnAgregarSolicitanteNT.setWidth("30px");
		btnAgregarSolicitanteNT.setHeight("25px");
		absoluteLayout_8.addComponent(btnAgregarSolicitanteNT,
				"top:21.0px;left:153.0px;");

		return absoluteLayout_8;
	}

	@AutoGenerated
	private Panel buildPanel_10() {
		// common part: create layout
		panel_10 = new Panel();
		panel_10.setImmediate(false);
		panel_10.setWidth("644px");
		panel_10.setHeight("115px");

		// absoluteLayout_9
		absoluteLayout_9 = buildAbsoluteLayout_9();
		panel_10.setContent(absoluteLayout_9);

		return panel_10;
	}

	@AutoGenerated
	private AbsoluteLayout buildAbsoluteLayout_9() {
		// common part: create layout
		absoluteLayout_9 = new AbsoluteLayout();
		absoluteLayout_9.setImmediate(false);
		absoluteLayout_9.setWidth("100.0%");
		absoluteLayout_9.setHeight("100.0%");

		// label_23
		label_23 = new Label();
		label_23.setImmediate(false);
		label_23.setWidth("-1px");
		label_23.setHeight("-1px");
		label_23.setValue("<b>Representante Legal</b>");
		absoluteLayout_9.addComponent(label_23, "top:1.0px;left:12.0px;");

		// label_24
		label_24 = new Label();
		label_24.setImmediate(false);
		label_24.setWidth("-1px");
		label_24.setHeight("-1px");
		label_24.setValue("C&oacute;digo / Nombre ");
		absoluteLayout_9.addComponent(label_24, "top:19.0px;left:23.0px;");

		// txtRepresentanteNT
		txtRepresentanteNT = new TextField();
		txtRepresentanteNT.setImmediate(false);
		txtRepresentanteNT.setWidth("80px");
		txtRepresentanteNT.setHeight("-1px");
		absoluteLayout_9.addComponent(txtRepresentanteNT,
				"top:40.0px;left:43.0px;");

		// txtNombreRepresentanteNT
		txtNombreRepresentanteNT = new TextField();
		txtNombreRepresentanteNT.setImmediate(false);
		txtNombreRepresentanteNT.setWidth("500px");
		txtNombreRepresentanteNT.setHeight("-1px");
		absoluteLayout_9.addComponent(txtNombreRepresentanteNT,
				"top:40.0px;left:123.0px;");

		// label_25
		label_25 = new Label();
		label_25.setImmediate(false);
		label_25.setWidth("-1px");
		label_25.setHeight("-1px");
		label_25.setValue("Direcci&oacute;n");
		absoluteLayout_9.addComponent(label_25, "top:61.0px;left:23.0px;");

		// txtDireccionRepresentanteNT
		txtDireccionRepresentanteNT = new TextField();
		txtDireccionRepresentanteNT.setImmediate(false);
		txtDireccionRepresentanteNT.setWidth("580px");
		txtDireccionRepresentanteNT.setHeight("-1px");
		absoluteLayout_9.addComponent(txtDireccionRepresentanteNT,
				"top:79.0px;left:43.0px;");

		// btnBuscarRepresentanteNT
		btnBuscarRepresentanteNT = new Boton();
		btnBuscarRepresentanteNT.setIcon(new ThemeResource(
				"images/botones/find.png"));
		btnBuscarRepresentanteNT.setImmediate(false);
		btnBuscarRepresentanteNT.setDescription("Buscar Representante");
		btnBuscarRepresentanteNT.setWidth("30px");
		btnBuscarRepresentanteNT.setHeight("25px");
		absoluteLayout_9.addComponent(btnBuscarRepresentanteNT,
				"top:23.0px;left:123.0px;");

		// btnAgregarRepresentanteNT
		btnAgregarRepresentanteNT = new Boton();
		btnAgregarRepresentanteNT.setIcon(new ThemeResource(
				"images/botones/add.png"));
		btnAgregarRepresentanteNT.setImmediate(false);
		btnAgregarRepresentanteNT.setDescription("Registrar Representante");
		btnAgregarRepresentanteNT.setWidth("30px");
		btnAgregarRepresentanteNT.setHeight("25px");
		absoluteLayout_9.addComponent(btnAgregarRepresentanteNT,
				"top:23.0px;left:153.0px;");

		// btnLimparRepresentanteNT
		btnLimparRepresentanteNT = new Boton();
		btnLimparRepresentanteNT.setIcon(new ThemeResource(
				"images/botones/clear.png"));
		btnLimparRepresentanteNT.setImmediate(false);
		btnLimparRepresentanteNT.setDescription("Limpiar");
		btnLimparRepresentanteNT.setWidth("30px");
		btnLimparRepresentanteNT.setHeight("25px");
		absoluteLayout_9.addComponent(btnLimparRepresentanteNT,
				"top:23.0px;left:183.0px;");

		return absoluteLayout_9;
	}

}