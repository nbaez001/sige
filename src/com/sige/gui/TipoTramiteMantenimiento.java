package com.sige.gui;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.vaadin.dialogs.ConfirmDialog;

import com.sige.entidad.Dependencia;
import com.sige.entidad.PagosTupa;
import com.sige.entidad.RequisitoTupa;
import com.sige.entidad.TipoTramite;
import com.sige.entidad.Tupa;
import com.sige.gui.ui.DecimalField;
import com.sige.gui.ui.NumberField;
import com.sige.servicio.DependenciaServicio;
import com.sige.servicio.PagosTupaService;
import com.sige.servicio.RequisitoTupaService;
import com.sige.servicio.TipoTramiteService;
import com.sige.servicio.TupaService;
import com.sige.servicio.UtilService;
import com.sige.util.Boton;
import com.sige.util.Constantes;
import com.sige.util.Injector;
import com.sige.util.Notificacion;
import com.sige.util.Permiso;
import com.sige.util.SigeUtil;
import com.sige.util.TextField;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Item;
import com.vaadin.data.Property;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.Property.ValueChangeListener;
import com.vaadin.data.util.IndexedContainer;
import com.vaadin.server.ThemeResource;
import com.vaadin.shared.ui.label.ContentMode;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.CheckBox;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.Label;
import com.vaadin.ui.TabSheet;
import com.vaadin.ui.TabSheet.Tab;
import com.vaadin.ui.Table;
import com.vaadin.ui.TextArea;
import com.vaadin.ui.UI;
import com.vaadin.ui.Window;
import com.vaadin.ui.themes.Reindeer;

public class TipoTramiteMantenimiento extends CustomComponent implements
		ClickListener {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@AutoGenerated
	private AbsoluteLayout mainLayout;

	@AutoGenerated
	private Button btnImprimir;

	@AutoGenerated
	private Button btnNuevo;

	@AutoGenerated
	private Button btnCancelar;

	@AutoGenerated
	private Button btnEliminar;

	@AutoGenerated
	private Button btnGuardar;

	@AutoGenerated
	private Button btnBuscar;

	@AutoGenerated
	private TabSheet tabSheet_1;

	@AutoGenerated
	private AbsoluteLayout lytPagos;

	@AutoGenerated
	private DecimalField txtCostoPagos;

	@AutoGenerated
	private Label label_15;

	@AutoGenerated
	private Table tbPagos;

	@AutoGenerated
	private Boton btnQuitarPago;

	@AutoGenerated
	private Boton btnAgregarPagos;

	@AutoGenerated
	private TextArea txtADescripcionPago;

	@AutoGenerated
	private Label label_14;

	@AutoGenerated
	private Label label_13;

	@AutoGenerated
	private AbsoluteLayout lytRequisitos;

	@AutoGenerated
	private Table tbReqTupa;

	@AutoGenerated
	private Boton btnQuitar;

	@AutoGenerated
	private Boton btnAgregr;

	@AutoGenerated
	private CheckBox chkFedatear;

	@AutoGenerated
	private TextArea txtADescripcion;

	@AutoGenerated
	private Label label_12;

	@AutoGenerated
	private Label label_4;

	@AutoGenerated
	private AbsoluteLayout lytDetalleTramite;

	@AutoGenerated
	private Boton btnBuscarDependencia;

	@AutoGenerated
	private TextField txtDependencia2;

	@AutoGenerated
	private Label label_5;

	@AutoGenerated
	private Label label_1;

	@AutoGenerated
	private NumberField txtTipoAtencion;

	@AutoGenerated
	private Label label_6;

	@AutoGenerated
	private TextArea txtANombre;

	@AutoGenerated
	private TextField txtAnio;

	@AutoGenerated
	private CheckBox chkTupa;

	@AutoGenerated
	private Label label_3;

	@AutoGenerated
	private Label label_2;

	private static final long serialVersionUID = 1L;

	private Log logger = LogFactory.getLog(TipoTramiteMantenimiento.class);

	private TipoTramiteService tipoTramiteService;

	private RequisitoTupaService requisitoTupaService;
	private PagosTupaService pagosTupaService;
	private DependenciaServicio dependenciaService;
	private TupaService tupaService;
	private Dependencia dependenciaObtenida;
	private Window quienLlama;
	private Tab tabRequisitos, tabPagos, tabDetalleTramite;
	private Boolean esNuevo;
	private List<PagosTupa> pagosTupa = new ArrayList<PagosTupa>();
	private List<RequisitoTupa> requisitosTupa = new ArrayList<RequisitoTupa>();
	private TipoTramite tipoTramite;
	private Tupa tupa;
	private PagosTupa pagoTupa;
	private RequisitoTupa requisitoTupa;
	private Integer codRequisitoSeleccionado;
	private Integer codPagoSeleccionado;
	private Boolean requisitoSeleccionado;
	private Boolean pagoSeleccionado;
	private TipoTramite tipoTramiteObtenido;
	private Tupa tupaObtenida;
	private List<RequisitoTupa> lsRequisitosObtenido;
	private List<PagosTupa> lsPagosTupaObtenido;

	/**
	 * The constructor should first build the main layout, set the composition
	 * root and then do any custom initialization.
	 * 
	 * The constructor will not be automatically regenerated by the visual
	 * editor.
	 */
	private Permiso permiso;
	private UtilService utilService;
	private Map<String, Integer> tramiteColumnLenghts;
	private Map<String, Integer> requisitosColumnLenghts;
	private Map<String, Integer> pagosColumnLenghts;
	private boolean confirmacion = false;
	private String motivo = null;

	public TipoTramiteMantenimiento(Window quienLlama, Permiso permiso) {
		this.utilService = Injector.obtenerServicio(UtilService.class);
		this.tipoTramiteService = Injector
				.obtenerServicio(TipoTramiteService.class);
		this.requisitoTupaService = Injector
				.obtenerServicio(RequisitoTupaService.class);
		this.tupaService = Injector.obtenerServicio(TupaService.class);
		this.pagosTupaService = Injector
				.obtenerServicio(PagosTupaService.class);
		this.dependenciaService = Injector
				.obtenerServicio(DependenciaServicio.class);
		this.quienLlama = quienLlama;
		this.permiso = permiso;
		buildMainLayout();
		setCompositionRoot(mainLayout);
		postBuild();
		resetearFormulario();
	}

	public void postBuild() {

		label_14.setContentMode(ContentMode.HTML);
		label_13.setContentMode(ContentMode.HTML);
		label_12.setContentMode(ContentMode.HTML);
		label_4.setContentMode(ContentMode.HTML);
		label_5.setContentMode(ContentMode.HTML);
		label_1.setContentMode(ContentMode.HTML);
		label_6.setContentMode(ContentMode.HTML);
		label_3.setContentMode(ContentMode.HTML);
		label_2.setContentMode(ContentMode.HTML);
		tramiteColumnLenghts = utilService.getLengthColumns("tipotramite");
		requisitosColumnLenghts = utilService.getLengthColumns("requisitotupa");
		pagosColumnLenghts = utilService.getLengthColumns("pagostupa");
		this.txtANombre.setMaxLength(tramiteColumnLenghts.get("nombre"));
		this.txtADescripcion.setMaxLength(requisitosColumnLenghts
				.get("descripcion"));
		this.txtADescripcionPago.setMaxLength(pagosColumnLenghts
				.get("descripcion"));
		tabPagos = tabSheet_1.addTab(lytPagos, "Pagos");
		tabRequisitos = tabSheet_1.addTab(lytRequisitos, "Requisitos");
		tabDetalleTramite = tabSheet_1.addTab(lytDetalleTramite,
				"Detalle Trámite");
		this.btnBuscar.addClickListener((ClickListener) this);
		this.btnCancelar.addClickListener((ClickListener) this);
		this.btnGuardar.addClickListener((ClickListener) this);
		this.btnEliminar.addClickListener((ClickListener) this);
		this.btnQuitar.addClickListener((ClickListener) this);
		this.btnImprimir.addClickListener((ClickListener) this);
		this.btnBuscarDependencia.addClickListener((ClickListener) this);
		this.btnNuevo.addClickListener((ClickListener) this);
		this.btnAgregr.setStyleName(Reindeer.BUTTON_LINK);
		this.btnQuitar.setStyleName(Reindeer.BUTTON_LINK);
		this.btnAgregarPagos.addClickListener((ClickListener) this);
		this.btnQuitarPago.addClickListener((ClickListener) this);
		this.btnAgregarPagos.setStyleName(Reindeer.BUTTON_LINK);
		this.btnQuitarPago.setStyleName(Reindeer.BUTTON_LINK);
		this.txtTipoAtencion.setTabIndex(1);
		this.txtANombre.setTabIndex(2);
		this.btnBuscarDependencia.setTabIndex(3);
		this.btnGuardar.setTabIndex(4);
		this.txtADescripcionPago.setTabIndex(5);
		this.txtCostoPagos.setTabIndex(6);
		this.btnAgregarPagos.setTabIndex(7);
		this.btnQuitarPago.setTabIndex(8);
		chkTupa.setImmediate(true);
		chkTupa.addValueChangeListener(new ValueChangeListener() {

			private static final long serialVersionUID = 1L;

			@Override
			public void valueChange(ValueChangeEvent event) {
				if (chkTupa.getValue()) {
					tabPagos.setVisible(true);
					tabRequisitos.setVisible(true);
					btnBuscarDependencia.setEnabled(true);
					limparFormulario();
				} else {
					// pnlTupa.setEnabled(false);
					tabPagos.setVisible(false);
					tabRequisitos.setVisible(false);
					btnBuscarDependencia.setEnabled(false);
					txtDependencia2.setValue("");
					limparFormulario();
				}
			}
		});
		btnAgregr.addClickListener((ClickListener) this);
		Calendar calendario = Calendar.getInstance();
		txtAnio.setValue("" + calendario.get(Calendar.YEAR));
		IndexedContainer contenido = new IndexedContainer();
		contenido.addContainerProperty("id", Long.class, null);
		contenido.addContainerProperty("item", Integer.class, null);
		contenido.addContainerProperty("desc", String.class, null);
		contenido.addContainerProperty("fedatear", Boolean.class, null);
		tbReqTupa.setContainerDataSource(contenido);
		tbReqTupa.setVisibleColumns(new Object[] { "item", "desc" });
		tbReqTupa.setColumnHeader("item", "Item");
		tbReqTupa.setColumnHeader("desc", "Descripcion");
		tbReqTupa.setColumnWidth("item", 25);
		tbReqTupa.setColumnWidth("desc", 340);
		tbReqTupa.setSelectable(true);
		tbReqTupa.setImmediate(true);
		this.tbReqTupa
				.addValueChangeListener(new Property.ValueChangeListener() {

					private static final long serialVersionUID = 1L;

					public void valueChange(ValueChangeEvent event) {
						// TODO Auto-generated method stub
						Item item = tbReqTupa.getItem(tbReqTupa.getValue());
						if (item != null) {
							// if (item.getItemProperty("id").getValue() ==
							// null) {
							requisitoSeleccionado = true;
							codRequisitoSeleccionado = Integer.parseInt(item
									.getItemProperty("item").getValue()
									.toString());
							txtADescripcion.setValue(item
									.getItemProperty("desc").getValue()
									.toString());
							chkFedatear.setValue(Boolean.parseBoolean(item
									.getItemProperty("fedatear").getValue()
									.toString()));
							// }
						}
					}
				});

		this.btnCancelar.setId("cancelar");
		this.btnEliminar.setId("eliminar");
		this.btnGuardar.setId("guardar");
		this.btnNuevo.setId("nuevo");
		this.btnImprimir.setId("imprimir");
		SigeUtil.validarBotones(permiso, btnNuevo, btnEliminar, btnCancelar,
				btnGuardar, btnImprimir);
		IndexedContainer contenedorPagos = new IndexedContainer();
		contenedorPagos.addContainerProperty("id", Long.class, null);
		contenedorPagos.addContainerProperty("item", Integer.class, null);
		contenedorPagos.addContainerProperty("descripcion", String.class, null);
		contenedorPagos.addContainerProperty("costo", BigDecimal.class, null);
		tbPagos.setContainerDataSource(contenedorPagos);
		tbPagos.setVisibleColumns(new Object[] { "item", "descripcion", "costo" });
		tbPagos.setColumnHeader("item", "Item");
		tbPagos.setColumnHeader("descripcion", "Descripcion");
		tbPagos.setColumnHeader("costo", "Costo");
		tbPagos.setColumnWidth("item", 40);
		tbPagos.setColumnWidth("descripcion", 220);
		tbPagos.setColumnWidth("costo", 50);
		tbPagos.setSelectable(true);
		tbPagos.setImmediate(true);

		tbPagos.addValueChangeListener(new Property.ValueChangeListener() {

			@Override
			public void valueChange(ValueChangeEvent event) {
				// TODO Auto-generated method stub
				Item item = tbPagos.getItem(tbPagos.getValue());
				if (item != null) {
					// if (item.getItemProperty("id").getValue() == null) {
					pagoSeleccionado = true;
					codPagoSeleccionado = Integer.parseInt(item
							.getItemProperty("item").getValue().toString());
					txtADescripcionPago.setValue(item
							.getItemProperty("descripcion").getValue()
							.toString());
					txtCostoPagos.setValue(item.getItemProperty("costo")
							.getValue().toString());
					// }
				}

			}
		});

	}

	public void obtenerMotivo(String motivo, Boolean confirmacion,
			Integer tipoOperacion) {
		if (confirmacion) {
			this.motivo = motivo;
			this.confirmacion = true;
			if (tipoOperacion.equals(Constantes.TIPO_OPERACION.MODIFICACION)) {
				btnGuardar.click();
			} else {
				btnEliminar.click();
			}
			this.confirmacion = false;
		}
	}

	@Override
	public void buttonClick(ClickEvent event) {
		if (event.getSource() == this.btnBuscar) {
			Window subWindow = SigeUtil.generarBuscador(new Window(),
					"Buscar Tipo Tramite", "775px", "430px");
			TipoTramiteBuscar componente = new TipoTramiteBuscar(subWindow,
					this, null);
			subWindow.setContent(componente);
			UI.getCurrent().addWindow(subWindow);
			componente.rellenarDatosTablaTipoTramite();
		} else if (event.getSource() == this.btnBuscarDependencia) {
			Window subWindow = SigeUtil.generarBuscador(new Window(),
					"BUSQUEDA DE DEPENDENCIAS", "645px", "375px");
			subWindow.setContent(new DependenciaBuscar(subWindow, this));
			UI.getCurrent().addWindow(subWindow);
		} else if (event.getSource() == this.btnNuevo) {
			this.txtTipoAtencion.focus();
			nuevoRegistro();
		} else if (event.getSource() == this.btnCancelar) {
			resetearFormulario();
		} else if (event.getSource() == this.btnGuardar) {
			Boolean valido = false;
			if (chkTupa.getValue()) {
				valido = SigeUtil.validarCamposTexto(txtTipoAtencion)
						&& txtANombre.getValue().toString().length() > 0
						&& txtDependencia2.getValue().toString().length() > 0
						&& tbReqTupa.size() > 0;
			} else {
				valido = SigeUtil.validarCamposTexto(txtTipoAtencion)
						&& txtANombre.getValue().toString().length() > 0;
			}
			if (valido) {
				if (esNuevo) {
					guardarTipoTramite();
					resetearFormulario();
					Notificacion.show(new Notificacion(
							"Se guard&oacute; el tr&aacute;mite exitosamente",
							Constantes.MENSAJE.TYPE_SUCCES));
				} else {
					if (!confirmacion) {
						Window ventana = SigeUtil.generarBuscador(new Window(),
								"INGRESAR MOTIVO", "360", "260");
						ventana.setContent(new PanelMotivoObservacion(ventana,
								this, Constantes.TIPO_OPERACION.MODIFICACION,
								(tramiteColumnLenghts.get("motivomodifica"))));
						UI.getCurrent().addWindow(ventana);
						return;
					}
					ConfirmDialog.show(UI.getCurrent(), "Confirmación",
							"¿Desea actualizar el Trámite?", "Aceptar",
							"Cancelar", new ConfirmDialog.Listener() {
								private static final long serialVersionUID = 1L;

								public void onClose(ConfirmDialog dialog) {
									if (dialog.isConfirmed()) {
										actualizarTipoTramite();
										resetearFormulario();
										Notificacion
												.show(new Notificacion(
														"Se actualizó el tr&aacute;mite con &eacute;xito",
														Constantes.MENSAJE.TYPE_SUCCES));
									}
								}
							});
				}
			} else {
				Notificacion.show(new Notificacion(
						"Debe rellenar todos los campos",
						Constantes.MENSAJE.TYPE_ERROR));
			}

		} else if (event.getSource() == this.btnAgregr) {
			if (!requisitoSeleccionado) {
				if (esNuevo) {
					agregarNuevosRequisitos();
				} else {
					agregarRequisitosAdicionales();
				}
			} else {
				modificarRequisito();
				requisitoSeleccionado = false;
				tbReqTupa.unselect(tbReqTupa.getValue());
			}
		} else if (event.getSource() == this.btnAgregarPagos) {
			if (!pagoSeleccionado) {
				if (esNuevo) {
					agregarNuevosPagos();
				} else {
					agregarPagosActualizar();
				}
			} else {
				modificarPago();
				requisitoSeleccionado = false;
				tbReqTupa.unselect(tbReqTupa.getValue());
			}
		} else if (event.getSource() == this.btnQuitar) {
			if (requisitoSeleccionado) {
				if (esNuevo) {
					quitarRequisitos();
				} else {
					quitarRequisitosActualizar();
				}
				requisitoSeleccionado = false;
				tbReqTupa.unselect(tbReqTupa.getValue());
			} else {
				Notificacion.show(new Notificacion(
						"Debe seleccionar un elemento de la tabla",
						Constantes.MENSAJE.TYPE_WARNING));
			}
		} else if (event.getSource() == this.btnQuitarPago) {
			if (pagoSeleccionado) {
				if (esNuevo) {
					quitarPago();
				} else {
					quitarPagoActualizar();
				}
				pagoSeleccionado = false;
				tbPagos.unselect(tbPagos.getValue());
			} else {
				Notificacion.show(new Notificacion(
						"Debe seleccionar un elemento de la tabla",
						Constantes.MENSAJE.TYPE_WARNING));
			}
		} else if (event.getSource() == this.btnEliminar) {
			if (!confirmacion) {
				Window ventana = SigeUtil.generarBuscador(new Window(),
						"INGRESAR MOTIVO", "360", "260");
				ventana.setContent(new PanelMotivoObservacion(ventana, this,
						Constantes.TIPO_OPERACION.ELIMINACION,
						(tramiteColumnLenghts.get("motivomodifica"))));
				UI.getCurrent().addWindow(ventana);
				return;
			}
			ConfirmDialog.show(UI.getCurrent(), "Confirmación",
					"¿Desea elminar el Trámite?", "Aceptar", "Cancelar",
					new ConfirmDialog.Listener() {
						private static final long serialVersionUID = 1L;

						public void onClose(ConfirmDialog dialog) {
							if (dialog.isConfirmed()) {
								eliminarTipoTramite();
								resetearFormulario();
								Notificacion
										.show(new Notificacion(
												"Se elimin&oacute; el tr&aacute;mite con &eacute;xito",
												Constantes.MENSAJE.TYPE_SUCCES));
							}
						}
					});
		} else if (event.getSource() == this.btnImprimir) {
			Window ventana = SigeUtil.generarBuscador(new Window(), "IMPRIMIR",
					"800px", "550px");
			Map<String, Object> parametros = new HashMap<String, Object>();
			parametros.put("tipoTramiteId", tipoTramiteObtenido.getId());
			ventana.setContent(new PDFVizualizador(this, permiso, parametros,
					null, "TipoTramiteImprimir", null));
			UI.getCurrent().addWindow(ventana);
		}
	}

	public void guardarTipoTramite() {
		tipoTramite = new TipoTramite();
		tipoTramite.setCodigocorrel(obtenerCodigoCorrelativo());
		tipoTramite.setCodigoTipoTramite(txtAnio.getValue().toString()
				+ obtenerCodigoCorrelativo().trim());
		tipoTramite.setAnio(this.txtAnio.getValue().toString());
		tipoTramite
				.setNombre(txtANombre.getValue().toLowerCase().toUpperCase());
		tipoTramite.setTupa((chkTupa.getValue()) ? "T" : "N");
		tipoTramite.setTipoAten(Integer.parseInt(this.txtTipoAtencion
				.getValue().toString()));
		if (!chkTupa.getValue()) {
			tipoTramiteService.crear(tipoTramite);
		} else {
			tupa = new Tupa();
			tupa.setCodigoDependencia(dependenciaObtenida.getId().intValue());
			tupa.setTipoTramite(tipoTramite);
			List<RequisitoTupa> requisitosTupaGuardar = new ArrayList<RequisitoTupa>();
			for (Object id : tbReqTupa.getItemIds()) {
				requisitoTupa = new RequisitoTupa();
				Item item = tbReqTupa.getItem(id);
				requisitoTupa.setItem(Integer.parseInt(item
						.getItemProperty("item").getValue().toString()));
				requisitoTupa.setDescripcion(item.getItemProperty("desc")
						.getValue().toString().toUpperCase());
				requisitoTupa.setFedatear(Boolean.parseBoolean(item
						.getItemProperty("fedatear").getValue().toString()));
				requisitoTupa.setTupa(tupa);
				requisitosTupaGuardar.add(requisitoTupa);
			}

			List<PagosTupa> pagosTupaGuardar = new ArrayList<PagosTupa>();
			for (Object id : tbPagos.getItemIds()) {
				pagoTupa = new PagosTupa();
				Item item = tbPagos.getItem(id);
				pagoTupa.setDescripcion(item.getItemProperty("descripcion")
						.getValue().toString().toUpperCase());
				pagoTupa.setItem(Integer.parseInt(item.getItemProperty("item")
						.getValue().toString()));
				pagoTupa.setCosto(new BigDecimal(item.getItemProperty("costo")
						.getValue().toString()));
				pagoTupa.setTupaPago(tupa);
				pagosTupaGuardar.add(pagoTupa);
			}
			tupaService.GuardarTupa(tipoTramite, tupa, requisitosTupaGuardar,
					pagosTupaGuardar);
		}
	}

	public void actualizarTipoTramite() {
		if (tipoTramiteObtenido.getTupa().equalsIgnoreCase("N")) {
			tipoTramiteObtenido.setTipoAten(Integer.parseInt(txtTipoAtencion
					.getValue().toString()));
			tipoTramiteObtenido.setNombre(txtANombre.getValue().toString()
					.toUpperCase());
			tipoTramiteObtenido.setMotivoModificacion(this.motivo);
			tipoTramiteService.actualizar(tipoTramiteObtenido);
		} else {
			tipoTramiteObtenido.setTipoAten(Integer.parseInt(txtTipoAtencion
					.getValue().toString()));
			tipoTramiteObtenido.setNombre(txtANombre.getValue().toString()
					.toUpperCase());
			tipoTramiteObtenido.setMotivoModificacion(this.motivo);
			tupaObtenida.setCodigoDependencia(dependenciaObtenida.getId()
					.intValue());
			for (RequisitoTupa rt : lsRequisitosObtenido) {
				rt.setEstado(Boolean.FALSE);
				rt.setMotivoModificacion(this.motivo);
				requisitoTupaService.actualizar(rt);
			}
			for (PagosTupa pt : lsPagosTupaObtenido) {
				pt.setEstado(Boolean.FALSE);
				pt.setMotivoModificacion(this.motivo);
				pagosTupaService.actualizar(pt);
			}
			List<PagosTupa> pagosTupaActualizar = new ArrayList<PagosTupa>();
			List<RequisitoTupa> requisitoTupaActualizar = new ArrayList<RequisitoTupa>();
			for (Object id : tbReqTupa.getItemIds()) {
				Item item = tbReqTupa.getItem(id);
				requisitoTupa = new RequisitoTupa();
				if (item.getItemProperty("id").getValue() != null) {
					requisitoTupa = requisitoTupaService.obtener(Long
							.parseLong(item.getItemProperty("id").getValue()
									.toString()));
					requisitoTupa.setDescripcion(item.getItemProperty("desc")
							.getValue().toString());
					requisitoTupa.setItem(Integer.parseInt(item
							.getItemProperty("item").getValue().toString()));
					requisitoTupa
							.setFedatear(Boolean.parseBoolean(item
									.getItemProperty("fedatear").getValue()
									.toString()));
					requisitoTupa.setEstado(Boolean.TRUE);
					requisitoTupa.setMotivoModificacion(this.motivo);
					requisitoTupaActualizar.add(requisitoTupa);
				} else {
					requisitoTupa.setItem(Integer.parseInt(item
							.getItemProperty("item").getValue().toString()));
					requisitoTupa.setDescripcion(item.getItemProperty("desc")
							.getValue().toString());
					requisitoTupa
							.setFedatear(Boolean.parseBoolean(item
									.getItemProperty("fedatear").getValue()
									.toString()));
					requisitoTupa.setTupa(tupaObtenida);
					requisitoTupa.setMotivoModificacion(this.motivo);
					requisitoTupaService.crear(requisitoTupa);
				}
			}
			for (Object id : tbPagos.getItemIds()) {
				Item item = tbPagos.getItem(id);
				pagoTupa = new PagosTupa();
				if (item.getItemProperty("id").getValue() != null) {
					pagoTupa = pagosTupaService.obtener(Long.parseLong(item
							.getItemProperty("id").getValue().toString()));
					pagoTupa.setItem(Integer.parseInt(item
							.getItemProperty("item").getValue().toString()));
					pagoTupa.setDescripcion(item.getItemProperty("descripcion")
							.getValue().toString());
					pagoTupa.setCosto(new BigDecimal(item
							.getItemProperty("costo").getValue().toString()));
					pagoTupa.setEstado(Boolean.TRUE);
					pagoTupa.setMotivoModificacion(this.motivo);
					pagosTupaActualizar.add(pagoTupa);
				} else {
					pagoTupa.setItem(Integer.parseInt(item
							.getItemProperty("item").getValue().toString()));
					pagoTupa.setDescripcion(item.getItemProperty("descripcion")
							.getValue().toString());
					pagoTupa.setCosto(new BigDecimal(item
							.getItemProperty("costo").getValue().toString()));
					pagoTupa.setTupaPago(tupaObtenida);
					pagoTupa.setMotivoModificacion(this.motivo);
					pagosTupaService.crear(pagoTupa);
				}
			}
			tupaService.ActualizarTupa(tipoTramiteObtenido, tupaObtenida,
					requisitoTupaActualizar, pagosTupaActualizar);
		}
	}

	@SuppressWarnings("unchecked")
	public void modificarPago() {
		List<PagosTupa> pagosTupaNuevo = new ArrayList<PagosTupa>();
		String descripcion = txtADescripcionPago.getValue().toString()
				.toUpperCase();
		BigDecimal costo = new BigDecimal(txtCostoPagos.getValue().toString());
		for (Object id : tbPagos.getItemIds()) {
			Item item = tbPagos.getItem(id);
			pagoTupa = new PagosTupa();
			if (item.getItemProperty("id").getValue() != null) {
				pagoTupa.setId(Long.parseLong(item.getItemProperty("id")
						.getValue().toString()));
			}
			pagoTupa.setDescripcion(item.getItemProperty("descripcion")
					.getValue().toString());
			pagoTupa.setItem(Integer.parseInt(item.getItemProperty("item")
					.getValue().toString()));
			pagoTupa.setCosto(new BigDecimal(item.getItemProperty("costo")
					.getValue().toString()));
			if (pagoTupa.getItem().equals(codPagoSeleccionado)) {
				pagoTupa.setDescripcion(descripcion);
				pagoTupa.setCosto(costo);
			}
			pagosTupaNuevo.add(pagoTupa);
		}
		IndexedContainer contenedorPagos = (IndexedContainer) tbPagos
				.getContainerDataSource();
		contenedorPagos.removeAllItems();
		Integer nroItem = 1;
		for (int i = 0; i < pagosTupaNuevo.size(); i++) {
			Item item = contenedorPagos.addItem(i);
			item.getItemProperty("id").setValue(pagosTupaNuevo.get(i).getId());
			item.getItemProperty("item").setValue(nroItem++);
			item.getItemProperty("descripcion").setValue(
					pagosTupaNuevo.get(i).getDescripcion());
			item.getItemProperty("costo").setValue(
					pagosTupaNuevo.get(i).getCosto());

		}
		txtADescripcionPago.setValue("");
		txtCostoPagos.setValue("");

	}

	public void eliminarTipoTramite() {
		if (tipoTramiteObtenido.getTupa().equalsIgnoreCase("N")) {
			tipoTramiteObtenido.setEstado(Boolean.FALSE);
			tipoTramiteObtenido.setMotivoModificacion(this.motivo);
			tipoTramiteService.actualizar(tipoTramiteObtenido);
		} else {
			tipoTramiteObtenido.setEstado(Boolean.FALSE);
			tupaObtenida.setEstado(Boolean.FALSE);
			tupaObtenida.setMotivoModificacion(this.motivo);
			for (RequisitoTupa rt : lsRequisitosObtenido) {
				rt.setEstado(Boolean.FALSE);
				rt.setMotivoModificacion(this.motivo);
			}
			for (PagosTupa pt : lsPagosTupaObtenido) {
				pt.setEstado(Boolean.FALSE);
				pt.setMotivoModificacion(this.motivo);
			}
			tupaService.ActualizarTupa(tipoTramiteObtenido, tupaObtenida,
					lsRequisitosObtenido, lsPagosTupaObtenido);
		}
	}

	@SuppressWarnings("unchecked")
	public void quitarPagoActualizar() {
		List<PagosTupa> pagosTupaNuevo = new ArrayList<PagosTupa>();
		for (Object id : tbPagos.getItemIds()) {
			Item item = tbPagos.getItem(id);
			pagoTupa = new PagosTupa();
			if (item.getItemProperty("id").getValue() != null) {
				pagoTupa.setId(Long.parseLong(item.getItemProperty("id")
						.getValue().toString()));
			}
			pagoTupa.setDescripcion(item.getItemProperty("descripcion")
					.getValue().toString());
			pagoTupa.setItem(Integer.parseInt(item.getItemProperty("item")
					.getValue().toString()));
			pagoTupa.setCosto(new BigDecimal(item.getItemProperty("costo")
					.getValue().toString()));
			if (!codPagoSeleccionado.equals(pagoTupa.getItem())) {
				pagosTupaNuevo.add(pagoTupa);
			}
		}
		IndexedContainer contenedorPagos = (IndexedContainer) tbPagos
				.getContainerDataSource();
		contenedorPagos.removeAllItems();
		Integer nroItem = 1;
		for (int i = 0; i < pagosTupaNuevo.size(); i++) {
			Item item = contenedorPagos.addItem(i);
			item.getItemProperty("id").setValue(pagosTupaNuevo.get(i).getId());
			item.getItemProperty("item").setValue(nroItem++);
			item.getItemProperty("descripcion").setValue(
					pagosTupaNuevo.get(i).getDescripcion());
			item.getItemProperty("costo").setValue(
					pagosTupaNuevo.get(i).getCosto());

		}
		txtADescripcionPago.setValue("");
		txtCostoPagos.setValue("");
	}

	@SuppressWarnings("unchecked")
	public void modificarRequisito() {
		List<RequisitoTupa> requisitosTupaNuevo = new ArrayList<RequisitoTupa>();
		String descripcion = txtADescripcion.getValue().toString()
				.toUpperCase();
		Boolean fedatear = chkFedatear.getValue();
		for (Object id : tbReqTupa.getItemIds()) {
			Item item = tbReqTupa.getItem(id);
			requisitoTupa = new RequisitoTupa();
			requisitoTupa.setDescripcion(item.getItemProperty("desc")
					.getValue().toString());
			if (item.getItemProperty("id").getValue() != null) {
				requisitoTupa.setId(Long.parseLong(item.getItemProperty("id")
						.getValue().toString()));
			}
			requisitoTupa.setItem(Integer.parseInt(item.getItemProperty("item")
					.getValue().toString()));
			requisitoTupa.setFedatear(Boolean.parseBoolean((item
					.getItemProperty("fedatear").toString())));
			if (requisitoTupa.getItem().equals(codRequisitoSeleccionado)) {
				requisitoTupa.setDescripcion(descripcion);
				requisitoTupa.setFedatear(fedatear);
			}
			requisitosTupaNuevo.add(requisitoTupa);
		}
		IndexedContainer contenedorRequisitos = (IndexedContainer) tbReqTupa
				.getContainerDataSource();
		contenedorRequisitos.removeAllItems();
		Integer nroItem = 1;
		for (int i = 0; i < requisitosTupaNuevo.size(); i++) {
			Item item = contenedorRequisitos.addItem(i);
			item.getItemProperty("id").setValue(
					requisitosTupaNuevo.get(i).getId());
			item.getItemProperty("item").setValue(nroItem++);
			item.getItemProperty("desc").setValue(
					requisitosTupaNuevo.get(i).getDescripcion());
			item.getItemProperty("fedatear").setValue(
					requisitosTupaNuevo.get(i).getFedatear());
		}
		this.txtADescripcion.setValue("");
		this.chkFedatear.setValue(false);
	}

	@SuppressWarnings("unchecked")
	public void quitarPago() {
		List<PagosTupa> pagosTupaNuevo = new ArrayList<PagosTupa>();
		for (Object id : tbPagos.getItemIds()) {
			Item item = tbPagos.getItem(id);
			pagoTupa = new PagosTupa();
			pagoTupa.setDescripcion(item.getItemProperty("descripcion")
					.getValue().toString());
			pagoTupa.setItem(Integer.parseInt(item.getItemProperty("item")
					.getValue().toString()));
			pagoTupa.setCosto(new BigDecimal(item.getItemProperty("costo")
					.getValue().toString()));
			if (!codPagoSeleccionado.equals(pagoTupa.getItem())) {
				pagosTupaNuevo.add(pagoTupa);
			}
		}
		IndexedContainer contenedorPagos = (IndexedContainer) tbPagos
				.getContainerDataSource();
		contenedorPagos.removeAllItems();
		Integer nroItem = 1;
		for (int i = 0; i < pagosTupaNuevo.size(); i++) {
			Item item = contenedorPagos.addItem(i);
			item.getItemProperty("item").setValue(nroItem++);
			item.getItemProperty("descripcion").setValue(
					pagosTupaNuevo.get(i).getDescripcion());
			item.getItemProperty("costo").setValue(
					pagosTupaNuevo.get(i).getCosto());

		}
		txtADescripcionPago.setValue("");
		txtCostoPagos.setValue("");
	}

	@SuppressWarnings("unchecked")
	public void quitarRequisitosActualizar() {
		List<RequisitoTupa> requisitosTupaNuevo = new ArrayList<RequisitoTupa>();

		for (Object id : tbReqTupa.getItemIds()) {
			Item item = tbReqTupa.getItem(id);
			requisitoTupa = new RequisitoTupa();
			requisitoTupa.setDescripcion(item.getItemProperty("desc")
					.getValue().toString());
			if (item.getItemProperty("id").getValue() != null) {
				requisitoTupa.setId(Long.parseLong(item.getItemProperty("id")
						.getValue().toString()));
			}
			requisitoTupa.setItem(Integer.parseInt(item.getItemProperty("item")
					.getValue().toString()));
			requisitoTupa.setFedatear(Boolean.parseBoolean((item
					.getItemProperty("fedatear").toString())));
			if (!requisitoTupa.getItem().equals(codRequisitoSeleccionado)) {
				requisitosTupaNuevo.add(requisitoTupa);
			}
		}
		IndexedContainer contenedorRequisitos = (IndexedContainer) tbReqTupa
				.getContainerDataSource();
		contenedorRequisitos.removeAllItems();
		Integer nroItem = 1;
		for (int i = 0; i < requisitosTupaNuevo.size(); i++) {
			Item item = contenedorRequisitos.addItem(i);
			item.getItemProperty("id").setValue(
					requisitosTupaNuevo.get(i).getId());
			item.getItemProperty("item").setValue(nroItem++);
			item.getItemProperty("desc").setValue(
					requisitosTupaNuevo.get(i).getDescripcion());
			item.getItemProperty("fedatear").setValue(
					requisitosTupaNuevo.get(i).getFedatear());
		}
		this.txtADescripcion.setValue("");
		this.chkFedatear.setValue(false);
	}

	@SuppressWarnings("unchecked")
	public void quitarRequisitos() {
		List<RequisitoTupa> requisitosTupaNuevo = new ArrayList<RequisitoTupa>();

		for (Object id : tbReqTupa.getItemIds()) {
			Item item = tbReqTupa.getItem(id);
			requisitoTupa = new RequisitoTupa();
			requisitoTupa.setDescripcion(item.getItemProperty("desc")
					.getValue().toString());
			requisitoTupa.setItem(Integer.parseInt(item.getItemProperty("item")
					.getValue().toString()));
			requisitoTupa.setFedatear(Boolean.parseBoolean((item
					.getItemProperty("fedatear").toString())));
			if (!requisitoTupa.getItem().equals(codRequisitoSeleccionado)) {
				requisitosTupaNuevo.add(requisitoTupa);
			}
		}
		IndexedContainer contenedorRequisitos = (IndexedContainer) tbReqTupa
				.getContainerDataSource();
		contenedorRequisitos.removeAllItems();
		Integer nroItem = 1;
		for (int i = 0; i < requisitosTupaNuevo.size(); i++) {
			Item item = contenedorRequisitos.addItem(i);
			item.getItemProperty("item").setValue(nroItem++);
			item.getItemProperty("desc").setValue(
					requisitosTupaNuevo.get(i).getDescripcion());
			item.getItemProperty("fedatear").setValue(
					requisitosTupaNuevo.get(i).getFedatear());
		}
		this.txtADescripcion.setValue("");
		this.chkFedatear.setValue(false);

	}

	@SuppressWarnings("unchecked")
	public void agregarPagosActualizar() {
		pagosTupa.clear();
		if (txtADescripcionPago.getValue().toString().equals("")
				|| txtCostoPagos.getValue().toString().equals("")) {
			Notificacion.show(new Notificacion("Debe rellenar los campos",
					Constantes.MENSAJE.TYPE_WARNING));
		} else {
			if (tbPagos.size() > 0) {
				for (Object id : tbPagos.getItemIds()) {
					Item item = tbPagos.getItem(id);
					pagoTupa = new PagosTupa();
					if (item.getItemProperty("id").getValue() != null) {
						pagoTupa.setId(Long.parseLong(item
								.getItemProperty("id").getValue().toString()));
					}
					pagoTupa.setDescripcion(item.getItemProperty("descripcion")
							.getValue().toString());
					pagoTupa.setCosto(new BigDecimal(item
							.getItemProperty("costo").getValue().toString()));
					pagosTupa.add(pagoTupa);
				}

			}
			IndexedContainer contenedorPagos = (IndexedContainer) tbPagos
					.getContainerDataSource();
			contenedorPagos.removeAllItems();
			String descripcion = txtADescripcionPago.getValue().toString()
					.toUpperCase();
			BigDecimal costo = new BigDecimal(txtCostoPagos.getValue()
					.toString());
			pagoTupa = new PagosTupa();
			pagoTupa.setDescripcion(descripcion);
			pagoTupa.setCosto(costo);
			pagosTupa.add(pagoTupa);
			Integer nroItem = 1;
			for (int i = 0; i < pagosTupa.size(); i++) {
				Item item = contenedorPagos.addItem(i);
				item.getItemProperty("id").setValue(pagosTupa.get(i).getId());
				item.getItemProperty("item").setValue(nroItem++);
				item.getItemProperty("descripcion").setValue(
						pagosTupa.get(i).getDescripcion());
				item.getItemProperty("costo").setValue(
						pagosTupa.get(i).getCosto());

			}
			txtADescripcionPago.setValue("");
			txtCostoPagos.setValue("");
		}
	}

	@SuppressWarnings("unchecked")
	public void agregarNuevosPagos() {
		pagosTupa.clear();
		if (txtADescripcionPago.getValue().toString().equals("")
				|| txtCostoPagos.getValue().toString().equals("")) {
			Notificacion.show(new Notificacion("Debe rellenar los campos",
					Constantes.MENSAJE.TYPE_WARNING));
		} else {
			if (tbPagos.size() > 0) {
				for (Object id : tbPagos.getItemIds()) {
					Item item = tbPagos.getItem(id);
					pagoTupa = new PagosTupa();
					pagoTupa.setDescripcion(item.getItemProperty("descripcion")
							.getValue().toString());
					pagoTupa.setCosto(new BigDecimal(item
							.getItemProperty("costo").getValue().toString()));
					pagosTupa.add(pagoTupa);
				}

			}
			IndexedContainer contenedorPagos = (IndexedContainer) tbPagos
					.getContainerDataSource();
			contenedorPagos.removeAllItems();
			String descripcion = txtADescripcionPago.getValue().toString()
					.toUpperCase();
			BigDecimal costo = new BigDecimal(txtCostoPagos.getValue()
					.toString());
			pagoTupa = new PagosTupa();
			pagoTupa.setDescripcion(descripcion);
			pagoTupa.setCosto(costo);
			pagosTupa.add(pagoTupa);
			Integer nroItem = 1;
			for (int i = 0; i < pagosTupa.size(); i++) {
				Item item = contenedorPagos.addItem(i);
				item.getItemProperty("item").setValue(nroItem++);
				item.getItemProperty("descripcion").setValue(
						pagosTupa.get(i).getDescripcion());
				item.getItemProperty("costo").setValue(
						pagosTupa.get(i).getCosto());

			}
			txtADescripcionPago.setValue("");
			txtCostoPagos.setValue("");
		}
	}

	@SuppressWarnings("unchecked")
	public void agregarRequisitosAdicionales() {
		requisitosTupa.clear();
		String descripcion = txtADescripcion.getValue().toString()
				.toUpperCase();
		if (descripcion.equals("") || descripcion == null) {
			Notificacion.show(new Notificacion("Debe colocar una descripción",
					Constantes.MENSAJE.TYPE_WARNING));
		} else {
			if (tbReqTupa.size() > 0) {
				for (Object id : tbReqTupa.getItemIds()) {
					Item item = tbReqTupa.getItem(id);
					requisitoTupa = new RequisitoTupa();
					if (item.getItemProperty("id").getValue() != null) {
						requisitoTupa.setId(Long.parseLong(item
								.getItemProperty("id").getValue().toString()));
					}
					requisitoTupa.setDescripcion(item.getItemProperty("desc")
							.getValue().toString());
					requisitoTupa.setFedatear(Boolean.parseBoolean((item
							.getItemProperty("fedatear").toString())));
					requisitosTupa.add(requisitoTupa);
				}
			}
			IndexedContainer contenedorRequisitos = (IndexedContainer) tbReqTupa
					.getContainerDataSource();
			contenedorRequisitos.removeAllItems();
			requisitoTupa = new RequisitoTupa();
			requisitoTupa.setDescripcion(descripcion);
			requisitoTupa.setFedatear(chkFedatear.getValue());
			requisitosTupa.add(requisitoTupa);
			Integer nroItem = 1;
			for (int i = 0; i < requisitosTupa.size(); i++) {
				Item item = contenedorRequisitos.addItem(i);
				item.getItemProperty("id").setValue(
						requisitosTupa.get(i).getId());
				item.getItemProperty("item").setValue(nroItem++);
				item.getItemProperty("desc").setValue(
						requisitosTupa.get(i).getDescripcion());
				item.getItemProperty("fedatear").setValue(
						requisitosTupa.get(i).getFedatear());
			}
			this.txtADescripcion.setValue("");
			this.chkFedatear.setValue(false);
		}
	}

	@SuppressWarnings("unchecked")
	public void agregarNuevosRequisitos() {
		requisitosTupa.clear();
		String descripcion = txtADescripcion.getValue().toString()
				.toUpperCase();
		if (descripcion.equals("") || descripcion == null) {
			Notificacion.show(new Notificacion("Debe colocar una descripción",
					Constantes.MENSAJE.TYPE_WARNING));
		} else {
			if (tbReqTupa.size() > 0) {
				for (Object id : tbReqTupa.getItemIds()) {
					Item item = tbReqTupa.getItem(id);
					requisitoTupa = new RequisitoTupa();
					requisitoTupa.setDescripcion(item.getItemProperty("desc")
							.getValue().toString());
					requisitoTupa.setFedatear(Boolean.parseBoolean((item
							.getItemProperty("fedatear").toString())));
					requisitosTupa.add(requisitoTupa);
				}
			}
			IndexedContainer contenedorRequisitos = (IndexedContainer) tbReqTupa
					.getContainerDataSource();
			contenedorRequisitos.removeAllItems();
			requisitoTupa = new RequisitoTupa();
			requisitoTupa.setDescripcion(descripcion);
			requisitoTupa.setFedatear(chkFedatear.getValue());
			requisitosTupa.add(requisitoTupa);
			Integer nroItem = 1;
			for (int i = 0; i < requisitosTupa.size(); i++) {
				Item item = contenedorRequisitos.addItem(i);
				item.getItemProperty("item").setValue(nroItem++);
				item.getItemProperty("desc").setValue(
						requisitosTupa.get(i).getDescripcion());
				item.getItemProperty("fedatear").setValue(
						requisitosTupa.get(i).getFedatear());
			}
			this.txtADescripcion.setValue("");
			this.chkFedatear.setValue(false);
		}
	}

	@SuppressWarnings("unchecked")
	public void obtenerDetalleTramite(String codTramite) {
		desbloquearFormulario();
		tipoTramiteObtenido = tipoTramiteService
				.obtenerTipoTramitePorCod(codTramite);
		esNuevo = false;
		btnGuardar.setVisible(permiso.getModificar());
		btnGuardar.setCaption("Actualizar");
		btnGuardar.setDescription("Actualizar Tipo Tr&aacute;mite");
		btnEliminar.setEnabled(true);
		btnCancelar.setVisible(permiso.getModificar());
		btnCancelar.setEnabled(true);
		btnImprimir.setEnabled(true);
		btnImprimir.setVisible(permiso.getImprimir());
		btnGuardar.setEnabled(true);
		btnNuevo.setEnabled(false);
		txtAnio.setValue(tipoTramiteObtenido.getAnio().toString());
		Boolean esTupa = (tipoTramiteObtenido.getTupa().equalsIgnoreCase("T")) ? Boolean.TRUE
				: Boolean.FALSE;
		chkTupa.setValue(esTupa);
		chkTupa.setEnabled(false);
		txtTipoAtencion.setValue(tipoTramiteObtenido.getTipoAten() + "");
		txtANombre.setValue(tipoTramiteObtenido.getNombre().trim());
		if (tipoTramiteObtenido.getTupa().equals("T")) {
			tabRequisitos.setVisible(true);
			tabPagos.setVisible(true);
			tupaObtenida = tupaService.obtenerTupaPorTramite(codTramite);
			dependenciaObtenida = dependenciaService.obtener(new Long(
					tupaObtenida.getCodigoDependencia()));
			txtDependencia2.setValue(dependenciaObtenida.getNombre());
			lsRequisitosObtenido = requisitoTupaService
					.obtenerRequisitosPorTramite(codTramite);
			IndexedContainer contenedor = (IndexedContainer) tbReqTupa
					.getContainerDataSource();
			contenedor.removeAllItems();
			for (int i = 0; i < lsRequisitosObtenido.size(); i++) {
				Item item = contenedor.addItem(i);
				item.getItemProperty("id").setValue(
						lsRequisitosObtenido.get(i).getId());
				item.getItemProperty("item").setValue(
						lsRequisitosObtenido.get(i).getItem());
				item.getItemProperty("desc").setValue(
						lsRequisitosObtenido.get(i).getDescripcion());
				item.getItemProperty("fedatear").setValue(
						lsRequisitosObtenido.get(i).getFedatear());
			}
			lsPagosTupaObtenido = pagosTupaService
					.obtenerPagosPorTramite(codTramite);
			IndexedContainer contenedorPagos = (IndexedContainer) tbPagos
					.getContainerDataSource();
			contenedorPagos.removeAllItems();

			for (int i = 0; i < lsPagosTupaObtenido.size(); i++) {
				Item item = contenedorPagos.addItem(i);
				item.getItemProperty("item").setValue(
						lsPagosTupaObtenido.get(i).getItem());
				item.getItemProperty("descripcion").setValue(
						lsPagosTupaObtenido.get(i).getDescripcion());
				item.getItemProperty("costo").setValue(
						lsPagosTupaObtenido.get(i).getCosto());
				item.getItemProperty("id").setValue(
						lsPagosTupaObtenido.get(i).getId());
			}
		} else {
			tabRequisitos.setVisible(false);
			tabPagos.setVisible(false);
		}

	}

	public String obtenerCodigoCorrelativo() {
		List<TipoTramite> lstipoTramite = tipoTramiteService
				.obtenerUltimoRegistro();
		Long idUltimo = 0L;
		if (lstipoTramite.size() > 0) {
			idUltimo = Long.parseLong(lstipoTramite.get(0).getCodigocorrel());

		}
		idUltimo = idUltimo + 1L;
		String ultCorrelativo = "000" + idUltimo;
		ultCorrelativo = ultCorrelativo.substring(ultCorrelativo.length() - 4,
				ultCorrelativo.length());
		return ultCorrelativo;
	}

	public void obtenerDependencia(Long id) {
		dependenciaObtenida = dependenciaService.obtener(id);
		logger.info("Nombre Dependencia" + dependenciaObtenida.getNombre());
		this.txtDependencia2.setValue(dependenciaObtenida.getNombre().trim());

	}

	public void nuevoRegistro() {
		requisitoSeleccionado = false;
		pagoSeleccionado = false;
		tabSheet_1.setSelectedTab(tabDetalleTramite);
		esNuevo = true;
		this.chkTupa.setEnabled(true);
		this.tabPagos.setEnabled(true);
		this.tabRequisitos.setEnabled(true);
		this.txtADescripcion.setEnabled(true);
		this.txtANombre.setEnabled(true);
		this.txtTipoAtencion.setEnabled(true);
		this.txtAnio.setEnabled(false);
		this.txtDependencia2.setEnabled(false);
		this.btnBuscarDependencia.setEnabled(true);
		this.btnGuardar.setEnabled(true);
		this.btnEliminar.setEnabled(false);
		this.btnImprimir.setEnabled(true);
		this.btnNuevo.setEnabled(false);
		this.btnBuscar.setEnabled(true);
		this.btnCancelar.setEnabled(true);
		this.chkTupa.setValue(Boolean.TRUE);
		limparFormulario();
		this.btnCancelar.setVisible(permiso.getNuevo());
		this.btnGuardar.setVisible(permiso.getNuevo());
	}

	public void limparFormulario() {
		txtANombre.setValue("");
		txtADescripcion.setValue("");
		txtADescripcionPago.setValue("");
		tbReqTupa.removeAllItems();
		tbPagos.removeAllItems();
		tbReqTupa.clear();
		tbPagos.clear();
		txtTipoAtencion.setValue("");
		txtDependencia2.setValue("");
	}

	public void resetearFormulario() {
		requisitoSeleccionado = false;
		pagoSeleccionado = false;
		tabSheet_1.setSelectedTab(tabDetalleTramite);
		esNuevo = false;
		this.tabPagos.setEnabled(false);
		this.tabRequisitos.setEnabled(false);
		this.chkTupa.setEnabled(false);
		this.chkTupa.setValue(Boolean.TRUE);
		this.txtADescripcion.setEnabled(false);
		this.txtTipoAtencion.setEnabled(false);
		this.txtANombre.setEnabled(false);
		this.txtAnio.setEnabled(false);
		this.txtDependencia2.setEnabled(false);
		this.btnBuscarDependencia.setEnabled(false);
		this.btnGuardar.setEnabled(false);
		this.btnEliminar.setEnabled(false);
		this.btnImprimir.setEnabled(false);
		this.btnNuevo.setEnabled(true);
		this.btnBuscar.setEnabled(true);
		this.btnCancelar.setEnabled(false);
		this.btnGuardar.setCaption("Guardar");
		this.btnGuardar.setDescription("Registrar Trámite");
		limparFormulario();
	}

	public void desbloquearFormulario() {
		this.txtANombre.setEnabled(true);
		this.txtTipoAtencion.setEnabled(true);
		this.btnBuscarDependencia.setEnabled(true);
		tabRequisitos.setEnabled(true);
		tabPagos.setEnabled(true);
		txtADescripcion.setEnabled(true);
		txtADescripcionPago.setEnabled(true);
		txtCostoPagos.setEnabled(true);
		chkFedatear.setEnabled(true);
	}

	@AutoGenerated
	private AbsoluteLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");

		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");

		// tabSheet_1
		tabSheet_1 = buildTabSheet_1();
		mainLayout.addComponent(tabSheet_1, "top:12.0px;left:10.0px;");

		// btnBuscar
		btnBuscar = new Button();
		btnBuscar.setCaption("Buscar");
		btnBuscar.setIcon(new ThemeResource("images/botones/find.png"));
		btnBuscar.setImmediate(true);
		btnBuscar.setDescription("Buscar Tipo de Tramite");
		btnBuscar.setWidth("110px");
		btnBuscar.setHeight("-1px");
		mainLayout.addComponent(btnBuscar, "top:250.0px;left:475.0px;");

		// btnGuardar
		btnGuardar = new Button();
		btnGuardar.setCaption("Guardar");
		btnGuardar.setIcon(new ThemeResource("images/botones/save.png"));
		btnGuardar.setImmediate(true);
		btnGuardar.setDescription("Registrar Tipo Tr&aacute;mite");
		btnGuardar.setWidth("110px");
		btnGuardar.setHeight("-1px");
		mainLayout.addComponent(btnGuardar, "top:250.0px;left:135.0px;");

		// btnEliminar
		btnEliminar = new Button();
		btnEliminar.setCaption("Eliminar");
		btnEliminar.setIcon(new ThemeResource("images/botones/delete.png"));
		btnEliminar.setImmediate(true);
		btnEliminar.setDescription("Eliminar Registro Tipo Tr&aacute;mite");
		btnEliminar.setWidth("110px");
		btnEliminar.setHeight("-1px");
		mainLayout.addComponent(btnEliminar, "top:250.0px;left:248.0px;");

		// btnCancelar
		btnCancelar = new Button();
		btnCancelar.setCaption("Cancelar");
		btnCancelar.setIcon(new ThemeResource("images/botones/undo.png"));
		btnCancelar.setImmediate(true);
		btnCancelar.setDescription("Cancelar los Cambios");
		btnCancelar.setWidth("110px");
		btnCancelar.setHeight("26px");
		mainLayout.addComponent(btnCancelar, "top:250.0px;left:361.0px;");

		// btnNuevo
		btnNuevo = new Button();
		btnNuevo.setCaption("Nuevo");
		btnNuevo.setIcon(new ThemeResource("images/botones/new.png"));
		btnNuevo.setImmediate(true);
		btnNuevo.setDescription("Ingresar Nuevo ramite");
		btnNuevo.setWidth("110px");
		btnNuevo.setHeight("-1px");
		mainLayout.addComponent(btnNuevo, "top:250.0px;left:23.0px;");

		// btnImprimir
		btnImprimir = new Button();
		btnImprimir.setCaption("Imprimir");
		btnImprimir.setIcon(new ThemeResource("images/botones/print.png"));
		btnImprimir.setImmediate(true);
		btnImprimir.setWidth("-1px");
		btnImprimir.setHeight("-1px");
		mainLayout.addComponent(btnImprimir, "top:250.0px;left:589.0px;");

		return mainLayout;
	}

	@AutoGenerated
	private TabSheet buildTabSheet_1() {
		// common part: create layout
		tabSheet_1 = new TabSheet();
		tabSheet_1.setImmediate(true);
		tabSheet_1.setWidth("670px");
		tabSheet_1.setHeight("228px");

		// lytDetalleTramite
		lytDetalleTramite = buildLytDetalleTramite();
		tabSheet_1.addTab(lytDetalleTramite, "Datos del Tramite", null);

		// lytRequisitos
		lytRequisitos = buildLytRequisitos();
		tabSheet_1.addTab(lytRequisitos, "Requisitos", null);

		// lytPagos
		lytPagos = buildLytPagos();
		tabSheet_1.addTab(lytPagos, "Pagos", null);

		return tabSheet_1;
	}

	@AutoGenerated
	private AbsoluteLayout buildLytDetalleTramite() {
		// common part: create layout
		lytDetalleTramite = new AbsoluteLayout();
		lytDetalleTramite.setImmediate(false);
		lytDetalleTramite.setWidth("100.0%");
		lytDetalleTramite.setHeight("100.0%");

		// label_2
		label_2 = new Label();
		label_2.setImmediate(false);
		label_2.setWidth("-1px");
		label_2.setHeight("-1px");
		label_2.setValue("A&ntilde;o: ");
		lytDetalleTramite.addComponent(label_2, "top:16.0px;left:20.0px;");

		// label_3
		label_3 = new Label();
		label_3.setImmediate(false);
		label_3.setWidth("-1px");
		label_3.setHeight("20px");
		label_3.setValue("Nombre: ");
		lytDetalleTramite.addComponent(label_3, "top:51.0px;left:18.0px;");

		// chkTupa
		chkTupa = new CheckBox();
		chkTupa.setCaption("TUPA");
		chkTupa.setImmediate(false);
		chkTupa.setWidth("67px");
		chkTupa.setHeight("-1px");
		lytDetalleTramite.addComponent(chkTupa,
				"top:16.0px;bottom:16.0px;left:215.0px;");

		// txtAnio
		txtAnio = new TextField();
		txtAnio.setImmediate(false);
		txtAnio.setWidth("78px");
		txtAnio.setHeight("18px");
		lytDetalleTramite.addComponent(txtAnio, "top:16.0px;left:59.0px;");

		// txtANombre
		txtANombre = new TextArea();
		txtANombre.setImmediate(false);
		txtANombre.setWidth("100.0%");
		txtANombre.setHeight("65px");
		lytDetalleTramite.addComponent(txtANombre,
				"top:51.0px;right:71.0px;left:79.0px;");

		// label_6
		label_6 = new Label();
		label_6.setImmediate(false);
		label_6.setWidth("120px");
		label_6.setHeight("18px");
		label_6.setValue("Tiempo de Atenci&oacute;n: ");
		lytDetalleTramite.addComponent(label_6, "top:16.0px;left:319.0px;");

		// txtTipoAtencion
		txtTipoAtencion = new NumberField();
		txtTipoAtencion.setImmediate(false);
		txtTipoAtencion.setWidth("97px");
		txtTipoAtencion.setHeight("19px");
		lytDetalleTramite.addComponent(txtTipoAtencion,
				"top:16.0px;left:439.0px;");

		// label_1
		label_1 = new Label();
		label_1.setImmediate(false);
		label_1.setWidth("32px");
		label_1.setHeight("-1px");
		label_1.setValue("(d&iacute;as)");
		lytDetalleTramite.addComponent(label_1, "top:16.0px;right:87.0px;");

		// label_5
		label_5 = new Label();
		label_5.setImmediate(false);
		label_5.setWidth("91px");
		label_5.setHeight("18px");
		label_5.setValue("Dependencia: ");
		lytDetalleTramite.addComponent(label_5, "top:136.0px;left:9.0px;");

		// txtDependencia2
		txtDependencia2 = new TextField();
		txtDependencia2.setImmediate(false);
		txtDependencia2.setWidth("454px");
		txtDependencia2.setHeight("24px");
		lytDetalleTramite.addComponent(txtDependencia2,
				"top:132.0px;left:90.0px;");

		// btnBuscarDependencia
		btnBuscarDependencia = new Boton();
		btnBuscarDependencia.setIcon(new ThemeResource(
				"images/botones/find.png"));
		btnBuscarDependencia.setImmediate(false);
		btnBuscarDependencia.setDescription("Buscar Dependencias");
		btnBuscarDependencia.setWidth("45px");
		btnBuscarDependencia.setHeight("-1px");
		lytDetalleTramite.addComponent(btnBuscarDependencia,
				"top:132.0px;left:544.0px;");

		return lytDetalleTramite;
	}

	@AutoGenerated
	private AbsoluteLayout buildLytRequisitos() {
		// common part: create layout
		lytRequisitos = new AbsoluteLayout();
		lytRequisitos.setImmediate(false);
		lytRequisitos.setWidth("100.0%");
		lytRequisitos.setHeight("100.0%");

		// label_4
		label_4 = new Label();
		label_4.setImmediate(false);
		label_4.setWidth("-1px");
		label_4.setHeight("-1px");
		label_4.setValue("<b>Requisitos Tupa</b>");
		lytRequisitos.addComponent(label_4, "top:16.0px;left:9.0px;");

		// label_12
		label_12 = new Label();
		label_12.setImmediate(false);
		label_12.setWidth("-1px");
		label_12.setHeight("-1px");
		label_12.setValue("Descripci&oacute;n:");
		lytRequisitos.addComponent(label_12, "top:36.0px;left:29.0px;");

		// txtADescripcion
		txtADescripcion = new TextArea();
		txtADescripcion.setImmediate(false);
		txtADescripcion.setWidth("230px");
		txtADescripcion.setHeight("72px");
		lytRequisitos.addComponent(txtADescripcion, "top:56.0px;left:29.0px;");

		// chkFedatear
		chkFedatear = new CheckBox();
		chkFedatear.setCaption("Fedatear");
		chkFedatear.setImmediate(false);
		chkFedatear.setWidth("80px");
		chkFedatear.setHeight("-1px");
		lytRequisitos.addComponent(chkFedatear, "top:130.0px;left:29.0px;");

		// btnAgregr
		btnAgregr = new Boton();
		btnAgregr.setIcon(new ThemeResource("images/botones/add.png"));
		btnAgregr.setImmediate(false);
		btnAgregr.setDescription("Agregar Requisito");
		btnAgregr.setWidth("35px");
		btnAgregr.setHeight("-1px");
		lytRequisitos.addComponent(btnAgregr, "top:130.0px;left:189.0px;");

		// btnQuitar
		btnQuitar = new Boton();
		btnQuitar.setIcon(new ThemeResource("images/botones/remove.png"));
		btnQuitar.setImmediate(false);
		btnQuitar.setDescription("Quitar Requisito");
		btnQuitar.setWidth("35px");
		btnQuitar.setHeight("-1px");
		lytRequisitos.addComponent(btnQuitar, "top:130.0px;left:224.0px;");

		// tbReqTupa
		tbReqTupa = new Table();
		tbReqTupa.setImmediate(false);
		tbReqTupa.setWidth("369px");
		tbReqTupa.setHeight("140px");
		lytRequisitos.addComponent(tbReqTupa, "top:36.0px;left:280.0px;");

		return lytRequisitos;
	}

	@AutoGenerated
	private AbsoluteLayout buildLytPagos() {
		// common part: create layout
		lytPagos = new AbsoluteLayout();
		lytPagos.setImmediate(false);
		lytPagos.setWidth("100.0%");
		lytPagos.setHeight("100.0%");

		// label_13
		label_13 = new Label();
		label_13.setImmediate(false);
		label_13.setWidth("-1px");
		label_13.setHeight("-1px");
		label_13.setValue("<b>Derechos de Pago</b>");
		lytPagos.addComponent(label_13, "top:5.0px;left:9.0px;");

		// label_14
		label_14 = new Label();
		label_14.setImmediate(false);
		label_14.setWidth("-1px");
		label_14.setHeight("-1px");
		label_14.setValue("Descripci&oacute;n:");
		lytPagos.addComponent(label_14, "top:23.0px;left:19.0px;");

		// txtADescripcionPago
		txtADescripcionPago = new TextArea();
		txtADescripcionPago.setImmediate(false);
		txtADescripcionPago.setWidth("270px");
		txtADescripcionPago.setHeight("-1px");
		lytPagos.addComponent(txtADescripcionPago, "top:41.0px;left:19.0px;");

		// btnAgregarPagos
		btnAgregarPagos = new Boton();
		btnAgregarPagos.setIcon(new ThemeResource("images/botones/add.png"));
		btnAgregarPagos.setImmediate(false);
		btnAgregarPagos.setDescription("Agregar Pagos");
		btnAgregarPagos.setWidth("35px");
		btnAgregarPagos.setHeight("-1px");
		lytPagos.addComponent(btnAgregarPagos, "top:123.0px;left:214.0px;");

		// btnQuitarPago
		btnQuitarPago = new Boton();
		btnQuitarPago.setIcon(new ThemeResource("images/botones/remove.png"));
		btnQuitarPago.setImmediate(false);
		btnQuitarPago.setDescription("Quitar Pago");
		btnQuitarPago.setWidth("35px");
		btnQuitarPago.setHeight("-1px");
		lytPagos.addComponent(btnQuitarPago, "top:123.0px;left:250.0px;");

		// tbPagos
		tbPagos = new Table();
		tbPagos.setImmediate(false);
		tbPagos.setWidth("340px");
		tbPagos.setHeight("143px");
		lytPagos.addComponent(tbPagos, "top:23.0px;left:309.0px;");

		// label_15
		label_15 = new Label();
		label_15.setImmediate(false);
		label_15.setWidth("-1px");
		label_15.setHeight("-1px");
		label_15.setValue("Costo: ");
		lytPagos.addComponent(label_15, "top:123.0px;left:19.0px;");

		// txtCostoPagos
		txtCostoPagos = new DecimalField();
		txtCostoPagos.setImmediate(false);
		txtCostoPagos.setWidth("94px");
		txtCostoPagos.setHeight("-1px");
		lytPagos.addComponent(txtCostoPagos, "top:123.0px;left:55.0px;");

		return lytPagos;
	}

}
