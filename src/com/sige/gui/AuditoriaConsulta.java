package com.sige.gui;

import java.util.Date;
import java.util.List;

import com.sige.entidad.Auditoria;
import com.sige.gui.ui.NumberField;
import com.sige.servicio.AuditoriaServicio;
import com.sige.servicio.UtilService;
import com.sige.util.Boton;
import com.sige.util.Busqueda;
import com.sige.util.Constantes;
import com.sige.util.Injector;
import com.sige.util.Notificacion;
import com.sige.util.SigeUtil;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Item;
import com.vaadin.data.util.IndexedContainer;
import com.vaadin.event.ShortcutAction.KeyCode;
import com.vaadin.event.ShortcutListener;
import com.vaadin.server.ThemeResource;
import com.vaadin.shared.ui.combobox.FilteringMode;
import com.vaadin.shared.ui.label.ContentMode;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.AbstractSelect;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.Label;
import com.vaadin.ui.PopupDateField;
import com.vaadin.ui.Table;
import com.vaadin.ui.TextField;
import com.vaadin.ui.UI;
import com.vaadin.ui.Window;
import com.vaadin.ui.themes.Reindeer;

public class AuditoriaConsulta extends CustomComponent implements ClickListener {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@AutoGenerated
	private AbsoluteLayout mainLayout;
	@AutoGenerated
	private Boton btnFin;
	@AutoGenerated
	private Boton btnSiguiente;
	@AutoGenerated
	private Label lblTotalPaginas;
	@AutoGenerated
	private Label lblSeparador;
	@AutoGenerated
	private NumberField txtPaginaActual;
	@AutoGenerated
	private Label lblPagina;
	@AutoGenerated
	private Boton btnAtras;
	@AutoGenerated
	private Boton btnInicio;
	@AutoGenerated
	private Table tblAuditoria;
	@AutoGenerated
	private Button btnBuscar;
	@AutoGenerated
	private PopupDateField pdfFin;
	@AutoGenerated
	private PopupDateField pdfInicio;
	@AutoGenerated
	private Label lblFechaFin;
	@AutoGenerated
	private Label lblFechaInicio;
	@AutoGenerated
	private TextField txtCodigo;
	@AutoGenerated
	private Label lblCodigo;
	@AutoGenerated
	private ComboBox cbxNombreTabla;
	@AutoGenerated
	private NumberField txtGrupo;
	@AutoGenerated
	private Label lblGrupo;
	private UtilService utilService;
	private AuditoriaServicio auditoriaServicio;
	/**
	 * The constructor should first build the main layout, set the composition
	 * root and then do any custom initialization.
	 * 
	 * The constructor will not be automatically regenerated by the visual
	 * editor.
	 */

	private Date desde;
	private Date hasta;
	private Boton botonDetalle;

	public AuditoriaConsulta() {
		utilService = Injector.obtenerServicio(UtilService.class);
		this.auditoriaServicio = Injector
				.obtenerServicio(AuditoriaServicio.class);
		buildMainLayout();
		setCompositionRoot(mainLayout);
		postBuild();
		// TODO add user code here
	}

	@SuppressWarnings({ "unchecked", "deprecation" })
	private void postBuild() {

		lblPagina.setContentMode(ContentMode.HTML);

		this.pdfInicio.setDateFormat("dd/MM/yyyy");
		this.pdfInicio.setValue(SigeUtil.getPrimerDiaDelMes());
		this.pdfFin.setDateFormat("dd/MM/yyyy");
		this.pdfFin.setValue(new Date());
		this.btnInicio.addClickListener((ClickListener) this);
		this.btnAtras.addClickListener((ClickListener) this);
		this.btnFin.addClickListener((ClickListener) this);
		this.btnSiguiente.addClickListener((ClickListener) this);
		this.btnBuscar.addClickListener((ClickListener) this);
		this.btnInicio.setStyleName(Reindeer.BUTTON_LINK);

		this.btnAtras.setStyleName(Reindeer.BUTTON_LINK);
		this.btnSiguiente.setStyleName(Reindeer.BUTTON_LINK);
		this.btnFin.setStyleName(Reindeer.BUTTON_LINK);
		this.txtPaginaActual.setValue("1");

		this.txtCodigo.setId("codigo");
		this.txtGrupo.setId("grupo");
		this.txtPaginaActual.setId("paginaActual");
		txtPaginaActual.setImmediate(true);
		txtGrupo.setImmediate(true);

		cbxNombreTabla.setImmediate(true);
		cbxNombreTabla.setFilteringMode(FilteringMode.CONTAINS);

		IndexedContainer contenedor = new IndexedContainer();
		contenedor.addContainerProperty("claveprimaria", String.class, null);
		contenedor.addContainerProperty("accion", String.class, null);
		contenedor.addContainerProperty("tabla", String.class, null);
		contenedor.addContainerProperty("valorclaveprimaria", String.class,
				null);
		contenedor.addContainerProperty("campo", String.class, null);
		contenedor.addContainerProperty("valorantiguo", String.class, null);
		contenedor.addContainerProperty("valornuevo", String.class, null);
		contenedor.addContainerProperty("fechaactualizacion", String.class,
				null);
		contenedor.addContainerProperty("nombreusuario", String.class, null);
		contenedor.addContainerProperty("ip", String.class, null);
		contenedor.addContainerProperty("pc", String.class, null);
		contenedor.addContainerProperty("motivo", String.class, null);
		contenedor.addContainerProperty("opcion", Boton.class, null);
		tblAuditoria.setContainerDataSource(contenedor);
		tblAuditoria.setVisibleColumns(new Object[] { "claveprimaria",
				"accion", "tabla", "valorclaveprimaria", "campo",
				"valorantiguo", "valornuevo", "fechaactualizacion",
				"nombreusuario", "ip", "pc", "motivo", "opcion" });

		tblAuditoria.setColumnHeader("claveprimaria", "Clave Primaria");
		tblAuditoria.setColumnHeader("accion", "Accion");
		tblAuditoria.setColumnHeader("tabla", "Tabla");
		tblAuditoria.setColumnHeader("valorclaveprimaria",
				"Valor de Clave Primaria");
		tblAuditoria.setColumnHeader("campo", "Campo");
		tblAuditoria.setColumnHeader("valorantiguo", "Val. Antiguo");
		tblAuditoria.setColumnHeader("valornuevo", "Val. Nuevo");

		tblAuditoria.setColumnHeader("fechaactualizacion",
				"Fecha de Actualización");
		tblAuditoria.setColumnHeader("nombreusuario", "Usuario");
		tblAuditoria.setColumnHeader("ip", "IP Modifica");
		tblAuditoria.setColumnHeader("pc", "PC Modifica");
		tblAuditoria.setColumnHeader("motivo", "Motivo");
		tblAuditoria.setColumnHeader("opcion", "Opc");

		tblAuditoria.setColumnWidth("claveprimaria", 100);
		tblAuditoria.setColumnWidth("accion", 150);
		tblAuditoria.setColumnWidth("tabla", 200);
		tblAuditoria.setColumnWidth("valorclaveprimaria", 300);
		tblAuditoria.setColumnWidth("campo", 200);
		tblAuditoria.setColumnWidth("valorantiguo", 200);
		tblAuditoria.setColumnWidth("valornuevo", 200);

		tblAuditoria.setColumnWidth("fechaactualizacion", 150);
		tblAuditoria.setColumnWidth("nombreusuario", 150);
		tblAuditoria.setColumnWidth("ip", 150);
		tblAuditoria.setColumnWidth("pc", 150);
		tblAuditoria.setColumnWidth("motivo", 200);

		tblAuditoria.setColumnWidth("opciones", 45);
		tblAuditoria.setSelectable(true);
		tblAuditoria.setImmediate(true);

		IndexedContainer comboContainer = new IndexedContainer();
		comboContainer.addContainerProperty("nameTable", String.class, null);
		List<String> nombresTablas = utilService.getAllTables();
		for (int i = 0; i < nombresTablas.size(); i++) {
			if (!nombresTablas.get(i).equalsIgnoreCase("auditoria")) {
				comboContainer.addItem(i + 1).getItemProperty("nameTable")
						.setValue(nombresTablas.get(i).toUpperCase());
			}
		}

		comboContainer.sort(new Object[] { "nameTable" },
				new boolean[] { true });
		cbxNombreTabla.setContainerDataSource(comboContainer);

		cbxNombreTabla
				.setItemCaptionMode(AbstractSelect.ITEM_CAPTION_MODE_PROPERTY);
		cbxNombreTabla.setItemCaptionPropertyId("nameTable");

		txtGrupo.setValue(1 + "");

		this.txtGrupo.addShortcutListener(new ShortcutListener("",
				KeyCode.ENTER, null) {

			private static final long serialVersionUID = 1L;

			@Override
			public void handleAction(Object sender, Object target) {

				if (target instanceof TextField
						&& ((TextField) target).getId().equals("grupo")) {
					try {
						Integer grupo = Integer.parseInt(txtGrupo.getValue()
								.toString());
						if (cbxNombreTabla.getItem(grupo) != null) {
							cbxNombreTabla.setValue(grupo);
						}
					} catch (Exception exception) {
					}

				} else if (target instanceof TextField
						&& ((TextField) target).getId().equals("paginaActual")) {
					try {
						consultar();
					} catch (Exception exception) {

					}

				}

			}
		});
	}

	@SuppressWarnings("unchecked")
	private void consultar() {

		if (pdfInicio.getValue() != null && pdfFin.getValue() != null) {

			if (cbxNombreTabla.getValue() == null) {
				Notificacion.show(new Notificacion("Debe elegir una tabla",
						Constantes.MENSAJE.TYPE_ERROR));
				return;
			}

			IndexedContainer container = (IndexedContainer) tblAuditoria
					.getContainerDataSource();
			container.removeAllItems();

			desde = SigeUtil.obtenerFechaFormato(this.pdfInicio.getValue()
					.toString(), 0);
			hasta = SigeUtil.obtenerFechaFormato(
					SigeUtil.sumarDiasFecha(this.pdfFin.getValue(), 1)
							.toString(), 0);

			List<Auditoria> auditoriaListado = null;
			Long paginaActual = Long.parseLong(this.txtPaginaActual.getValue()
					.toString());
			Busqueda busqueda = auditoriaServicio.consultar(desde, hasta,
					cbxNombreTabla.getItemCaption(cbxNombreTabla.getValue())
							.trim().toLowerCase(), txtCodigo.getValue(),
					paginaActual, Boolean.FALSE);
			auditoriaListado = (List<Auditoria>) busqueda.getRegistos();
			this.lblTotalPaginas.setValue(busqueda.getNumeroPaginas()
					.toString());
			this.txtPaginaActual
					.setValue(busqueda.getPaginaActual().toString());

			for (int i = 0; i < auditoriaListado.size(); i++) {

				botonDetalle = new Boton();
				botonDetalle.setImmediate(true);
				botonDetalle.setWidth("-1px");
				botonDetalle.setHeight("-1px");
				botonDetalle.setId(auditoriaListado.get(i).getId() + "");
				botonDetalle.addClickListener((ClickListener) this);
				botonDetalle.setIcon(new ThemeResource(
						"images/botones/detalle.png"));
				botonDetalle.setStyleName(Reindeer.BUTTON_LINK);
				botonDetalle.setDescription("Ver Detalle");

				Item item = container.addItem(i);
				item.getItemProperty("claveprimaria").setValue(
						auditoriaListado.get(i).getCampoClavePrimaria());
				item.getItemProperty("accion")
						.setValue(
								auditoriaListado.get(i).getTipo()
										.equalsIgnoreCase("U") ? "MODIFICACIÓN"
										: "ELIMINACIÓN");
				item.getItemProperty("tabla").setValue(
						auditoriaListado.get(i).getNombreTabla());
				item.getItemProperty("valorclaveprimaria").setValue(
						auditoriaListado.get(i).getValorClavePrimaria());

				item.getItemProperty("campo").setValue(
						auditoriaListado.get(i).getNombreCampo());
				item.getItemProperty("valorantiguo").setValue(
						auditoriaListado.get(i).getValorAntiguo());
				item.getItemProperty("valornuevo").setValue(
						auditoriaListado.get(i).getValorNuevo());
				item.getItemProperty("fechaactualizacion").setValue(
						SigeUtil.obtenerFormatoFecha(auditoriaListado.get(i)
								.getFechaActualizacion()));

				item.getItemProperty("nombreusuario").setValue(
						auditoriaListado.get(i).getNombreUsuario());
				item.getItemProperty("ip").setValue(
						auditoriaListado.get(i).getIp());
				item.getItemProperty("pc").setValue(
						auditoriaListado.get(i).getPc());
				item.getItemProperty("motivo").setValue(
						auditoriaListado.get(i).getMotivo());

				item.getItemProperty("opcion").setValue(botonDetalle);

				botonDetalle.addClickListener(new ClickListener() {
					private static final long serialVersionUID = 1L;

					@Override
					public void buttonClick(ClickEvent event) {
						abrirVentanaDetalle(event.getButton().getId());
					}
				});

			}
		} else {
			Notificacion.show(new Notificacion(
					"Debe elegir la fecha de modificacion",
					Constantes.MENSAJE.TYPE_ERROR));
			return;
		}
	}

	public void abrirVentanaDetalle(String codAuditoria) {
		Window subwindow = SigeUtil.generarBuscador(new Window(),
				"DETALLE DE AUDITORIA", "640px", "520px");
		subwindow.setContent(new DetalleAuditoria(subwindow, this, new Integer(
				codAuditoria)));

		UI.getCurrent().addWindow(subwindow);
	}

	@Override
	public void buttonClick(ClickEvent event) {
		if (event.getSource() == this.btnBuscar) {
			consultar();
		} else if (event.getSource() == this.btnSiguiente) {
			Long paginaActual = Long.parseLong(this.txtPaginaActual.getValue()
					.toString()) + 1;
			if (paginaActual <= Long.parseLong(this.lblTotalPaginas.getValue()
					.toString())) {
				this.txtPaginaActual.setValue(paginaActual.toString());
			}
			consultar();
		} else if (event.getSource() == this.btnAtras) {
			Long paginaActual = Long.parseLong(this.txtPaginaActual.getValue()
					.toString()) - 1;
			if (paginaActual >= 1) {
				this.txtPaginaActual.setValue(paginaActual.toString());
			}
			consultar();
		} else if (event.getSource() == this.btnInicio) {
			this.txtPaginaActual.setValue("1");
			consultar();
		} else if (event.getSource() == this.btnFin) {
			this.txtPaginaActual.setValue(this.lblTotalPaginas.getValue());
			consultar();
		}

	}

	@AutoGenerated
	private AbsoluteLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");

		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");

		// lblGrupo
		lblGrupo = new Label();
		lblGrupo.setImmediate(false);
		lblGrupo.setWidth("60px");
		lblGrupo.setHeight("-1px");
		lblGrupo.setValue("Grupo :");
		mainLayout.addComponent(lblGrupo, "top:7.0px;left:20.0px;");

		// txtGrupo
		txtGrupo = new NumberField();
		txtGrupo.setImmediate(false);
		txtGrupo.setWidth("60px");
		txtGrupo.setHeight("-1px");
		mainLayout.addComponent(txtGrupo, "top:33.0px;left:20.0px;");

		// cbxNombreTabla
		cbxNombreTabla = new ComboBox();
		cbxNombreTabla.setImmediate(false);
		cbxNombreTabla.setWidth("233px");
		cbxNombreTabla.setHeight("-1px");
		mainLayout.addComponent(cbxNombreTabla, "top:33.0px;left:87.0px;");

		// lblCodigo
		lblCodigo = new Label();
		lblCodigo.setImmediate(false);
		lblCodigo.setWidth("-1px");
		lblCodigo.setHeight("-1px");
		lblCodigo.setValue("Codigo :");
		mainLayout.addComponent(lblCodigo, "top:7.0px;left:340.0px;");

		// txtCodigo
		txtCodigo = new TextField();
		txtCodigo.setImmediate(false);
		txtCodigo.setWidth("154px");
		txtCodigo.setHeight("-1px");
		mainLayout.addComponent(txtCodigo, "top:33.0px;left:336.0px;");

		// lblFechaInicio
		lblFechaInicio = new Label();
		lblFechaInicio.setImmediate(false);
		lblFechaInicio.setWidth("-1px");
		lblFechaInicio.setHeight("-1px");
		lblFechaInicio.setValue("Fecha Inicio :");
		mainLayout.addComponent(lblFechaInicio, "top:7.0px;left:500.0px;");

		// lblFechaFin
		lblFechaFin = new Label();
		lblFechaFin.setImmediate(false);
		lblFechaFin.setWidth("-1px");
		lblFechaFin.setHeight("-1px");
		lblFechaFin.setValue("Fecha Fin :");
		mainLayout.addComponent(lblFechaFin, "top:7.0px;left:648.0px;");

		// pdfInicio
		pdfInicio = new PopupDateField();
		pdfInicio.setImmediate(false);
		pdfInicio.setWidth("140px");
		pdfInicio.setHeight("-1px");
		mainLayout.addComponent(pdfInicio, "top:33.0px;left:500.0px;");

		// pdfFin
		pdfFin = new PopupDateField();
		pdfFin.setImmediate(false);
		pdfFin.setWidth("140px");
		pdfFin.setHeight("-1px");
		mainLayout.addComponent(pdfFin, "top:33.0px;left:648.0px;");

		// btnBuscar
		btnBuscar = new Button();
		btnBuscar.setCaption("Buscar");
		btnBuscar.setIcon(new ThemeResource("images/botones/find.png"));
		btnBuscar.setImmediate(true);
		btnBuscar.setWidth("100px");
		btnBuscar.setHeight("-1px");
		mainLayout.addComponent(btnBuscar, "top:33.0px;left:794.0px;");

		// tblAuditoria
		tblAuditoria = new Table();
		tblAuditoria.setImmediate(false);
		tblAuditoria.setWidth("886px");
		tblAuditoria.setHeight("223px");
		mainLayout.addComponent(tblAuditoria, "top:70.0px;left:14.0px;");

		// btnInicio
		btnInicio = new Boton();
		btnInicio.setIcon(new ThemeResource("images/botones/start.png"));
		btnInicio.setImmediate(false);
		btnInicio.setWidth("35px");
		btnInicio.setHeight("-1px");
		mainLayout.addComponent(btnInicio, "top:300.0px;left:288.0px;");

		// btnAtras
		btnAtras = new Boton();
		btnAtras.setIcon(new ThemeResource("images/botones/previous.png"));
		btnAtras.setImmediate(false);
		btnAtras.setWidth("35px");
		btnAtras.setHeight("-1px");
		mainLayout.addComponent(btnAtras, "top:300.0px;left:325.0px;");

		// lblPagina
		lblPagina = new Label();
		lblPagina.setImmediate(false);
		lblPagina.setWidth("-1px");
		lblPagina.setHeight("-1px");
		lblPagina.setValue("P&aacute;gina");
		mainLayout.addComponent(lblPagina, "top:304.0px;left:380.0px;");

		// txtPaginaActual
		txtPaginaActual = new NumberField();
		txtPaginaActual.setImmediate(false);
		txtPaginaActual.setWidth("37px");
		txtPaginaActual.setHeight("24px");
		mainLayout.addComponent(txtPaginaActual, "top:303.0px;left:445.0px;");

		// lblSeparador
		lblSeparador = new Label();
		lblSeparador.setImmediate(false);
		lblSeparador.setWidth("-1px");
		lblSeparador.setHeight("-1px");
		lblSeparador.setValue("/");
		mainLayout.addComponent(lblSeparador, "top:304.0px;left:488.0px;");

		// lblTotalPaginas
		lblTotalPaginas = new Label();
		lblTotalPaginas.setImmediate(false);
		lblTotalPaginas.setWidth("-1px");
		lblTotalPaginas.setHeight("-1px");
		lblTotalPaginas.setValue("1");
		mainLayout.addComponent(lblTotalPaginas, "top:304.0px;left:497.0px;");

		// btnSiguiente
		btnSiguiente = new Boton();
		btnSiguiente.setIcon(new ThemeResource("images/botones/next.png"));
		btnSiguiente.setImmediate(false);
		btnSiguiente.setWidth("35px");
		btnSiguiente.setHeight("-1px");
		mainLayout.addComponent(btnSiguiente, "top:300.0px;left:540.0px;");

		// btnFin
		btnFin = new Boton();
		btnFin.setIcon(new ThemeResource("images/botones/final.png"));
		btnFin.setImmediate(false);
		btnFin.setWidth("35px");
		btnFin.setHeight("-1px");
		mainLayout.addComponent(btnFin, "top:300.0px;left:577.0px;");

		return mainLayout;
	}

}
