package com.sige.gui;

import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;

import org.vaadin.dialogs.ConfirmDialog;

import com.sige.entidad.DiaNoHabil;
import com.sige.gui.ui.NumberField;
import com.sige.servicio.DiaNoHabilServicio;
import com.sige.servicio.UtilService;
import com.sige.util.Boton;
import com.sige.util.Busqueda;
import com.sige.util.Constantes;
import com.sige.util.Injector;
import com.sige.util.Notificacion;
import com.sige.util.Permiso;
import com.sige.util.SigeUtil;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Item;
import com.vaadin.data.Property;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.util.IndexedContainer;
import com.vaadin.event.ShortcutAction.KeyCode;
import com.vaadin.event.ShortcutListener;
import com.vaadin.server.ThemeResource;
import com.vaadin.shared.ui.datefield.Resolution;
import com.vaadin.shared.ui.label.ContentMode;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.Label;
import com.vaadin.ui.Notification;
import com.vaadin.ui.PopupDateField;
import com.vaadin.ui.Table;
import com.vaadin.ui.TextField;
import com.vaadin.ui.UI;
import com.vaadin.ui.Window;
import com.vaadin.ui.themes.Reindeer;

public class DiaNoHabilMantenimiento extends CustomComponent implements
		ClickListener {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@AutoGenerated
	private AbsoluteLayout mainLayout;
	@AutoGenerated
	private Button btnImprimir;
	@AutoGenerated
	private NumberField txtPaginaActual;
	@AutoGenerated
	private Label lblTotalPaginas;
	@AutoGenerated
	private Label lblSeparador;
	@AutoGenerated
	private Label lblPagina;
	@AutoGenerated
	private Boton btnFin;
	@AutoGenerated
	private Boton btnSiguiente;
	@AutoGenerated
	private Boton btnAtras;
	@AutoGenerated
	private Boton btnInicio;
	@AutoGenerated
	private Button btnCancelar;
	@AutoGenerated
	private Button btnGuardar;
	@AutoGenerated
	private Button btnEliminar;
	@AutoGenerated
	private Boton btnBuscar;
	@AutoGenerated
	private Button btnNuevo;
	@AutoGenerated
	private PopupDateField DfFecha;
	@AutoGenerated
	private Label lblFecha;
	@AutoGenerated
	private Label lblTitulo;
	@AutoGenerated
	private PopupDateField DfFechaFinal;
	@AutoGenerated
	private PopupDateField DfFechaInicial;
	@AutoGenerated
	private Table tblDiasNoHabiles;
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	/**
	 * The constructor should first build the main layout, set the composition
	 * root and then do any custom initialization.
	 * 
	 * The constructor will not be automatically regenerated by the visual
	 * editor.
	 */
	private static final String dateFormat = "dd/MM/yyyy";
	private boolean flagEsNuevo = false;
	private DiaNoHabilServicio diaNoHabilServicio;
	private DiaNoHabil diaNoHabil;
	private Window quienLlama;
	private Permiso permiso;
	private boolean confirmacion = false;
	private Map<String, Integer> columnLenghts;
	private UtilService utilService;

	public DiaNoHabilMantenimiento(Window quienLlama, Permiso permiso) {
		this.diaNoHabilServicio = Injector
				.obtenerServicio(DiaNoHabilServicio.class);
		this.utilService = Injector.obtenerServicio(UtilService.class);
		this.quienLlama = quienLlama;
		this.permiso = permiso;

		buildMainLayout();
		setCompositionRoot(mainLayout);

		postBuild();
		resetearFormulario();

		getAllDiaNoHabil();
		// TODO add user code here
	}

	private void postBuild() {
		columnLenghts = utilService.getLengthColumns("diasnohabiles");
		lblTitulo.setContentMode(ContentMode.HTML);
		this.btnNuevo.addClickListener((ClickListener) this);
		this.btnGuardar.addClickListener((ClickListener) this);
		this.btnCancelar.addClickListener((ClickListener) this);
		this.btnEliminar.addClickListener((ClickListener) this);
		this.btnBuscar.addClickListener((ClickListener) this);
		this.btnInicio.addClickListener((ClickListener) this);
		this.btnAtras.addClickListener((ClickListener) this);
		this.btnSiguiente.addClickListener((ClickListener) this);
		this.btnFin.addClickListener((ClickListener) this);
		this.btnImprimir.addClickListener((ClickListener) this);
		this.btnInicio.setStyleName(Reindeer.BUTTON_LINK);
		this.btnAtras.setStyleName(Reindeer.BUTTON_LINK);
		this.btnSiguiente.setStyleName(Reindeer.BUTTON_LINK);
		this.btnFin.setStyleName(Reindeer.BUTTON_LINK);
		this.btnBuscar.setStyleName("buscar");
		this.txtPaginaActual.setValue("1");

		this.DfFechaInicial.setDateFormat(dateFormat);
		this.DfFechaInicial.setValue(new Date());
		this.DfFechaInicial.setInputPrompt("Desde:");

		this.DfFechaInicial.setLenient(true);

		this.DfFechaFinal.setDateFormat(dateFormat);
		this.DfFechaFinal.setValue(new Date());
		this.DfFechaFinal.setInputPrompt("Hasta:");
		this.DfFechaFinal.setLenient(true);

		this.DfFecha.setDateFormat(dateFormat);

		this.txtPaginaActual.setId("paginaActual");

		this.btnBuscar.setStyleName("buscar");
		this.DfFechaInicial.setId("buscarFechaInicial");
		this.DfFechaFinal.setId("buscarFechaFinal");

		IndexedContainer container = new IndexedContainer();
		container.addContainerProperty("id", Long.class, null);
		container.addContainerProperty("item", Long.class, null);
		container.addContainerProperty("anio", String.class, null);
		container.addContainerProperty("fecha", String.class, null);

		tblDiasNoHabiles.setContainerDataSource(container);
		tblDiasNoHabiles.setVisibleColumns(new Object[] { "item", "anio",
				"fecha" });
		tblDiasNoHabiles.setColumnWidth("item", 55);
		tblDiasNoHabiles.setColumnWidth("anio", 66);
		tblDiasNoHabiles.setColumnWidth("fecha", 79);

		tblDiasNoHabiles.setColumnHeader("item", "Item");
		tblDiasNoHabiles.setColumnHeader("anio", "Año");
		tblDiasNoHabiles.setColumnHeader("fecha", "Fecha");
		tblDiasNoHabiles.setSelectable(true);
		tblDiasNoHabiles.setImmediate(true);
		this.txtPaginaActual.setImmediate(true);

		this.btnCancelar.setId("cancelar");
		this.btnEliminar.setId("eliminar");
		this.btnGuardar.setId("guardar");
		this.btnNuevo.setId("nuevo");
		this.btnBuscar.setId("consultar");
		this.btnImprimir.setId("imprimir");
		SigeUtil.validarBotones(permiso, btnImprimir, btnNuevo, btnEliminar,
				btnBuscar, btnCancelar, btnGuardar);
		boolean permisoBotones = permiso.getConsultar();
		DfFechaInicial.setVisible(permisoBotones);
		DfFechaFinal.setVisible(permisoBotones);
		this.tblDiasNoHabiles
				.addValueChangeListener(new Property.ValueChangeListener() {
					private static final long serialVersionUID = 1L;

					@Override
					public void valueChange(ValueChangeEvent event) {
						Item item = tblDiasNoHabiles.getItem(tblDiasNoHabiles
								.getValue());
						if (item != null) {

							btnGuardar.setCaption("Actualizar");
							btnEliminar.setEnabled(true);
							btnCancelar.setVisible(permiso.getModificar());
							btnCancelar.setEnabled(true);
							btnNuevo.setEnabled(true);
							flagEsNuevo = false;
							btnGuardar.setVisible(permiso.getModificar());
							btnGuardar.setEnabled(true);
							desactivarCampos(permiso.getModificar());
							getDiaNoHabil(new Long(item.getItemProperty("id")
									.getValue().toString()));
							tblDiasNoHabiles.unselect(tblDiasNoHabiles
									.getValue());
						}

					}
				});
		this.txtPaginaActual.addShortcutListener(new ShortcutListener("",
				KeyCode.ENTER, null) {
			private static final long serialVersionUID = 1L;

			@Override
			public void handleAction(Object sender, Object target) {
				if (target instanceof TextField
						&& ((TextField) target).getId().equals("paginaActual")) {
					Long paginaActual = null;
					try {
						paginaActual = Long.parseLong(txtPaginaActual
								.getValue().toString());
					} catch (Exception exception) {
						paginaActual = 1L;
						Notification notificacion = new Notification(
								"Mensaje de error",
								"<br/>Debe Ingresar un número");
						notificacion.setDelayMsec(10000);
						notificacion
								.setPosition(Notification.POSITION_CENTERED_TOP);
						UI.getCurrent().showNotification(notificacion);
					}
					txtPaginaActual.setValue(paginaActual.toString());
					getAllDiaNoHabil();
				}
			}
		});

	}

	public void obtenerMotivo(String motivo, Boolean confirmacion,
			Integer tipoOperacion) {
		if (confirmacion) {
			this.diaNoHabil.setMotivoModificacion(motivo);
			this.confirmacion = true;
			if (tipoOperacion.equals(Constantes.TIPO_OPERACION.MODIFICACION)) {
				btnGuardar.click();
			} else {
				btnEliminar.click();
			}
			this.confirmacion = false;
		}
	}

	private void desactivarCampos(boolean estado) {
		DfFecha.setEnabled(estado);

	}

	private void resetearFormulario() {
		this.flagEsNuevo = false;
		this.btnCancelar.setEnabled(false);
		this.btnNuevo.setEnabled(true);
		this.btnGuardar.setEnabled(false);
		this.btnEliminar.setEnabled(false);

		this.DfFechaInicial.setValue(new Date());
		this.DfFechaFinal.setValue(new Date());
		this.DfFecha.setValue(null);
		desactivarCampos(false);
	}

	private void NuevoRegistro() {
		this.diaNoHabil = new DiaNoHabil();
		this.flagEsNuevo = true;
		this.btnGuardar.setCaption("Guardar");
		this.btnGuardar.setVisible(permiso.getNuevo());
		this.btnGuardar.setEnabled(true);
		this.btnCancelar.setVisible(permiso.getNuevo());
		this.btnCancelar.setEnabled(true);
		this.btnNuevo.setEnabled(false);

		this.DfFechaInicial.setValue(null);
		this.DfFechaFinal.setValue(null);
		this.DfFecha.setValue(null);
		desactivarCampos(true);
	}

	private void getDiaNoHabil(Long idDiaNoHabil) {
		diaNoHabil = diaNoHabilServicio.obtener(idDiaNoHabil);
		this.DfFecha
				.setValue(SigeUtil.sumarDiasFecha(diaNoHabil.getFecha(), 2));

	}

	@SuppressWarnings("unchecked")
	private void getAllDiaNoHabil() {
		IndexedContainer container = (IndexedContainer) tblDiasNoHabiles
				.getContainerDataSource();
		container.removeAllItems();

		List<DiaNoHabil> diasNoHabiles = null;
		Long paginaActual = Long.parseLong(this.txtPaginaActual.getValue()
				.toString());
		DiaNoHabil diaNoHabilBuscar = new DiaNoHabil();
		Busqueda busqueda = null;
		Date initialDate = null;
		Date finalDate = null;

		if (this.DfFechaInicial.getValue() != null
				&& this.DfFechaFinal.getValue() != null) {
			initialDate = SigeUtil.obtenerFechaFormato(this.DfFechaInicial
					.getValue().toString(), 0);
			finalDate = SigeUtil.obtenerFechaFormato(this.DfFechaFinal
					.getValue().toString(), 0);
			busqueda = diaNoHabilServicio.buscarPorDiaNoHabil(diaNoHabilBuscar,
					paginaActual, initialDate, finalDate);
		} else {
			busqueda = diaNoHabilServicio.buscarPorDiaNoHabil(diaNoHabilBuscar,
					paginaActual);
		}

		diasNoHabiles = (List<DiaNoHabil>) busqueda.getRegistos();
		this.lblTotalPaginas.setValue(busqueda.getNumeroPaginas().toString());
		this.txtPaginaActual.setValue(busqueda.getPaginaActual().toString());
		Long numeroItem = (Long.parseLong(this.txtPaginaActual.getValue()
				.toString()) - 1) * Constantes.PAGINACION.USUARIO + 1;

		for (int i = 0; i < diasNoHabiles.size(); i++) {
			Item item = container.addItem(i);
			item.getItemProperty("id").setValue(diasNoHabiles.get(i).getId());
			item.getItemProperty("item").setValue(numeroItem++);
			item.getItemProperty("anio")
					.setValue(diasNoHabiles.get(i).getAño());
			Date dateFecha = SigeUtil.sumarDiasFecha(diasNoHabiles.get(i)
					.getFecha(), 2);
			SimpleDateFormat DATE_FORMAT = new SimpleDateFormat("dd/MM/yyyy",
					Locale.ENGLISH);
			item.getItemProperty("fecha").setValue(
					DATE_FORMAT.format(dateFecha));
		}

	}

	@Override
	public void buttonClick(ClickEvent event) {
		if (event.getSource() == (this.btnNuevo)) {
			NuevoRegistro();

		} else {
			if (event.getSource() == this.btnGuardar) {
				if (DfFecha.getValue() != null) {
					Date dateFecha = SigeUtil.obtenerFechaFormato(this.DfFecha
							.getValue().toString(), 0);
					Calendar calendar = Calendar.getInstance();
					calendar.setTime(dateFecha);
					this.diaNoHabil.setAño(String.valueOf(calendar
							.get(Calendar.YEAR)));
					this.diaNoHabil.setFecha(dateFecha);

					if (!diaNoHabilServicio.validarDuplicado(diaNoHabil)) {
						Notificacion.show(new Notificacion(
								"La fecha del Dia no Habil ya existe",
								Constantes.MENSAJE.TYPE_ERROR));
						return;
					}
					if (this.flagEsNuevo) {
						diaNoHabilServicio.crear(diaNoHabil);
						Notificacion.show(new Notificacion(
								"Se guardo correctamente el dia no habil",
								Constantes.MENSAJE.TYPE_SUCCES));

					} else {
						if (!confirmacion) {
							Window ventana = SigeUtil.generarBuscador(
									new Window(), "INGRESAR MOTIVO", "360",
									"260");
							ventana.setContent(new PanelMotivoObservacion(
									ventana, this,
									Constantes.TIPO_OPERACION.MODIFICACION,
									(columnLenghts.get("motivomodifica"))));
							UI.getCurrent().addWindow(ventana);
							return;
						}
						diaNoHabilServicio.actualizar(diaNoHabil);
						Notificacion.show(new Notificacion(
								"Se actualizo correctamente el dia no habil",
								Constantes.MENSAJE.TYPE_SUCCES));
					}
					resetearFormulario();
					getAllDiaNoHabil();
				} else {
					Notificacion.show(new Notificacion(
							"Debe llenar todos los campos",
							Constantes.MENSAJE.TYPE_ERROR));
				}

			} else {
				if (event.getSource() == this.btnCancelar) {
					resetearFormulario();
					getAllDiaNoHabil();
				} else {
					if (event.getSource() == this.btnBuscar) {
						this.txtPaginaActual.setValue("1");
						getAllDiaNoHabil();
					} else {
						if (event.getSource() == this.btnEliminar) {
							if (!confirmacion) {
								Window ventana = SigeUtil.generarBuscador(
										new Window(), "INGRESAR MOTIVO", "360",
										"260");
								ventana.setContent(new PanelMotivoObservacion(
										ventana, this,
										Constantes.TIPO_OPERACION.ELIMINACION,
										(columnLenghts.get("motivomodifica"))));
								UI.getCurrent().addWindow(ventana);
								return;
							}
							ConfirmDialog.show(UI.getCurrent(), "Confirmación",
									"¿Desea elminar el día no hábil?",
									"Aceptar", "Cancelar",
									new ConfirmDialog.Listener() {
										private static final long serialVersionUID = 1L;

										public void onClose(ConfirmDialog dialog) {
											if (dialog.isConfirmed()) {
												diaNoHabil
														.setEstado(Boolean.FALSE);
												diaNoHabilServicio
														.actualizar(diaNoHabil);
												resetearFormulario();
												getAllDiaNoHabil();
											}
										}
									});
						} else {
							if (event.getSource() == this.btnSiguiente) {
								Long paginaActual = Long
										.parseLong(this.txtPaginaActual
												.getValue().toString()) + 1;
								if (paginaActual <= Long
										.parseLong(this.lblTotalPaginas
												.getValue().toString())) {
									this.txtPaginaActual.setValue(paginaActual
											.toString());
								}
								getAllDiaNoHabil();
							} else {
								if (event.getSource() == this.btnAtras) {
									Long paginaActual = Long
											.parseLong(this.txtPaginaActual
													.getValue().toString()) - 1;
									if (paginaActual >= 1) {
										this.txtPaginaActual
												.setValue(paginaActual
														.toString());
									}
									getAllDiaNoHabil();
								} else {
									if (event.getSource() == this.btnInicio) {
										this.txtPaginaActual.setValue("1");
										getAllDiaNoHabil();
									} else {
										if (event.getSource() == this.btnFin) {
											this.txtPaginaActual
													.setValue(this.lblTotalPaginas
															.getValue());
											getAllDiaNoHabil();
										} else if (event.getSource() == this.btnImprimir) {
											Window ventana = SigeUtil
													.generarBuscador(
															new Window(),
															"IMPRIMIR",
															"800px", "550px");
											Map<String, Object> parametros = new HashMap<String, Object>();
											parametros.put("desde",
													this.DfFechaInicial
															.getValue());
											parametros.put("hasta",
													this.DfFechaFinal
															.getValue());
											ventana.setContent(new PDFVizualizador(
													this, permiso, parametros,
													null,
													"DiasNoHabilesImprimir",
													null));
											UI.getCurrent().addWindow(ventana);
										}
									}
								}
							}
						}
					}
				}
			}
		}

	}

	@AutoGenerated
	private AbsoluteLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");

		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");

		// tblDiasNoHabiles
		tblDiasNoHabiles = new Table();
		tblDiasNoHabiles.setImmediate(false);
		tblDiasNoHabiles.setWidth("280px");
		tblDiasNoHabiles.setHeight("200px");
		mainLayout.addComponent(tblDiasNoHabiles, "top:60.0px;left:20.0px;");

		// DfFechaInicial
		DfFechaInicial = new PopupDateField();
		DfFechaInicial.setImmediate(false);
		DfFechaInicial.setWidth("115px");
		DfFechaInicial.setHeight("-1px");
		DfFechaInicial.setResolution(Resolution.DAY);
		mainLayout.addComponent(DfFechaInicial, "top:10.0px;left:160.0px;");

		// DfFechaFinal
		DfFechaFinal = new PopupDateField();
		DfFechaFinal.setImmediate(false);
		DfFechaFinal.setWidth("115px");
		DfFechaFinal.setHeight("-1px");
		DfFechaFinal.setResolution(Resolution.DAY);
		mainLayout.addComponent(DfFechaFinal, "top:36.0px;left:159.0px;");

		// lblTitulo
		lblTitulo = new Label();
		lblTitulo.setImmediate(false);
		lblTitulo.setWidth("-1px");
		lblTitulo.setHeight("-1px");
		lblTitulo.setValue("<b>Datos Dia No Habil</b>");

		mainLayout.addComponent(lblTitulo, "top:42.0px;left:379.0px;");

		// lblFecha
		lblFecha = new Label();
		lblFecha.setImmediate(false);
		lblFecha.setWidth("-1px");
		lblFecha.setHeight("-1px");
		lblFecha.setValue("Fecha");
		mainLayout.addComponent(lblFecha, "top:80.0px;left:316.0px;");

		// DfFecha
		DfFecha = new PopupDateField();
		DfFecha.setImmediate(false);
		DfFecha.setWidth("190px");
		DfFecha.setHeight("-1px");
		DfFecha.setResolution(Resolution.DAY);
		mainLayout.addComponent(DfFecha, "top:82.0px;left:356.0px;");

		// btnNuevo
		btnNuevo = new Button();
		btnNuevo.setCaption("Nuevo");
		btnNuevo.setIcon(new ThemeResource("images/botones/new.png"));
		btnNuevo.setImmediate(true);
		btnNuevo.setWidth("110px");
		btnNuevo.setHeight("-1px");
		mainLayout.addComponent(btnNuevo, "top:131.0px;left:316.0px;");

		// btnBuscar
		btnBuscar = new Boton();
		btnBuscar.setIcon(new ThemeResource("images/botones/find.png"));
		btnBuscar.setImmediate(false);
		btnBuscar.setWidth("28px");
		btnBuscar.setHeight("24px");
		mainLayout.addComponent(btnBuscar, "top:36.0px;left:272.0px;");

		// btnEliminar
		btnEliminar = new Button();
		btnEliminar.setCaption("Eliminar");
		btnEliminar.setIcon(new ThemeResource("images/botones/delete.png"));
		btnEliminar.setImmediate(true);
		btnEliminar.setWidth("110px");
		btnEliminar.setHeight("-1px");
		mainLayout.addComponent(btnEliminar, "top:165.0px;left:316.0px;");

		// btnGuardar
		btnGuardar = new Button();
		btnGuardar.setCaption("Guardar");
		btnGuardar.setIcon(new ThemeResource("images/botones/save.png"));
		btnGuardar.setImmediate(true);
		btnGuardar.setWidth("110px");
		btnGuardar.setHeight("-1px");
		mainLayout.addComponent(btnGuardar, "top:131.0px;left:430.0px;");

		// btnCancelar
		btnCancelar = new Button();
		btnCancelar.setCaption("Cancelar");
		btnCancelar.setIcon(new ThemeResource("images/botones/undo.png"));
		btnCancelar.setImmediate(true);
		btnCancelar.setWidth("110px");
		btnCancelar.setHeight("-1px");
		mainLayout.addComponent(btnCancelar, "top:165.0px;left:430.0px;");

		// btnInicio
		btnInicio = new Boton();
		btnInicio.setIcon(new ThemeResource("images/botones/start.png"));
		btnInicio.setImmediate(false);
		btnInicio.setWidth("30px");
		btnInicio.setHeight("-1px");
		mainLayout.addComponent(btnInicio, "top:265.0px;left:19.0px;");

		// btnAtras
		btnAtras = new Boton();
		btnAtras.setIcon(new ThemeResource("images/botones/previous.png"));
		btnAtras.setImmediate(true);
		btnAtras.setWidth("30px");
		btnAtras.setHeight("-1px");
		mainLayout.addComponent(btnAtras, "top:265.0px;left:48.0px;");

		// btnSiguiente
		btnSiguiente = new Boton();
		btnSiguiente.setIcon(new ThemeResource("images/botones/next.png/"));
		btnSiguiente.setImmediate(true);
		btnSiguiente.setWidth("30px");
		btnSiguiente.setHeight("-1px");
		mainLayout.addComponent(btnSiguiente, "top:265.0px;left:232.0px;");

		// btnFin
		btnFin = new Boton();
		btnFin.setIcon(new ThemeResource("images/botones/final.png"));
		btnFin.setImmediate(true);
		btnFin.setWidth("30px");
		btnFin.setHeight("-1px");
		mainLayout.addComponent(btnFin, "top:265.0px;left:261.0px;");

		// lblPagina
		lblPagina = new Label();
		lblPagina.setImmediate(false);
		lblPagina.setWidth("-1px");
		lblPagina.setHeight("-1px");
		lblPagina.setValue("Página");
		mainLayout.addComponent(lblPagina, "top:268.0px;left:91.0px;");

		// lblSeparador
		lblSeparador = new Label();
		lblSeparador.setImmediate(false);
		lblSeparador.setWidth("-1px");
		lblSeparador.setHeight("-1px");
		lblSeparador.setValue("/");
		mainLayout.addComponent(lblSeparador, "top:270.0px;left:182.0px;");

		// lblTotalPaginas
		lblTotalPaginas = new Label();
		lblTotalPaginas.setImmediate(false);
		lblTotalPaginas.setWidth("-1px");
		lblTotalPaginas.setHeight("-1px");
		lblTotalPaginas.setValue("9999");
		mainLayout.addComponent(lblTotalPaginas, "top:270.0px;left:189.0px;");

		// txtPaginaActual
		txtPaginaActual = new NumberField();
		txtPaginaActual.setImmediate(false);
		txtPaginaActual.setWidth("40px");
		txtPaginaActual.setHeight("-1px");
		mainLayout.addComponent(txtPaginaActual, "top:266.0px;left:137.0px;");

		// btnImprimir
		btnImprimir = new Button();
		btnImprimir.setCaption("Imprimir");
		btnImprimir.setIcon(new ThemeResource("images/botones/print.png"));
		btnImprimir.setImmediate(true);
		btnImprimir.setWidth("110px");
		btnImprimir.setHeight("-1px");
		mainLayout.addComponent(btnImprimir, "top:196.0px;left:316.0px;");

		return mainLayout;
	}

}
