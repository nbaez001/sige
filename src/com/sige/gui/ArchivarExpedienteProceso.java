package com.sige.gui;

import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.vaadin.dialogs.ConfirmDialog;

import com.sige.entidad.AnexoPresentado;
import com.sige.entidad.DocumentoInterno;
import com.sige.entidad.DocumentoInternoDestino;
import com.sige.entidad.Expediente;
import com.sige.entidad.ExpedienteAtendido;
import com.sige.entidad.ExpedienteMovimiento;
import com.sige.entidad.TipoDocumento;
import com.sige.servicio.AnexoPresentadoService;
import com.sige.servicio.DocumentoInternoDestinoService;
import com.sige.servicio.DocumentoInternoService;
import com.sige.servicio.ExpedienteAtendidoService;
import com.sige.servicio.ExpedienteMovimientoServicio;
import com.sige.servicio.ExpedienteServicio;
import com.sige.servicio.TipoDocumentoServicio;
import com.sige.util.Injector;
import com.sige.util.SigeUtil;
import com.sige.util.TextField;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Item;
import com.vaadin.data.util.IndexedContainer;
import com.vaadin.shared.ui.label.ContentMode;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.Label;
import com.vaadin.ui.NativeSelect;
import com.vaadin.ui.Table;
import com.vaadin.ui.TextArea;
import com.vaadin.ui.UI;
import com.vaadin.ui.Window;

public class ArchivarExpedienteProceso extends CustomComponent implements
		ClickListener {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@AutoGenerated
	private AbsoluteLayout mainLayout;
	@AutoGenerated
	private Button btnSalir;
	@AutoGenerated
	private Button btnGuardar;
	@AutoGenerated
	private TextArea txtAObservaciones;
	@AutoGenerated
	private Label label_6;
	@AutoGenerated
	private ComboBox cbxTipo;
	@AutoGenerated
	private Table tbExpedientes;
	@AutoGenerated
	private Label lblFecha;
	@AutoGenerated
	private TextField txtNumero;
	@AutoGenerated
	private Label lblusuario;
	@AutoGenerated
	private Label label_5;
	@AutoGenerated
	private Label label_4;
	@AutoGenerated
	private Label label_3;
	@AutoGenerated
	private Label label_2;
	@AutoGenerated
	private Label label_1;
	private CustomComponent quienLlama;
	private ExpedienteMovimiento expedienteMovimiento;
	private AnexoPresentado anexoPresentado;
	private ExpedienteMovimientoServicio expedienteMovimientoService;
	private ExpedienteServicio expedienteService;
	private DocumentoInternoService docInternoService;
	private DocumentoInternoDestinoService docInternoDestinoService;
	private TipoDocumentoServicio tipoDOcumentoService;
	private ExpedienteAtendidoService expedienteAtendidoService;
	private Window windowContiene;
	private AnexoPresentadoService anexoPresentadoService;

	/**
	 * The constructor should first build the main layout, set the composition
	 * root and then do any custom initialization.
	 * 
	 * The constructor will not be automatically regenerated by the visual
	 * editor.
	 */
	public ArchivarExpedienteProceso(CustomComponent quienLlama,
			Window windowContiene, ExpedienteMovimiento expedienteMovimiento) {
		anexoPresentadoService = Injector
				.obtenerServicio(AnexoPresentadoService.class);
		expedienteAtendidoService = Injector
				.obtenerServicio(ExpedienteAtendidoService.class);
		tipoDOcumentoService = Injector
				.obtenerServicio(TipoDocumentoServicio.class);
		expedienteMovimientoService = Injector
				.obtenerServicio(ExpedienteMovimientoServicio.class);
		expedienteService = Injector.obtenerServicio(ExpedienteServicio.class);
		docInternoService = Injector
				.obtenerServicio(DocumentoInternoService.class);
		docInternoDestinoService = Injector
				.obtenerServicio(DocumentoInternoDestinoService.class);
		this.expedienteMovimiento = expedienteMovimiento;
		this.anexoPresentado = anexoPresentado;
		this.quienLlama = quienLlama;
		this.windowContiene = windowContiene;
		buildMainLayout();
		setCompositionRoot(mainLayout);
		postBuild();
		getInfoExpedienteArchivar();

		// TODO add user code here
	}

	public void postBuild() {

		label_6.setContentMode(ContentMode.HTML);
		lblFecha.setContentMode(ContentMode.HTML);
		lblusuario.setContentMode(ContentMode.HTML);
		label_5.setContentMode(ContentMode.HTML);
		label_4.setContentMode(ContentMode.HTML);
		label_3.setContentMode(ContentMode.HTML);
		label_1.setContentMode(ContentMode.HTML);
		label_2.setContentMode(ContentMode.HTML);

		this.btnGuardar.addClickListener((ClickListener) this);
		this.btnSalir.addClickListener((ClickListener) this);
		IndexedContainer contenedor = new IndexedContainer();
		contenedor.addContainerProperty("id", Long.class, null);
		contenedor.addContainerProperty("numero", String.class, null);
		contenedor.addContainerProperty("anio", String.class, null);
		contenedor.addContainerProperty("atendido", NativeSelect.class, null);
		tbExpedientes.setContainerDataSource(contenedor);
		tbExpedientes.setVisibleColumns(new Object[] { "numero", "anio",
				"atendido" });
		tbExpedientes.setColumnHeader("numero", "Número");
		tbExpedientes.setColumnHeader("anio", "Año");
		tbExpedientes.setColumnHeader("atendido", "Expediente Atendido");
		tbExpedientes.setColumnWidth("numero", 110);
		tbExpedientes.setColumnWidth("anio", 90);
		tbExpedientes.setColumnWidth("atendido", 210);
		tbExpedientes.setColumnAlignment("numero", Table.Align.CENTER);
		tbExpedientes.setColumnAlignment("anio", Table.Align.CENTER);
	}

	@SuppressWarnings("unchecked")
	public void getInfoExpedienteArchivar() {
		lblusuario.setValue(SigeUtil.obtenerUsuarioSesion());
		Date date = new Date();
		Timestamp fechaHora = new Timestamp(date.getTime());
		lblFecha.setValue(obtenerFormatoFecha(fechaHora));
		llenarComboTipo();
		// Expediente expediente = expedienteMovimiento.getExpediente();
		if (expedienteMovimiento != null) {
			List<Expediente> expedientes = docInternoService
					.obtenerExpedientesPorDocumentoInterno(expedienteMovimiento
							.getDocumentoInterno().getCodigodocumento());
			IndexedContainer contenedor = (IndexedContainer) tbExpedientes
					.getContainerDataSource();
			contenedor.removeAllItems();
			for (int i = 0; i < expedientes.size(); i++) {
				Item item = contenedor.addItem(i);
				item.getItemProperty("id").setValue(expedientes.get(i).getId());
				item.getItemProperty("numero").setValue(
						expedientes.get(i).getNumero());
				item.getItemProperty("anio").setValue(
						expedientes.get(i).getNumero());
				item.getItemProperty("atendido")
						.setValue(llenarComboAtendido());
			}
		}

	}

	public NativeSelect llenarComboAtendido() {
		NativeSelect slctExpedienteAtendido = new NativeSelect();
		List<ExpedienteAtendido> lsExpedienteAtendido = expedienteAtendidoService
				.obtenerTodos();
		for (ExpedienteAtendido expedienteAtendido : lsExpedienteAtendido) {
			slctExpedienteAtendido.addItem(expedienteAtendido.getId());
			slctExpedienteAtendido.setItemCaption(expedienteAtendido.getId(),
					expedienteAtendido.getDescripcion());
		}
		if (lsExpedienteAtendido.size() > 0) {
			slctExpedienteAtendido
					.setValue(lsExpedienteAtendido.get(0).getId());
		}
		slctExpedienteAtendido.setNullSelectionAllowed(false);
		return slctExpedienteAtendido;

	}

	public void llenarComboTipo() {
		List<TipoDocumento> documentos = tipoDOcumentoService.obtenerTodos();
		for (TipoDocumento tipoDocumento : documentos) {
			cbxTipo.addItem(tipoDocumento.getId());
			cbxTipo.setItemCaption(tipoDocumento.getId(),
					tipoDocumento.getNombre());
		}
		if (documentos.size() > 0) {
			cbxTipo.setValue(documentos.get(0).getId());
		}
		cbxTipo.setNullSelectionAllowed(false);
	}

	@Override
	public void buttonClick(ClickEvent event) {
		// TODO Auto-generated method stub
		if (event.getSource() == this.btnGuardar) {
			ConfirmDialog.show(UI.getCurrent(), "Confirmación",
					"¿Desea Archivar el expediente?", "Aceptar", "Cancelar",
					new ConfirmDialog.Listener() {

						@Override
						public void onClose(ConfirmDialog dialog) {
							// TODO Auto-generated method stub
							if (dialog.isConfirmed()) {
								archivarExpediente();
							}
						}
					});

		} else if (event.getSource() == this.btnSalir) {
			UI.getCurrent().removeWindow(windowContiene);
		}
	}

	Log logger = LogFactory.getLog(ArchivarExpedienteProceso.class);

	public void archivarExpediente() {
		DocumentoInterno documentoInterno = expedienteMovimiento
				.getDocumentoInterno();
		DocumentoInternoDestino docInternoDestino = docInternoDestinoService
				.obtenerDocInternoDestinoPorDocInterno(documentoInterno
						.getCodigodocumento());
		Date date = new Date();
		final Timestamp fechaHora = new Timestamp(date.getTime());
		docInternoDestino.setFechaFinalizacion(fechaHora);
		docInternoDestino.setFinalizadoPor(SigeUtil
				.obtenerCodigoUsuarioSesion().toString());
		docInternoDestino.setEstaFinalizado(Boolean.TRUE);
		docInternoDestino.setTextoFinaliza(txtAObservaciones.getValue()
				.toString());
		docInternoDestino.setTipoMovimiento('3');
		Expediente expedienteActualizar = null;
		List<Expediente> expedientesActualizar = docInternoService
				.obtenerExpedientesPorDocumentoInterno(expedienteMovimiento
						.getDocumentoInterno().getCodigodocumento());
		docInternoDestinoService.actualizar(docInternoDestino);
		// if (documentoInterno.getCodigoTipoDocumento().equals("33")) {

		for (Object id : tbExpedientes.getItemIds()) {
			expedienteActualizar = new Expediente();
			expedienteActualizar = expedienteService.obtener(Long
					.parseLong(tbExpedientes.getItem(id).getItemProperty("id")
							.getValue().toString()));
			expedienteActualizar.setTramiteFinalizado(Boolean.TRUE);
			expedienteActualizar.setFechaFinalizado(fechaHora);
			expedienteActualizar.setFinalizadoPor(SigeUtil
					.obtenerCodigoUsuarioSesion().toString());
			expedienteActualizar.setCodigoTipoDocumentoFinaliza(cbxTipo
					.getValue().toString());
			expedienteActualizar.setNumeroDocumentoFinaliza(txtNumero
					.getValue().toString());
			expedienteActualizar.setTextoFinaliza(txtAObservaciones.getValue()
					.toString());
			NativeSelect codatencion = ((NativeSelect) ((tbExpedientes.getItem(
					id).getItemProperty("atendido").getValue())));

			logger.info("Codigo de atencion "
					+ codatencion.getValue().toString());
			expedienteActualizar.setAtendido(obtenerTipoAtencionExpediente(Long
					.parseLong(codatencion.getValue().toString())));
			expedienteActualizar
					.setExpedienteatendido(expedienteAtendidoService
							.obtener(Long.parseLong(codatencion.getValue()
									.toString())));
			expedientesActualizar.add(expedienteActualizar);
		}

		// }

		for (Expediente expediente : expedientesActualizar) {
			expedienteService.actualizar(expediente);
		}
		if (quienLlama instanceof MovimientoExpedienteProceso) {
			MovimientoExpedienteProceso panel = (MovimientoExpedienteProceso) quienLlama;
			panel.mostrarMensajeExitoArchivar();

		} else if (quienLlama instanceof ExpedienteArchivar) {
			ExpedienteArchivar panel = (ExpedienteArchivar) quienLlama;
			panel.mostrarMensajeExitoArchivar();
		} else if (quienLlama instanceof ExpedienteMantenimiento) {
			ExpedienteMantenimiento panel = (ExpedienteMantenimiento) quienLlama;
			panel.mostrarMensajeExitoArchivar();
		}
		UI.getCurrent().removeWindow(windowContiene);
	}

	public Boolean obtenerTipoAtencionExpediente(Long codAtencion) {
		if (codAtencion == 1L || codAtencion == 2L || codAtencion == 3L) {
			return true;
		} else {
			return false;
		}
	}

	public String obtenerFormatoFecha(Timestamp Fecha) {
		String fecha = null;
		try {
			fecha = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss").format(Fecha);

		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return fecha;
	}

	@AutoGenerated
	private AbsoluteLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");

		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");

		// label_1
		label_1 = new Label();
		label_1.setImmediate(false);
		label_1.setWidth("-1px");
		label_1.setHeight("-1px");
		label_1.setValue("<b>Usuario: ");

		mainLayout.addComponent(label_1, "top:20.0px;left:53.0px;");

		// label_2
		label_2 = new Label();
		label_2.setImmediate(false);
		label_2.setWidth("-1px");
		label_2.setHeight("-1px");
		label_2.setValue("<b>Fecha: ");

		mainLayout.addComponent(label_2, "top:20.0px;left:320.0px;");

		// label_3
		label_3 = new Label();
		label_3.setImmediate(false);
		label_3.setWidth("-1px");
		label_3.setHeight("-1px");
		label_3.setValue("<b>Tipo: ");

		mainLayout.addComponent(label_3, "top:45.0px;left:73.0px;");

		// label_4
		label_4 = new Label();
		label_4.setImmediate(false);
		label_4.setWidth("-1px");
		label_4.setHeight("-1px");
		label_4.setValue("<b>Nro: ");

		mainLayout.addComponent(label_4, "top:45.0px;left:337.0px;");

		// label_5
		label_5 = new Label();
		label_5.setImmediate(false);
		label_5.setWidth("-1px");
		label_5.setHeight("-1px");
		label_5.setValue("<b>Expediente: ");

		mainLayout.addComponent(label_5, "top:80.0px;left:34.0px;");

		// lblusuario
		lblusuario = new Label();
		lblusuario.setImmediate(false);
		lblusuario.setWidth("190px");
		lblusuario.setHeight("-1px");
		lblusuario.setValue("Usuario");

		mainLayout.addComponent(lblusuario, "top:20.0px;left:110.0px;");

		// txtNumero
		txtNumero = new TextField();
		txtNumero.setImmediate(false);
		txtNumero.setWidth("177px");
		txtNumero.setHeight("-1px");
		mainLayout.addComponent(txtNumero, "top:45.0px;left:383.0px;");

		// lblFecha
		lblFecha = new Label();
		lblFecha.setImmediate(false);
		lblFecha.setWidth("163px");
		lblFecha.setHeight("-1px");
		lblFecha.setValue("Fecha");

		mainLayout.addComponent(lblFecha, "top:20.0px;left:360.0px;");

		// tbExpedientes
		tbExpedientes = new Table();
		tbExpedientes.setImmediate(false);
		tbExpedientes.setWidth("450px");
		tbExpedientes.setHeight("80px");
		mainLayout.addComponent(tbExpedientes, "top:80.0px;left:110.0px;");

		// cbxTipo
		cbxTipo = new ComboBox();
		cbxTipo.setImmediate(false);
		cbxTipo.setWidth("190px");
		cbxTipo.setHeight("-1px");
		mainLayout.addComponent(cbxTipo, "top:45.0px;left:110.0px;");

		// label_6
		label_6 = new Label();
		label_6.setImmediate(false);
		label_6.setWidth("-1px");
		label_6.setHeight("-1px");
		label_6.setValue("<b>Observaciones: ");

		mainLayout.addComponent(label_6, "top:182.0px;left:11.0px;");

		// txtAObservaciones
		txtAObservaciones = new TextArea();
		txtAObservaciones.setImmediate(false);
		txtAObservaciones.setWidth("450px");
		txtAObservaciones.setHeight("60px");
		mainLayout.addComponent(txtAObservaciones, "top:180.0px;left:110.0px;");

		// btnGuardar
		btnGuardar = new Button();
		btnGuardar.setCaption("Guardar");
		btnGuardar.setImmediate(true);
		btnGuardar.setWidth("110px");
		btnGuardar.setHeight("-1px");
		mainLayout.addComponent(btnGuardar, "top:245.0px;left:170.0px;");

		// btnSalir
		btnSalir = new Button();
		btnSalir.setCaption("Salir");
		btnSalir.setImmediate(true);
		btnSalir.setWidth("110px");
		btnSalir.setHeight("-1px");
		mainLayout.addComponent(btnSalir, "top:245.0px;left:300.0px;");

		return mainLayout;
	}

}
