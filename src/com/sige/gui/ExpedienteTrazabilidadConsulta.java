package com.sige.gui;

import java.util.Date;
import java.util.Iterator;
import java.util.Map;
import java.util.Map.Entry;

import org.jfree.chart.ChartFactory;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;
import org.vaadin.addon.JFreeChartWrapper;

import com.sige.entidad.Expediente;
import com.sige.entidad.TipoTramite;
import com.sige.servicio.ExpedienteServicio;
import com.sige.servicio.TipoTramiteService;
import com.sige.util.Constantes;
import com.sige.util.Injector;
import com.sige.util.Notificacion;
import com.sige.util.SigeUtil;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.Property.ValueChangeListener;
import com.vaadin.server.ThemeResource;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.Label;
import com.vaadin.ui.Panel;
import com.vaadin.ui.PopupDateField;
import com.vaadin.ui.TextField;
import com.vaadin.ui.UI;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.Window;

public class ExpedienteTrazabilidadConsulta extends CustomComponent implements
		ClickListener {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@AutoGenerated
	private AbsoluteLayout mainLayout;
	@AutoGenerated
	private Button btnBuscar;
	@AutoGenerated
	private TextField txtExpedienteTipoTramite;
	@AutoGenerated
	private Label lblExpedienteTipoTramite;
	@AutoGenerated
	private PopupDateField pdfHasta;
	@AutoGenerated
	private PopupDateField pdfDel;
	@AutoGenerated
	private Label lblIntervaloFechas;
	@AutoGenerated
	private Label lblHasta;
	@AutoGenerated
	private Label lblDel;
	@AutoGenerated
	private Button btnConsultar;
	@AutoGenerated
	private ComboBox cbxTipoTrazabilidad;
	@AutoGenerated
	private Label lblTrazabilidad;
	@AutoGenerated
	private Panel pnlGrafico;
	@AutoGenerated
	private VerticalLayout verticalLayout_1;
	private Expediente expedienteSeleccionado;
	private TipoTramite tipoTramiteSeleccionado;
	private TipoTramiteService tipoTramiteService;
	private DefaultCategoryDataset dataset;
	private String titulo;
	private String categoria;
	private Date desde;
	private Date hasta;
	private ExpedienteServicio expedienteServicio;

	private Map<String, Integer[]> trazabilidad;

	/**
	 * The constructor should first build the main layout, set the composition
	 * root and then do any custom initialization.
	 * 
	 * The constructor will not be automatically regenerated by the visual
	 * editor.
	 */
	public ExpedienteTrazabilidadConsulta() {
		this.tipoTramiteService = Injector
				.obtenerServicio(TipoTramiteService.class);
		this.expedienteServicio = Injector
				.obtenerServicio(ExpedienteServicio.class);
		buildMainLayout();
		setCompositionRoot(mainLayout);
		postBuild();
		// TODO add user code here
	}

	private void postBuild() {
		cbxTipoTrazabilidad.addItem(1);
		cbxTipoTrazabilidad.addItem(2);
		cbxTipoTrazabilidad.setItemCaption(1, "TRAZABILIDAD DE EXPEDIENTE");
		cbxTipoTrazabilidad
				.setItemCaption(2, "TRAZABILIDAD DE TIPO DE TRAMITE");

		this.btnBuscar.addClickListener((ClickListener) this);
		this.btnConsultar.addClickListener((ClickListener) this);

		this.pdfDel.setDateFormat("dd/MM/yyyy");
		this.pdfDel.setValue(SigeUtil.getPrimerDiaDelMes());
		this.pdfHasta.setDateFormat("dd/MM/yyyy");
		this.pdfHasta.setValue(new Date());

		cbxTipoTrazabilidad.setValue(1);

		cbxTipoTrazabilidad.setImmediate(true);
		txtExpedienteTipoTramite.setEnabled(false);

		cbxTipoTrazabilidad.addValueChangeListener(new ValueChangeListener() {
			private static final long serialVersionUID = 1L;

			@Override
			public void valueChange(ValueChangeEvent event) {
				if (event.getProperty().getValue() != null) {
					if (cbxTipoTrazabilidad.getValue() != null) {
						conmutarVisibilidad(true);
						if ((Integer) cbxTipoTrazabilidad.getValue() == 1) {
							lblExpedienteTipoTramite.setValue("Expediente :");
							tipoTramiteSeleccionado = null;
						} else {
							lblExpedienteTipoTramite.setValue("Tipo Tramite :");
							expedienteSeleccionado = null;
						}
						txtExpedienteTipoTramite.setValue("");
					} else {
						conmutarVisibilidad(false);
						btnConsultar.setEnabled(false);
					}
				}
			}
		});

	}

	public void obtenerTipoTramite(String codTipoTramite) {
		tipoTramiteSeleccionado = tipoTramiteService
				.obtenerTipoTramitePorCod(codTipoTramite);
		txtExpedienteTipoTramite.setValue(tipoTramiteSeleccionado.getNombre());
	}

	public void obtenerExpediente(String codExpediente) {
		expedienteSeleccionado = expedienteServicio
				.obtenerExpediente(codExpediente);
		txtExpedienteTipoTramite.setValue(expedienteSeleccionado.getCodigo());
	}

	private void conmutarVisibilidad(Boolean estado) {
		txtExpedienteTipoTramite.setVisible(estado);
		lblExpedienteTipoTramite.setVisible(estado);
		btnBuscar.setVisible(estado);
	}

	private void createDataset() {
		if (pdfDel.getValue() == null || pdfHasta.getValue() == null) {
			Notificacion.show(new Notificacion(
					"Debe seleccionar el intervalo de fechas",
					Constantes.MENSAJE.TYPE_ERROR));
			pnlGrafico.setContent(null);
			return;
		}

		desde = SigeUtil.obtenerFechaFormato(this.pdfDel.getValue().toString(),
				0);
		dataset = new DefaultCategoryDataset();
		hasta = SigeUtil
				.obtenerFechaFormato(
						SigeUtil.sumarDiasFecha(this.pdfHasta.getValue(), 1)
								.toString(), 0);
		if ((Integer) cbxTipoTrazabilidad.getValue() == 1) {

			titulo = "EVALUACIÓN DE TRAZABILIDAD DE EXPEDIENTE "
					+ expedienteSeleccionado.getCodigo();
			categoria = "OFICINAS";

			trazabilidad = expedienteServicio.consultaTrazabilidad(desde,
					hasta, null, expedienteSeleccionado.getCodigo());

		} else if ((Integer) cbxTipoTrazabilidad.getValue() == 2) {

			titulo = "EVALUACIÓN DE TRAZABILIDAD DE TIPO DE TRAMITE ";
			categoria = "OFICINAS";

			trazabilidad = expedienteServicio
					.consultaTrazabilidad(desde, hasta,
							tipoTramiteSeleccionado.getCodigoTipoTramite(),
							null);

		}
		if (trazabilidad != null) {
			final Iterator<Entry<String, Integer[]>> it = trazabilidad
					.entrySet().iterator();

			Entry<String, Integer[]> entry = null;
			String c = null;
			Integer n = null;
			while (it.hasNext()) {
				entry = it.next();
				if ((Integer) cbxTipoTrazabilidad.getValue() == 2) {
					dataset.addValue(
							Math.round((entry.getValue()[0] / (double) entry
									.getValue()[1]) * Math.pow(10, 2))
									/ Math.pow(10, 2),
							entry.getKey()
									+ "  "
									+ Math.round((entry.getValue()[0] / (double) entry
											.getValue()[1]) * Math.pow(10, 2))
									/ Math.pow(10, 2) + " días", categoria);
				} else {
					dataset.addValue(entry.getValue()[0], entry.getKey()
							+ entry.getValue()[0] + " días", categoria);
				}
			}
		}

	}

	@Override
	public void buttonClick(ClickEvent event) {
		if (event.getSource() == this.btnBuscar) {
			if ((Integer) cbxTipoTrazabilidad.getValue() == 2) {
				Window subWindow = SigeUtil.generarBuscador(new Window(),
						"BUSCAR TIPO TRAMITE", "775px", "430px");
				TipoTramiteBuscar componente = new TipoTramiteBuscar(subWindow,
						this, null);
				subWindow.setContent(componente);
				UI.getCurrent().addWindow(subWindow);
				componente.rellenarDatosTablaTipoTramite();
			} else {
				Window ventana = SigeUtil.generarBuscador(new Window(),
						"BUSCAR EXPEDIENTE", "910px", "390px");
				ExpedienteBuscar expedienteBuscar = new ExpedienteBuscar(
						ventana, this, 2, false, null);
				ventana.setContent(expedienteBuscar);
				UI.getCurrent().addWindow(ventana);
				expedienteBuscar.getAllExpedientes();

			}
		} else if (event.getSource() == this.btnConsultar) {
			if ((Integer) cbxTipoTrazabilidad.getValue() == 2
					&& tipoTramiteSeleccionado == null) {
				Notificacion.show(new Notificacion(
						"Debe seleccionar un tipo de tramite",
						Constantes.MENSAJE.TYPE_ERROR));
				pnlGrafico.setContent(null);
				return;
			}

			if ((Integer) cbxTipoTrazabilidad.getValue() == 1
					&& expedienteSeleccionado == null) {
				Notificacion.show(new Notificacion(
						"Debe seleccionar un expediente",
						Constantes.MENSAJE.TYPE_ERROR));
				pnlGrafico.setContent(null);
				return;
			}
			createDataset();
			if (dataset != null) {

				JFreeChart chart = ChartFactory.createBarChart(titulo,
						"Nombre", "Total", dataset, PlotOrientation.VERTICAL,
						true, true, false);

				JFreeChartWrapper wrapper = new JFreeChartWrapper(chart) {
					private static final long serialVersionUID = 1L;

					@Override
					public void attach() {
						super.attach();
						setResource("src", getSource());
					}
				};
				wrapper.setWidth("750px");
				wrapper.setHeight("400px");
				pnlGrafico.setContent(wrapper);
				dataset = null;
			}
		}
	}

	@AutoGenerated
	private AbsoluteLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");

		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");

		// pnlGrafico
		pnlGrafico = buildPnlGrafico();
		mainLayout.addComponent(pnlGrafico, "top:90.0px;left:20.0px;");

		// lblTrazabilidad
		lblTrazabilidad = new Label();
		lblTrazabilidad.setImmediate(false);
		lblTrazabilidad.setWidth("-1px");
		lblTrazabilidad.setHeight("-1px");
		lblTrazabilidad.setValue("Seleccione Tipo Trazabilidad :");
		mainLayout.addComponent(lblTrazabilidad, "top:2.0px;left:20.0px;");

		// cbxTipoTrazabilidad
		cbxTipoTrazabilidad = new ComboBox();
		cbxTipoTrazabilidad.setImmediate(false);
		cbxTipoTrazabilidad.setWidth("280px");
		cbxTipoTrazabilidad.setHeight("-1px");
		mainLayout.addComponent(cbxTipoTrazabilidad, "top:20.0px;left:20.0px;");

		// btnConsultar
		btnConsultar = new Button();
		btnConsultar.setCaption("Consultar");
		btnConsultar.setIcon(new ThemeResource("images/botones/consult.png"));
		btnConsultar.setImmediate(true);
		btnConsultar.setWidth("110px");
		btnConsultar.setHeight("-1px");
		mainLayout.addComponent(btnConsultar, "top:20.0px;left:304.0px;");

		// lblDel
		lblDel = new Label();
		lblDel.setImmediate(false);
		lblDel.setWidth("-1px");
		lblDel.setHeight("-1px");
		lblDel.setValue("Del");
		mainLayout.addComponent(lblDel, "top:22.0px;left:430.0px;");

		// lblHasta
		lblHasta = new Label();
		lblHasta.setImmediate(false);
		lblHasta.setWidth("-1px");
		lblHasta.setHeight("-1px");
		lblHasta.setValue("Hasta");
		mainLayout.addComponent(lblHasta, "top:22.0px;left:606.0px;");

		// lblIntervaloFechas
		lblIntervaloFechas = new Label();
		lblIntervaloFechas.setImmediate(false);
		lblIntervaloFechas.setWidth("-1px");
		lblIntervaloFechas.setHeight("-1px");
		lblIntervaloFechas.setValue("Intervalo de Fechas :");
		mainLayout.addComponent(lblIntervaloFechas, "top:0.0px;left:567.0px;");

		// pdfDel
		pdfDel = new PopupDateField();
		pdfDel.setImmediate(false);
		pdfDel.setWidth("140px");
		pdfDel.setHeight("-1px");
		mainLayout.addComponent(pdfDel, "top:20.0px;left:460.0px;");

		// pdfHasta
		pdfHasta = new PopupDateField();
		pdfHasta.setImmediate(false);
		pdfHasta.setWidth("140px");
		pdfHasta.setHeight("-1px");
		mainLayout.addComponent(pdfHasta, "top:20.0px;left:648.0px;");

		// lblExpedienteTipoTramite
		lblExpedienteTipoTramite = new Label();
		lblExpedienteTipoTramite.setImmediate(false);
		lblExpedienteTipoTramite.setWidth("-1px");
		lblExpedienteTipoTramite.setHeight("-1px");
		lblExpedienteTipoTramite.setValue("Expediente :");
		mainLayout.addComponent(lblExpedienteTipoTramite,
				"top:60.0px;left:20.0px;");

		// txtExpedienteTipoTramite
		txtExpedienteTipoTramite = new TextField();
		txtExpedienteTipoTramite.setImmediate(false);
		txtExpedienteTipoTramite.setWidth("287px");
		txtExpedienteTipoTramite.setHeight("-1px");
		mainLayout.addComponent(txtExpedienteTipoTramite,
				"top:58.0px;left:106.0px;");

		// btnBuscar
		btnBuscar = new Button();
		btnBuscar.setCaption("Buscar");
		btnBuscar.setIcon(new ThemeResource("images/botones/find.png"));
		btnBuscar.setImmediate(true);
		btnBuscar.setWidth("100px");
		btnBuscar.setHeight("-1px");
		mainLayout.addComponent(btnBuscar, "top:58.0px;left:395.0px;");

		return mainLayout;
	}

	@AutoGenerated
	private Panel buildPnlGrafico() {
		// common part: create layout
		pnlGrafico = new Panel();
		pnlGrafico.setImmediate(false);
		pnlGrafico.setWidth("780px");
		pnlGrafico.setHeight("476px");

		// verticalLayout_1
		verticalLayout_1 = new VerticalLayout();
		verticalLayout_1.setImmediate(false);
		verticalLayout_1.setWidth("100.0%");
		verticalLayout_1.setHeight("100.0%");
		verticalLayout_1.setMargin(false);
		pnlGrafico.setContent(verticalLayout_1);

		return pnlGrafico;
	}

}
