package com.sige.gui;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;

import com.sige.entidad.Dependencia;
import com.sige.entidad.Expediente;
import com.sige.entidad.ExpedienteMovimiento;
import com.sige.entidad.Persona;
import com.sige.entidad.PersonaDocumento;
import com.sige.servicio.DependenciaServicio;
import com.sige.servicio.DiaNoHabilServicio;
import com.sige.servicio.ExpedienteMovimientoServicio;
import com.sige.servicio.ExpedientePagoServicio;
import com.sige.servicio.ExpedienteRequisitoServicio;
import com.sige.servicio.ExpedienteServicio;
import com.sige.servicio.PersonaDocumentoServicio;
import com.sige.servicio.UtilService;
import com.sige.util.Boton;
import com.sige.util.Busqueda;
import com.sige.util.Cargo;
import com.sige.util.Constantes;
import com.sige.util.ExpedienteCanonico;
import com.sige.util.Injector;
import com.sige.util.Notificacion;
import com.sige.util.Permiso;
import com.sige.util.SigeUtil;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Item;
import com.vaadin.data.util.IndexedContainer;
import com.vaadin.event.ItemClickEvent;
import com.vaadin.event.ItemClickEvent.ItemClickListener;
import com.vaadin.event.ShortcutAction.KeyCode;
import com.vaadin.event.ShortcutListener;
import com.vaadin.server.ThemeResource;
import com.vaadin.shared.ui.label.ContentMode;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.Label;
import com.vaadin.ui.Table;
import com.vaadin.ui.TextField;
import com.vaadin.ui.UI;
import com.vaadin.ui.Window;
import com.vaadin.ui.themes.Reindeer;

public class ExpedienteBuscar extends CustomComponent implements ClickListener {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@AutoGenerated
	private AbsoluteLayout mainLayout;
	@AutoGenerated
	private Button btnImprimirCargo;
	@AutoGenerated
	private Boton btnFin;
	@AutoGenerated
	private Boton btnSiguiente;
	@AutoGenerated
	private Boton btnInicio;
	@AutoGenerated
	private Label lblTotalPaginas;
	@AutoGenerated
	private Label label_6;
	@AutoGenerated
	private TextField txtPaginaActual;
	@AutoGenerated
	private Label label_5;
	@AutoGenerated
	private Boton btnAtras;
	@AutoGenerated
	private Button btnBuscarExpediente;
	@AutoGenerated
	private Label label_4;
	@AutoGenerated
	private TextField txtAnio;
	@AutoGenerated
	private TextField txtNombrePersona;
	@AutoGenerated
	private TextField txtCodigoPersona;
	@AutoGenerated
	private Label label_3;
	@AutoGenerated
	private TextField txtAsuntoExpediente;
	@AutoGenerated
	private TextField txtCodExpediente;
	@AutoGenerated
	private Label label_1;
	@AutoGenerated
	private Table tbExpediente;
	private Window windowContiene;
	private CustomComponent quienLlama;
	private ExpedienteMovimientoServicio expedienteMovimientoServicio;
	private Boton botonDetalle;
	private Dependencia dependencia;
	private DependenciaServicio dependenciaService;
	private ExpedienteServicio expedienteService;
	private DiaNoHabilServicio diaNohabilService;
	private ExpedienteRequisitoServicio expedienteRequisitoService;
	private ExpedientePagoServicio expedientePagoService;
	private UtilService utilService;
	private Map<String, Integer> expedienteColumnLenghts;
	private Map<String, Integer> personaColumnLenghts;
	private PersonaDocumentoServicio personaDocumentoServicio;

	/**
	 * The constructor should first build the main layout, set the composition
	 * root and then do any custom initialization.
	 * 
	 * The constructor will not be automatically regenerated by the visual
	 * editor.
	 */
	private Integer tipoBusqueda;
	private boolean imprimir;
	private String codigoExpediente;

	private List<Cargo> cargos;
	private Cargo cargo;
	private Permiso permiso;

	public ExpedienteBuscar(Window windowContiene, CustomComponent quienLlama,
			Integer tipoBusqueda, Boolean imprimir, Permiso permiso) {
		utilService = Injector.obtenerServicio(UtilService.class);
		diaNohabilService = Injector.obtenerServicio(DiaNoHabilServicio.class);
		expedientePagoService = Injector
				.obtenerServicio(ExpedientePagoServicio.class);
		expedienteRequisitoService = Injector
				.obtenerServicio(ExpedienteRequisitoServicio.class);
		expedienteMovimientoServicio = Injector
				.obtenerServicio(ExpedienteMovimientoServicio.class);
		dependenciaService = Injector
				.obtenerServicio(DependenciaServicio.class);
		expedienteService = Injector.obtenerServicio(ExpedienteServicio.class);
		personaDocumentoServicio = Injector
				.obtenerServicio(PersonaDocumentoServicio.class);
		this.windowContiene = windowContiene;
		this.quienLlama = quienLlama;
		this.tipoBusqueda = tipoBusqueda;
		this.imprimir = imprimir;
		this.permiso = permiso;
		buildMainLayout();
		setCompositionRoot(mainLayout);
		postBuild();
		// TODO add user code here
	}

	public void postBuild() {

		label_5.setContentMode(ContentMode.HTML);
		lblTotalPaginas.setContentMode(ContentMode.HTML);
		label_4.setContentMode(ContentMode.HTML);
		label_3.setContentMode(ContentMode.HTML);
		label_1.setContentMode(ContentMode.HTML);

		expedienteColumnLenghts = utilService.getLengthColumns("expediente");
		personaColumnLenghts = utilService.getLengthColumns("persona");
		this.txtCodExpediente.setMaxLength(expedienteColumnLenghts
				.get("codexpediente"));
		this.txtAsuntoExpediente.setMaxLength(expedienteColumnLenghts
				.get("asunto"));
		this.txtCodigoPersona.setMaxLength(personaColumnLenghts
				.get("codpersona"));
		this.txtNombrePersona.setMaxLength(personaColumnLenghts
				.get("nombrecompleto"));
		this.txtAnio.setMaxLength(4);
		this.btnAtras.addClickListener((ClickListener) this);
		this.btnInicio.addClickListener((ClickListener) this);
		this.btnSiguiente.addClickListener((ClickListener) this);
		this.btnImprimirCargo.addClickListener((ClickListener) this);
		this.btnFin.addClickListener((ClickListener) this);
		this.btnBuscarExpediente.addClickListener((ClickListener) this);
		this.btnAtras.setStyleName(Reindeer.BUTTON_LINK);
		this.btnInicio.setStyleName(Reindeer.BUTTON_LINK);
		this.btnSiguiente.setStyleName(Reindeer.BUTTON_LINK);
		this.btnFin.setStyleName(Reindeer.BUTTON_LINK);

		if (imprimir) {

			btnImprimirCargo.setId("imprimir");

			SigeUtil.validarBotones(permiso, btnImprimirCargo);
			btnImprimirCargo.setVisible(imprimir);
		}
		IndexedContainer contenedor = new IndexedContainer();
		contenedor.addContainerProperty("id", Long.class, null);
		contenedor.addContainerProperty("item", Long.class, null);
		contenedor.addContainerProperty("codigo", String.class, null);
		contenedor.addContainerProperty("fecha", String.class, null);
		contenedor.addContainerProperty("asunto", String.class, null);
		contenedor.addContainerProperty("persona", String.class, null);
		contenedor.addContainerProperty("anio", String.class, null);
		contenedor.addContainerProperty("oficina", String.class, null);
		contenedor.addContainerProperty("req", Long.class, null);
		contenedor.addContainerProperty("reqP", Long.class, null);
		contenedor.addContainerProperty("pagos", Long.class, null);
		contenedor.addContainerProperty("pagosP", Long.class, null);
		contenedor.addContainerProperty("diast", String.class, null);
		tbExpediente.setImmediate(true);
		tbExpediente.setSelectable(true);
		tbExpediente.setContainerDataSource(contenedor);
		tbExpediente.setVisibleColumns(new Object[] { "item", "codigo",
				"fecha", "asunto", "persona", "anio", "oficina", "req", "reqP",
				"pagos", "pagosP", "diast" });
		tbExpediente.setColumnHeader("item", "N°");
		tbExpediente.setColumnHeader("codigo", "Código");
		tbExpediente.setColumnHeader("fecha", "Fecha Registro");
		tbExpediente.setColumnHeader("asunto", "Asunto");
		tbExpediente.setColumnHeader("persona", "Nombre Solicitante");
		tbExpediente.setColumnHeader("anio", "Año");
		tbExpediente.setColumnHeader("oficina", "Oficina");
		tbExpediente.setColumnHeader("req", "Req P.");
		tbExpediente.setColumnHeader("reqP", "Req E.");
		tbExpediente.setColumnHeader("pagos", "Pag P.");
		tbExpediente.setColumnHeader("pagosP", "Pag E.");
		tbExpediente.setColumnHeader("diast", "Dias Trans.");
		tbExpediente.setColumnWidth("item", 20);
		tbExpediente.setColumnWidth("codigo", 90);
		tbExpediente.setColumnWidth("fecha", 90);
		tbExpediente.setColumnWidth("asunto", 190);
		tbExpediente.setColumnWidth("persona", 130);
		tbExpediente.setColumnWidth("anio", 50);
		tbExpediente.setColumnWidth("oficina", 100);
		tbExpediente.setColumnWidth("req", 40);
		tbExpediente.setColumnWidth("reqP", 40);
		tbExpediente.setColumnWidth("pagos", 40);
		tbExpediente.setColumnWidth("pagosp", 40);
		tbExpediente.setColumnWidth("diast", 70);
		tbExpediente.setColumnAlignment("item", Table.Align.CENTER);
		tbExpediente.setColumnAlignment("codigo", Table.Align.CENTER);
		tbExpediente.setColumnAlignment("asunto", Table.Align.CENTER);
		tbExpediente.setColumnAlignment("persona", Table.Align.CENTER);
		tbExpediente.setColumnAlignment("anio", Table.Align.CENTER);
		tbExpediente.setColumnAlignment("oficina", Table.Align.CENTER);
		tbExpediente.setColumnAlignment("req", Table.Align.CENTER);
		tbExpediente.setColumnAlignment("reqp", Table.Align.CENTER);
		tbExpediente.setColumnAlignment("pagos", Table.Align.CENTER);
		tbExpediente.setColumnAlignment("pagosp", Table.Align.CENTER);
		tbExpediente.setColumnAlignment("diast", Table.Align.CENTER);
		this.txtPaginaActual.setValue("1");
		tbExpediente.addItemClickListener(new ItemClickListener() {

			@Override
			public void itemClick(ItemClickEvent event) {
				// TODO Auto-generated method stub
				Item item = tbExpediente.getItem(event.getItemId());
				if (event.isDoubleClick()) {

					if (!imprimir) {
						respuestaExpediente(item.getItemProperty("codigo")
								.getValue().toString());
					} else {
						codigoExpediente = item.getItemProperty("codigo")
								.getValue().toString();
					}
				} else {
					codigoExpediente = item.getItemProperty("codigo")
							.getValue().toString();
				}
			}
		});

		this.txtCodExpediente.setImmediate(true);
		this.txtAsuntoExpediente.setImmediate(true);
		this.txtCodigoPersona.setImmediate(true);
		this.txtNombrePersona.setImmediate(true);
		this.txtAnio.setImmediate(true);
		this.txtCodExpediente.addShortcutListener(new ShortcutListener("",
				KeyCode.ENTER, null) {

			@Override
			public void handleAction(Object sender, Object target) {

				if (target instanceof TextField) {
					txtPaginaActual.setValue("1");
					getAllExpedientes();
				}
			}
		});

	}

	@SuppressWarnings("unchecked")
	public void getAllExpedientes() {
		IndexedContainer contenedor = (IndexedContainer) tbExpediente
				.getContainerDataSource();
		contenedor.removeAllItems();
		codigoExpediente = null;
		Expediente expediente = new Expediente();
		expediente.setCodigo(this.txtCodExpediente.getValue().toString());
		expediente.setAsunto(this.txtAsuntoExpediente.getValue().toString());
		expediente.setAnio(this.txtAnio.getValue().toString());

		Persona persona = new Persona();
		persona.setCodigoPersona(this.txtCodigoPersona.getValue().toString());
		persona.setNombreCompleto(this.txtNombrePersona.getValue().toString());
		expediente.setSolicitante(persona);
		ExpedienteCanonico expedienteCanonico = new ExpedienteCanonico();
		expedienteCanonico.setTipoBusqueda(tipoBusqueda);
		Busqueda busqueda = expedienteService.buscarExpediente(expediente,
				Long.parseLong(this.txtPaginaActual.getValue().toString()),
				expedienteCanonico);
		if (busqueda.getRegistos().size() == 0) {
			Notificacion.show(new Notificacion("No se encontraron Datos",
					Constantes.MENSAJE.TYPE_WARNING));
		} else {
			List<Expediente> expedientes = (List<Expediente>) busqueda
					.getRegistos();
			this.lblTotalPaginas.setValue(busqueda.getNumeroPaginas() + "");
			this.txtPaginaActual.setValue(busqueda.getPaginaActual() + "");
			Long numeroItem = (Long.parseLong(this.txtPaginaActual.getValue()
					.toString()) - 1) * Constantes.PAGINACION.EXPEDIENTE + 1;
			for (int i = 0; i < expedientes.size(); i++) {
				ExpedienteMovimiento movimiento = expedienteMovimientoServicio
						.obtenerExpedienteMovimiento(expedientes.get(i)
								.getCodigo());
				Item item = contenedor.addItem(i);
				item.getItemProperty("item").setValue(numeroItem++);
				item.getItemProperty("codigo").setValue(
						expedientes.get(i).getCodigo());
				item.getItemProperty("fecha").setValue(
						SigeUtil.obtenerFormatoFecha(expedientes.get(i)
								.getFechaExpediente()));
				item.getItemProperty("asunto").setValue(
						expedientes.get(i).getAsunto());
				item.getItemProperty("anio").setValue(
						expedientes.get(i).getAnio());
				item.getItemProperty("persona")
						.setValue(
								expedientes.get(i).getSolicitante()
										.getNombreCompleto());
				item.getItemProperty("oficina").setValue(
						expedienteMovimientoServicio
								.obtenerPrimerOficinaExpediente(expedientes
										.get(i).getCodigo()));
				item.getItemProperty("req")
						.setValue(
								expedienteRequisitoService
										.obtenerCantidadRequisitosPresentados(expedientes
												.get(i).getCodigo()));
				item.getItemProperty("reqP")
						.setValue(
								expedienteRequisitoService
										.obtenerCantidadRequisitosNoPresentados(expedientes
												.get(i).getCodigo()));
				item.getItemProperty("pagos").setValue(
						expedientePagoService
								.obtenerCantidadPagosPresentados(expedientes
										.get(i).getCodigo()));
				item.getItemProperty("pagosP").setValue(
						expedientePagoService
								.obtenerCantidadPagosNoPresentados(expedientes
										.get(i).getCodigo()));

				Date fechaInicio = (Date) expedientes.get(i)
						.getFechaExpediente();
				Long cantidadDiasNoHabiles = diaNohabilService
						.getCantidadDiasNoHabiles(fechaInicio, new Date());
				Integer diasTranscurridos = new Integer(
						SigeUtil.getDiasTranscurridos(expedientes.get(i)
								.getFechaExpediente()));
				diasTranscurridos = diasTranscurridos.intValue()
						- cantidadDiasNoHabiles.intValue();
				// diasTranscurridos=movimiento.getExpediente().getTipoTramite().getTipoAten().intValue()-diasTranscurridos.intValue();
				item.getItemProperty("diast").setValue(
						diasTranscurridos.toString());
			}
		}

	}

	@Override
	public void buttonClick(ClickEvent event) {
		// TODO Auto-generated method stub
		if (event.getSource() == this.btnSiguiente) {
			Long paginaActual = Long.parseLong(this.txtPaginaActual.getValue()
					.toString()) + 1;
			if (paginaActual <= Long.parseLong(this.lblTotalPaginas.getValue()
					.toString())) {
				this.txtPaginaActual.setValue(paginaActual.toString());
			}
			getAllExpedientes();
		} else if (event.getSource() == this.btnAtras) {
			Long paginaActual = Long.parseLong(this.txtPaginaActual.getValue()
					.toString()) - 1;
			if (paginaActual >= 1) {
				this.txtPaginaActual.setValue(paginaActual.toString());
			}
			getAllExpedientes();
		} else if (event.getSource() == this.btnInicio) {
			this.txtPaginaActual.setValue("1");
			getAllExpedientes();
		} else if (event.getSource() == this.btnFin) {
			this.txtPaginaActual.setValue(this.lblTotalPaginas.getValue());
			getAllExpedientes();
		} else if (event.getSource() == this.btnBuscarExpediente) {
			this.txtPaginaActual.setValue("1");
			getAllExpedientes();
		} else if (event.getSource() == this.btnImprimirCargo) {
			imprimirCargo();
		}
	}

	private void imprimirCargo() {
		if (codigoExpediente != null && !codigoExpediente.equalsIgnoreCase("")) {
			cargos = new ArrayList<Cargo>();
			cargo = new Cargo();
			Expediente expediente = expedienteService
					.obtenerExpediente(codigoExpediente);
			if (expediente != null) {
				cargo.setNumeroExpediente(expediente.getNumero());
				cargo.setAnio(expediente.getAnio());
				cargo.setAsunto(expediente.getAsunto());
				cargo.setDependenciaDestino(expedienteMovimientoServicio
						.obtenerPrimerOficinaExpediente(codigoExpediente));
				List<PersonaDocumento> documentos = personaDocumentoServicio
						.obtenerPorCodigoPersona(expediente.getSolicitante()
								.getCodigoPersona());
				for (PersonaDocumento pd : documentos) {
					if (pd.getTipoDocumentoPersona() != null) {
						if (pd.getTipoDocumentoPersona().getAbreviatura()
								.trim().equals("DNI")) {
							cargo.setDniSolicitante(pd.getNumeroDocumento());
						} else if ((pd.getTipoDocumentoPersona()
								.getAbreviatura().trim().equals("RUC"))) {
							cargo.setRucSolicitante(pd.getNumeroDocumento());
						}
					}
					if (cargo.getDniSolicitante() != null
							&& cargo.getRucSolicitante() != null
							&& cargo.getDniSolicitante().length() > 0
							&& cargo.getRucSolicitante().length() > 0) {
						break;
					}
				}
				cargo.setFechaIngreso(SigeUtil.obtenerFormatoFecha(expediente
						.getFechaExpediente()));
				if (expediente.getRepresentanteLegal() != null) {
					cargo.setNombreRepresentanteLegal(expediente
							.getRepresentanteLegal().getNombreCompleto());
				}
				cargo.setNombreSolicitante(expediente.getSolicitante()
						.getNombreCompleto());
				cargo.setNumeroFolios(expediente.getNumeroFolios() + "");
				cargo.setObservaciones(expediente.getObservaciones());
				cargos.add(cargo);
				Window ventana = SigeUtil.generarBuscador(new Window(),
						"IMPRIMIR CARGO", "800px", "550px");
				ventana.setContent(new PDFVizualizador(this, permiso, null,
						null, "ExpedienteCargo", cargos));
				UI.getCurrent().addWindow(ventana);
			}
		} else {
			Notificacion.show(new Notificacion(
					"Debe seleccionar un expediente",
					Constantes.MENSAJE.TYPE_ERROR));
		}
	}

	public void respuestaExpediente(String codExpediente) {
		if (quienLlama instanceof ExpedienteMantenimiento) {
			ExpedienteMantenimiento panel = (ExpedienteMantenimiento) quienLlama;
			panel.getExpediente(codExpediente);
		} else if (quienLlama instanceof ExpedienteTrazabilidadConsulta) {
			ExpedienteTrazabilidadConsulta panel = (ExpedienteTrazabilidadConsulta) quienLlama;
			panel.obtenerExpediente(codExpediente);
		}
		UI.getCurrent().removeWindow(windowContiene);
	}

	@AutoGenerated
	private AbsoluteLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");

		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");

		// tbExpediente
		tbExpediente = new Table();
		tbExpediente.setImmediate(false);
		tbExpediente.setWidth("860px");
		tbExpediente.setHeight("243px");
		mainLayout.addComponent(tbExpediente, "top:75.0px;left:20.0px;");

		// label_1
		label_1 = new Label();
		label_1.setImmediate(false);
		label_1.setWidth("-1px");
		label_1.setHeight("-1px");
		label_1.setValue("<b>Código / Asunto Expediente </b>");
		mainLayout.addComponent(label_1, "top:20.0px;left:20.0px;");

		// txtCodExpediente
		txtCodExpediente = new TextField();
		txtCodExpediente.setImmediate(false);
		txtCodExpediente.setWidth("60px");
		txtCodExpediente.setHeight("-1px");
		mainLayout.addComponent(txtCodExpediente, "top:40.0px;left:20.0px;");

		// txtAsuntoExpediente
		txtAsuntoExpediente = new TextField();
		txtAsuntoExpediente.setImmediate(false);
		txtAsuntoExpediente.setWidth("280px");
		txtAsuntoExpediente.setHeight("-1px");
		mainLayout.addComponent(txtAsuntoExpediente, "top:40.0px;left:80.0px;");

		// label_3
		label_3 = new Label();
		label_3.setImmediate(false);
		label_3.setWidth("-1px");
		label_3.setHeight("-1px");
		label_3.setValue("<b>Código / Solicitante </b>");
		mainLayout.addComponent(label_3, "top:20.0px;left:380.0px;");

		// txtCodigoPersona
		txtCodigoPersona = new TextField();
		txtCodigoPersona.setImmediate(false);
		txtCodigoPersona.setWidth("60px");
		txtCodigoPersona.setHeight("24px");
		mainLayout.addComponent(txtCodigoPersona, "top:40.0px;left:380.0px;");

		// txtNombrePersona
		txtNombrePersona = new TextField();
		txtNombrePersona.setImmediate(false);
		txtNombrePersona.setWidth("220px");
		txtNombrePersona.setHeight("-1px");
		mainLayout.addComponent(txtNombrePersona, "top:40.0px;left:440.0px;");

		// txtAnio
		txtAnio = new TextField();
		txtAnio.setImmediate(false);
		txtAnio.setWidth("70px");
		txtAnio.setHeight("-1px");
		mainLayout.addComponent(txtAnio, "top:40.0px;left:678.0px;");

		// label_4
		label_4 = new Label();
		label_4.setImmediate(false);
		label_4.setWidth("-1px");
		label_4.setHeight("-1px");
		label_4.setValue("<b> Año </b>");
		mainLayout.addComponent(label_4, "top:20.0px;left:678.0px;");

		// btnBuscarExpediente
		btnBuscarExpediente = new Button();
		btnBuscarExpediente.setCaption("Buscar");
		btnBuscarExpediente
				.setIcon(new ThemeResource("images/botones/find.png"));
		btnBuscarExpediente.setImmediate(true);
		btnBuscarExpediente.setWidth("110px");
		btnBuscarExpediente.setHeight("-1px");
		mainLayout
				.addComponent(btnBuscarExpediente, "top:38.0px;left:760.0px;");

		// btnAtras
		btnAtras = new Boton();
		btnAtras.setIcon(new ThemeResource("images/botones/previous.png"));
		btnAtras.setImmediate(false);
		btnAtras.setDescription("Página anterior");
		btnAtras.setWidth("30px");
		btnAtras.setHeight("25px");
		mainLayout.addComponent(btnAtras, "top:320.0px;left:350.0px;");

		// label_5
		label_5 = new Label();
		label_5.setImmediate(false);
		label_5.setWidth("-1px");
		label_5.setHeight("-1px");
		label_5.setValue("Página");
		mainLayout.addComponent(label_5, "top:320.0px;left:395.0px;");

		// txtPaginaActual
		txtPaginaActual = new TextField();
		txtPaginaActual.setImmediate(false);
		txtPaginaActual.setWidth("30px");
		txtPaginaActual.setHeight("-1px");
		mainLayout.addComponent(txtPaginaActual, "top:318.0px;left:434.0px;");

		// label_6
		label_6 = new Label();
		label_6.setImmediate(false);
		label_6.setWidth("-1px");
		label_6.setHeight("-1px");
		label_6.setValue("/");
		mainLayout.addComponent(label_6, "top:320.0px;left:470.0px;");

		// lblTotalPaginas
		lblTotalPaginas = new Label();
		lblTotalPaginas.setImmediate(false);
		lblTotalPaginas.setWidth("-1px");
		lblTotalPaginas.setHeight("-1px");
		lblTotalPaginas.setValue("1");
		mainLayout.addComponent(lblTotalPaginas, "top:320.0px;left:480.0px;");

		// btnInicio
		btnInicio = new Boton();
		btnInicio.setIcon(new ThemeResource("images/botones/start.png"));
		btnInicio.setImmediate(false);
		btnInicio.setDescription("Ir al inicio");
		btnInicio.setWidth("30px");
		btnInicio.setHeight("25px");
		mainLayout.addComponent(btnInicio, "top:320.0px;left:315.0px;");

		// btnSiguiente
		btnSiguiente = new Boton();
		btnSiguiente.setIcon(new ThemeResource("images/botones/next.png"));
		btnSiguiente.setImmediate(false);
		btnSiguiente.setDescription("Siguiente Página");
		btnSiguiente.setWidth("30px");
		btnSiguiente.setHeight("25px");
		mainLayout.addComponent(btnSiguiente, "top:320.0px;left:500.0px;");

		// btnFin
		btnFin = new Boton();
		btnFin.setIcon(new ThemeResource("images/botones/final.png"));
		btnFin.setImmediate(false);
		btnFin.setDescription("Ir al Final");
		btnFin.setWidth("30px");
		btnFin.setHeight("25px");
		mainLayout.addComponent(btnFin, "top:320.0px;left:535.0px;");

		// btnImprimirCargo
		btnImprimirCargo = new Button();
		btnImprimirCargo.setCaption("Imprimir Cargo");
		btnImprimirCargo.setIcon(new ThemeResource("images/botones/print.png"));
		btnImprimirCargo.setImmediate(false);
		btnImprimirCargo.setWidth("120px");
		btnImprimirCargo.setHeight("-1px");
		mainLayout.addComponent(btnImprimirCargo, "top:319.0px;left:720.0px;");

		return mainLayout;
	}

}
