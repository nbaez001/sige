package com.sige.gui;

import com.sige.util.Constantes;
import com.sige.util.Notificacion;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.Label;
import com.vaadin.ui.TextArea;
import com.vaadin.ui.UI;
import com.vaadin.ui.Window;
import com.vaadin.ui.Window.CloseEvent;

public class PanelMotivoObservacion extends CustomComponent implements
		ClickListener {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	private static final long serialVersionUID = 1L;
	@AutoGenerated
	private AbsoluteLayout mainLayout;
	@AutoGenerated
	private Label lblTipoOperacion;
	@AutoGenerated
	private Button btnCancelar;
	@AutoGenerated
	private Button btnAceptar;
	@AutoGenerated
	private Label lblTitulo;
	@AutoGenerated
	private TextArea txtAMotivo;
	/**
	 * The constructor should first build the main layout, set the composition
	 * root and then do any custom initialization.
	 * 
	 * The constructor will not be automatically regenerated by the visual
	 * editor.
	 */
	private Window windowContiene;
	private CustomComponent quienLlama;
	private Integer tipoOperacion;
	private Integer tamañoMaximo;

	public PanelMotivoObservacion(Window windowContiene,
			CustomComponent quienLlama, Integer tipoOperacion,
			Integer tamañoMaximo) {

		buildMainLayout();
		setCompositionRoot(mainLayout);

		this.windowContiene = windowContiene;
		this.quienLlama = quienLlama;
		this.tipoOperacion = tipoOperacion;
		this.tamañoMaximo = tamañoMaximo;
		postBuild();
		// TODO add user code here
	}

	private void postBuild() {
		lblTipoOperacion.setValue(tipoOperacion == 1 ? "Modificación"
				: "Eliminación");
		this.btnAceptar.addClickListener((ClickListener) this);
		this.btnCancelar.addClickListener((ClickListener) this);
		this.txtAMotivo.setMaxLength(tamañoMaximo);

		windowContiene.addCloseListener(new Window.CloseListener() {
			private static final long serialVersionUID = 1L;

			@Override
			public void windowClose(CloseEvent e) {
				if (e.getWindow() instanceof Window) {
					respuesta("", false);
				}
			}
		});
	}

	private void respuesta(String motivo, Boolean confirmado) {
		if (quienLlama instanceof UsuariosMantenimiento) {
			UsuariosMantenimiento panel = (UsuariosMantenimiento) quienLlama;
			panel.obtenerMotivo(motivo.toUpperCase(), confirmado, tipoOperacion);
		} else if (quienLlama instanceof TipoPersonaJuridicaMantenimiento) {
			TipoPersonaJuridicaMantenimiento panel = (TipoPersonaJuridicaMantenimiento) quienLlama;
			panel.obtenerMotivo(motivo.toUpperCase(), confirmado, tipoOperacion);
		} else if (quienLlama instanceof PersonaMantenimiento) {
			PersonaMantenimiento panel = (PersonaMantenimiento) quienLlama;
			panel.obtenerMotivo(motivo.toUpperCase(), confirmado, tipoOperacion);
		} else if (quienLlama instanceof PermisosMantenimiento) {
			PermisosMantenimiento panel = (PermisosMantenimiento) quienLlama;
			panel.obtenerMotivo(motivo.toUpperCase(), confirmado, tipoOperacion);
		} else if (quienLlama instanceof TipoTramiteMantenimiento) {
			TipoTramiteMantenimiento panel = (TipoTramiteMantenimiento) quienLlama;
			panel.obtenerMotivo(motivo.toUpperCase(), confirmado, tipoOperacion);
		} else if (quienLlama instanceof GruposMantenimiento) {
			GruposMantenimiento panel = (GruposMantenimiento) quienLlama;
			panel.obtenerMotivo(motivo.toUpperCase(), confirmado, tipoOperacion);
		} else if (quienLlama instanceof TipoViaMantenimiento) {
			TipoViaMantenimiento panel = (TipoViaMantenimiento) quienLlama;
			panel.obtenerMotivo(motivo.toUpperCase(), confirmado, tipoOperacion);
		} else if (quienLlama instanceof DependenciasMantenimiento) {
			DependenciasMantenimiento panel = (DependenciasMantenimiento) quienLlama;
			panel.obtenerMotivo(motivo.toUpperCase(), confirmado, tipoOperacion);
		} else if (quienLlama instanceof TipoDocumentoMantenimiento) {
			TipoDocumentoMantenimiento panel = (TipoDocumentoMantenimiento) quienLlama;
			panel.obtenerMotivo(motivo.toUpperCase(), confirmado, tipoOperacion);
		} else if (quienLlama instanceof TipoLugarMantenimiento) {
			TipoLugarMantenimiento panel = (TipoLugarMantenimiento) quienLlama;
			panel.obtenerMotivo(motivo.toUpperCase(), confirmado, tipoOperacion);
		} else if (quienLlama instanceof ViaMantenimiento) {
			ViaMantenimiento panel = (ViaMantenimiento) quienLlama;
			panel.obtenerMotivo(motivo.toUpperCase(), confirmado, tipoOperacion);
		} else if (quienLlama instanceof LugarMantenimiento) {
			LugarMantenimiento panel = (LugarMantenimiento) quienLlama;
			panel.obtenerMotivo(motivo.toUpperCase(), confirmado, tipoOperacion);
		}
		if (quienLlama instanceof DiaNoHabilMantenimiento) {
			DiaNoHabilMantenimiento panel = (DiaNoHabilMantenimiento) quienLlama;
			panel.obtenerMotivo(motivo.toUpperCase(), confirmado, tipoOperacion);
		}
		if (quienLlama instanceof TipoDocumentoPersonaMantenimiento) {
			TipoDocumentoPersonaMantenimiento panel = (TipoDocumentoPersonaMantenimiento) quienLlama;
			panel.obtenerMotivo(motivo.toUpperCase(), confirmado, tipoOperacion);
		}
		if (quienLlama instanceof PlantillaMantenimiento) {
			PlantillaMantenimiento panel = (PlantillaMantenimiento) quienLlama;
			panel.obtenerMotivo(motivo.toUpperCase(), confirmado, tipoOperacion);
		}
		if (quienLlama instanceof ExpedienteMantenimiento) {
			ExpedienteMantenimiento panel = (ExpedienteMantenimiento) quienLlama;
			panel.obtenerMotivo(motivo.toUpperCase(), confirmado, tipoOperacion);
		}
		UI.getCurrent().removeWindow(windowContiene);
	}

	@Override
	public void buttonClick(ClickEvent event) {
		if (event.getSource() == this.btnAceptar) {
			if (!txtAMotivo.isEmpty()) {
				respuesta(txtAMotivo.getValue(), true);
			} else {
				Notificacion.show(new Notificacion(
						"Debe ingresar el motivo de la "
								+ (tipoOperacion == 1 ? "Modificación"
										: "Eliminación"),
						Constantes.MENSAJE.TYPE_ERROR));
			}
		} else {
			respuesta(txtAMotivo.getValue(), false);
		}

	}

	@AutoGenerated
	private AbsoluteLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");

		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");

		// txtAMotivo
		txtAMotivo = new TextArea();
		txtAMotivo.setImmediate(false);
		txtAMotivo.setWidth("320px");
		txtAMotivo.setHeight("140px");
		mainLayout.addComponent(txtAMotivo, "top:40.0px;left:20.0px;");

		// lblTitulo
		lblTitulo = new Label();
		lblTitulo.setImmediate(false);
		lblTitulo.setWidth("-1px");
		lblTitulo.setHeight("-1px");
		lblTitulo.setValue("Ingrese Motivo de la");
		mainLayout.addComponent(lblTitulo, "top:16.0px;left:20.0px;");

		// btnAceptar
		btnAceptar = new Button();
		btnAceptar.setCaption("Aceptar");
		btnAceptar.setImmediate(true);
		btnAceptar.setWidth("-1px");
		btnAceptar.setHeight("-1px");
		mainLayout.addComponent(btnAceptar, "top:188.0px;left:185.0px;");

		// btnCancelar
		btnCancelar = new Button();
		btnCancelar.setCaption("Cancelar");
		btnCancelar.setImmediate(true);
		btnCancelar.setWidth("-1px");
		btnCancelar.setHeight("-1px");
		mainLayout.addComponent(btnCancelar, "top:188.0px;left:260.0px;");

		// lblTipoOperacion
		lblTipoOperacion = new Label();
		lblTipoOperacion.setImmediate(false);
		lblTipoOperacion.setWidth("-1px");
		lblTipoOperacion.setHeight("-1px");
		lblTipoOperacion.setValue("Label");
		mainLayout.addComponent(lblTipoOperacion, "top:16.0px;left:132.0px;");

		return mainLayout;
	}

}
