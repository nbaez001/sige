package com.sige.gui;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.springframework.web.context.request.RequestContextHolder;
import org.springframework.web.context.request.ServletRequestAttributes;

import com.sige.entidad.GrupoMenu;
import com.sige.entidad.Menu;
import com.sige.entidad.Usuario;
import com.sige.entidad.UsuarioAcceso;
import com.sige.entidad.UsuarioDependencia;
import com.sige.servicio.GrupoMenuServicio;
import com.sige.servicio.UsuarioAccesoServicio;
import com.sige.servicio.UsuarioDependenciaServicio;
import com.sige.servicio.UsuarioServicio;
import com.sige.util.BarraDeMenu;
import com.sige.util.BarraDeMenu.MenuElemento;
import com.sige.util.Constantes;
import com.sige.util.Injector;
import com.sige.util.Notificacion;
import com.sige.util.Permiso;
import com.sige.util.PlantillaVelocity;
import com.sige.util.SigeUtil;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.server.ThemeResource;
import com.vaadin.shared.ui.label.ContentMode;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.Label;
import com.vaadin.ui.MenuBar.Command;
import com.vaadin.ui.MenuBar.MenuItem;
import com.vaadin.ui.UI;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.Window;
import com.vaadin.ui.Window.CloseEvent;

public class PanelPrincipal extends CustomComponent implements Command {

	@AutoGenerated
	private VerticalLayout mainLayout;

	@AutoGenerated
	private VerticalLayout pnpPie;

	@AutoGenerated
	private Label lblPiePagina;

	@AutoGenerated
	private VerticalLayout pnlPrincipal;

	@AutoGenerated
	private VerticalLayout pnlCabecera;

	@AutoGenerated
	private BarraDeMenu menuPrincipal;

	private static final long serialVersionUID = 1L;

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	private UsuarioServicio usuarioServicio;

	private UsuarioAccesoServicio usuarioAccesoServicio;

	private GrupoMenuServicio grupoMenuServicio;

	private List<GrupoMenu> grupoMenu;

	private Map<String, Window> ventanasAbiertas;

	private PlantillaVelocity plantillaVelocity;

	private MenuItem mniCerrarSesion;

	private Map<String, Permiso> permisos;
	private UsuarioDependenciaServicio usuarioDependenciaServicio;

	public PanelPrincipal() {
		usuarioDependenciaServicio = Injector
				.obtenerServicio(UsuarioDependenciaServicio.class);
		usuarioServicio = Injector.obtenerServicio(UsuarioServicio.class);
		usuarioAccesoServicio = Injector
				.obtenerServicio(UsuarioAccesoServicio.class);
		grupoMenuServicio = Injector.obtenerServicio(GrupoMenuServicio.class);
		plantillaVelocity = new PlantillaVelocity();//Injector.obtenerServicio(PlantillaVelocity.class);
		buildMainLayout();
		pnpPie.setStyleName("pieLogin");
		ventanasAbiertas = new HashMap<String, Window>();
		permisos = new HashMap<String, Permiso>();
		setCompositionRoot(mainLayout);
	}

	public boolean armarMenu() {
		Usuario usuarioBuscar = new Usuario();
		usuarioBuscar.setUsuario(SigeUtil.obtenerUsuarioSesion());
		Usuario usuario = usuarioServicio.buscarPorUsuario(usuarioBuscar)
				.get(0);
		List<UsuarioAcceso> usuarioAccesos = usuarioAccesoServicio
				.buscarPorCodUsuario(usuario.getId(), false);

		if (usuarioAccesos != null && !usuarioAccesos.isEmpty()) {
			List<GrupoMenu> grupoMenuTemp = null;
			Map<Long, GrupoMenu> grupoMenuMap = new HashMap<Long, GrupoMenu>();
			for (UsuarioAcceso usuarioAcceso : usuarioAccesos) {
				grupoMenuTemp = grupoMenuServicio.buscarPorCodGrupo(
						usuarioAccesoServicio.getCodigoGrupo(usuarioAcceso
								.getId()), Boolean.FALSE);
				for (GrupoMenu grupMenu : grupoMenuTemp) {
					if (grupoMenuMap.get(grupMenu.getMenu().getId()) == null) {
						grupoMenuMap.put(grupMenu.getMenu().getId(), grupMenu);
						permisos.put(grupMenu.getMenu().getUrl(), new Permiso(
								grupMenu));
					} else {
						permisos.get(grupMenu.getMenu().getUrl()).addPermisos(
								grupMenu);
					}
				}
			}
			Set<Long> ids = grupoMenuMap.keySet();
			grupoMenu = new ArrayList<GrupoMenu>();
			for (Long id : ids) {
				grupoMenu.add(grupoMenuMap.get(id));
			}
			Collections.sort(grupoMenu, new Comparator<GrupoMenu>() {
				@Override
				public int compare(GrupoMenu o1, GrupoMenu o2) {
					return new Integer(o1.getMenu().getOrden())
							.compareTo(new Integer(o2.getMenu().getOrden()));
				}
			});
			for (GrupoMenu grupMenu : grupoMenu) {
				Menu menu = grupMenu.getMenu();
				if (menu.getMenu() == null) {
					if (tieneHijos(menu)) {
						agregarHijos(addItem(menuPrincipal, menu, null),
								menu.getId());
					} else {
						addItem(menuPrincipal, menu, this);
					}
				}
			}
			HashMap<String, Object> hashmap = new HashMap<String, Object>();
			hashmap.put("usuario", usuario);
			hashmap.put("sistema","Sistema Integrado de Gestión de Expedientes");
			/*
			String path = this.getClass().getClassLoader().getResource("").getPath();
			path =path +"WEB-INF/";
			path= path.substring(1, path.length());*/
			String htmlData = plantillaVelocity.enviarFormato(hashmap,"toolUsuario.vm");
			MenuItem mniUsuario = menuPrincipal.addItem(usuario.getUsuario(),
					new ThemeResource("../runo/icons/16/user.png"), null);
			mniCerrarSesion = mniUsuario.addItem("Cerrar Sesion",
					new ThemeResource("../runo/icons/16/cancel.png"), this);
			mniUsuario.setDescription(htmlData);
		} else {
			return false;
		}
		return true;
	}

	private void agregarHijos(MenuElemento menuElemento, Long id) {
		for (GrupoMenu grupMenu : grupoMenu) {
			Menu menu = grupMenu.getMenu();
			if (menu.getMenu() != null && menu.getMenu().getId() == id) {
				if (tieneHijos(menu)) {
					agregarHijos(addItem(menuElemento, menu, this),
							menu.getId());
				} else {
					addItem(menuElemento, menu, this);
				}
			}
		}
	}

	private boolean tieneHijos(Menu menu) {
		for (GrupoMenu grupMenu : grupoMenu) {
			Menu men = grupMenu.getMenu();
			if (men.getMenu() != null && menu.getId() == men.getMenu().getId()) {
				return true;
			}
		}
		return false;
	}

	private MenuElemento addItem(Object o, Menu menu, Command command) {
		if (o instanceof MenuElemento) {
			return ((MenuElemento) o).addItem(menu.getUrl(),
					menu.getDecripcion(), command);
		} else if (o instanceof BarraDeMenu) {
			return ((BarraDeMenu) o).addItem(menu.getUrl(),
					menu.getDecripcion(), command);
		}
		return null;
	}

	@Override
	public void menuSelected(MenuItem selectedItem) {
		if (selectedItem.equals(mniCerrarSesion)) {
			ServletRequestAttributes requestAttributes = (ServletRequestAttributes) RequestContextHolder
					.currentRequestAttributes();
			HttpServletRequest request = requestAttributes.getRequest();
			HttpSession session = request.getSession(false);
			session.invalidate();
			UI.getCurrent().getPage().reload();
		} else if (selectedItem instanceof MenuElemento) {
			MenuElemento menuElemento = (MenuElemento) selectedItem;
			String codigo = menuElemento.getCodigo();

			Window ventana = new Window();
			CustomComponent customComponent = null;
			String height = "-1.0";
			String width = "-1.0";
			String titulo = "";
			if (ventanasAbiertas.get(codigo) != null) {
				ventanasAbiertas.get(codigo).center();
				ventanasAbiertas.get(codigo).focus();
				return;
			}
			ventanasAbiertas.put(codigo, ventana);
			ventana.setModal(false);
			ventana.setResizable(false);
			ventana.center();
			ventana.addCloseListener(new Window.CloseListener() {
				private static final long serialVersionUID = 1L;

				@Override
				public void windowClose(CloseEvent e) {
					if (e.getWindow() instanceof Window) {
						for (String key : ventanasAbiertas.keySet()) {
							if (ventanasAbiertas.get(key).equals(e.getWindow())) {
								ventanasAbiertas.remove(key);
								return;
							}
						}
					}
				}
			});
			if (codigo.equals(Constantes.OPCION.MANTENIMIENTO_PERMISOS)) {
				customComponent = new PermisosMantenimiento(null,
						permisos.get(codigo));
				titulo = "ACCESOS DE USUARIO";
				height = "540px";
				width = "503px";
			} else if (codigo.equals(Constantes.OPCION.MANTENIMIENTO_USUARIOS)) {
				customComponent = new UsuariosMantenimiento(null,
						permisos.get(codigo));
				titulo = "MANTENIMIENTO DE USUARIOS";
				height = "400px";
				width = "720px";
			} else if (codigo
					.equals(Constantes.OPCION.MANTENIMIENTO_TIPODOCUMENTO)) {
				customComponent = new TipoDocumentoMantenimiento(null,
						permisos.get(codigo));
				titulo = "MANTENIMIENTO DE TIPO DE DOCUMENTO";
				height = "360px";
				width = "650px";
			} else if (codigo.equals(Constantes.OPCION.MANTENIMIENTO_TIPOLUGAR)) {
				customComponent = new TipoLugarMantenimiento(null,
						permisos.get(codigo));
				titulo = "MANTENIMIENTO DE TIPO DE LUGAR";
				height = "350px";
				width = "690px";
			} else if (codigo.equals(Constantes.OPCION.MANTENIMIENTO_GRUPOS)) {
				customComponent = new GruposMantenimiento(null,
						permisos.get(codigo));
				titulo = "MANTENIMIENTO DE GRUPOS";
				height = "340px";
				width = "600px";
			} else if (codigo.equals(Constantes.OPCION.MANTENIMIENTO_TUPA)) {
				customComponent = new TipoTramiteMantenimiento(null,
						permisos.get(codigo));
				titulo = "MANTENIMIENTO DE PROCEDIMIENTOS TUPA/NO TUPA";
				height = "335px";
				width = "715px";
			} else if (codigo
					.equals(Constantes.OPCION.MANTENIMIENTO_DEPENDENCIAS)) {
				customComponent = new DependenciasMantenimiento(null,
						permisos.get(codigo));
				titulo = "MANTENIMIENTO DE DEPENDENCIAS";
				height = "335px";
				width = "680px";
			} else if (codigo.equals(Constantes.OPCION.MANTENIMIENTO_TIPOVIA)) {
				customComponent = new TipoViaMantenimiento(null,
						permisos.get(codigo));
				titulo = "MANTENIMIENTO DE TIPOS DE VIAS";
				height = "350px";
				width = "680px";
			} else if (codigo.equals(Constantes.OPCION.MANTENIMIENTO_VIAS)) {
				customComponent = new ViaMantenimiento(null, null,
						permisos.get(codigo));
				titulo = "MANTENIMIENTO DE VIAS";
				height = "350px";
				width = "680px";
			} else if (codigo.equals(Constantes.OPCION.MANTENIMIENTO_PERSONAS)) {
				customComponent = new PersonaMantenimiento(null, null,
						permisos.get(codigo));
				titulo = "MANTENIMIENTO DE PERSONAS";
				height = "485px";
				width = "645px";
			} else if (codigo.equals(Constantes.OPCION.MANTENIMIENTO_LUGARES)) {
				customComponent = new LugarMantenimiento(null, null,
						permisos.get(codigo));
				titulo = "MANTENIMIENTO DE LUGARES";
				height = "210px";
				width = "650px";
			} else if (codigo.equals(Constantes.OPCION.PRCESOS_EXPEDIENTES)) {
				customComponent = new ExpedienteMantenimiento(null,
						permisos.get(codigo));
				titulo = "REGISTRO DE EXPEDIENTE";
				height = "560px";
				width = "765px";
			} else if (codigo
					.equals(Constantes.OPCION.MANTENIMIENTO_DIANOHABIL)) {
				customComponent = new DiaNoHabilMantenimiento(null,
						permisos.get(codigo));
				titulo = "MANTENIMIENTO DE DIAS NO HABILES";
				height = "340px";
				width = "560px";
			} else if (codigo
					.equals(Constantes.OPCION.MANTENIMIENTO_TIPOPERSONAJURIDICA)) {
				customComponent = new TipoPersonaJuridicaMantenimiento(null,
						permisos.get(codigo));
				titulo = "MANTENIMIENTO DE TIPO PERSONA JURIDICA";
				height = "365px";
				width = "750px";
			} else if (codigo
					.equals(Constantes.OPCION.PROCESO_MOVIMIENTO_EXPEDIENTE)) {
				List<UsuarioDependencia> usuarioDependencias = usuarioDependenciaServicio
						.buscarPorCodigoUsuario(
								SigeUtil.obtenerCodigoUsuarioSesion(), false);
				if (usuarioDependencias.size() > 0) {
					customComponent = new MovimientoExpedienteProceso(ventana,
							null, permisos.get(codigo));
					titulo = "MOVIMIENTO DE EXPEDIENTES";
					height = "335px";
					width = "890px";
					((MovimientoExpedienteProceso) customComponent)
							.getInformacionDocumento(1);
				} else {
					Notificacion
							.show(new Notificacion(
									"El usuario en sesión no tiene acceso a ninguna dependencia",
									Constantes.MENSAJE.TYPE_ERROR));
					ventanasAbiertas.remove(codigo);
				}
			} else if (codigo
					.equals(Constantes.OPCION.MANTENIMIENTO_PLANTILLAS)) {
				customComponent = new PlantillaMantenimiento(null, this,
						permisos.get(codigo));
				titulo = "MANTENIMIENTO DE PLANTILLAS";
				width = "460px";
				height = "480px";
			} else if (codigo
					.equals(Constantes.OPCION.PROCESO_ANEXAR_EXPEDIENTE)) {
				customComponent = new AnexosExpedienteProceso(null);
				titulo = "ANEXAR EXPEDIENTES";
				width = "865px";
				height = "515px";
			} else if (codigo.equals(Constantes.OPCION.CONSULTAR_EXPEDIENTES)) {
				customComponent = new ExpedienteConsulta(null,
						permisos.get(codigo));
				titulo = "CONSULTAR EXPEDIENTES";
				width = "820px";
				height = "400px";
			} else if (codigo.equals(Constantes.OPCION.CONSULTAR_AUDITORIA)) {
				customComponent = new AuditoriaConsulta();
				titulo = "CONSULTA DE AUDITORIA";
				width = "920px";
				height = "380px";
			} else if (codigo
					.equals(Constantes.OPCION.CONSULTAR_EXPEDIENTES_ESTADISTICA)) {
				customComponent = new ExpedienteEstadisticasConsultar();
				titulo = "CONSULTAS ESTADISTICAS";
				width = "860px";
				height = "600px";
			} else if (codigo.equals(Constantes.OPCION.CONSULTAR_TRAZABILIDAD)) {
				customComponent = new ExpedienteTrazabilidadConsulta();
				titulo = "CONSULTA DE TRAZABILIDAD";
				width = "820px";
				height = "620px";
			} else if (codigo.equals(Constantes.OPCION.PROCESO_IMPRIMIR_CARGOS)) {
				customComponent = new ImprimirCargosProceso(
						permisos.get(codigo));
				titulo = "IMPRIMIR CARGOS";
				width = "600px";
				height = "360px";
			} else if (codigo.equals(Constantes.OPCION.AYUDA_ACERCA_DE)) {
				customComponent = new PanelAcercaDe();
				titulo = "ACERCA DE SIGE";
				width = "540px";
				height = "280px";
			} else if (codigo
					.equals(Constantes.OPCION.MANTENIMIENTO_TIPODOCUMENTOPERSONA)) {
				customComponent = new TipoDocumentoPersonaMantenimiento(null,
						permisos.get(codigo));
				titulo = "MANTENIMIENTO DE TIPO DOCUMENTO PERSONA";
				height = "350px";
				width = "680px";
			} else if (codigo
					.equals(Constantes.OPCION.CONSULTAR_TIEMPO_PROMEDIO_ATENCION_TRAMITE_X_OFICINA)) {
				customComponent = new TiempoPromedioAtencionTramitePorOficina(
						null, permisos.get(codigo));
				titulo = "TIEMPO PROMEDIO DE TRAMITE POR OFICINA";
				height = "500px";
				width = "700px";
			} else if (codigo
					.equals(Constantes.OPCION.CONSULTAR_TIEMPO_PROMEDIO_ATENCION_OFICINA_X_TRAMITE)) {
				customComponent = new TiempoPromedioAtencionOficinaPorTramite(
						null, permisos.get(codigo));
				titulo = "TIEMPO PROMEDIO DE OFICINA POR TRAMITE";
				height = "500px";
				width = "700px";
			} else if (codigo
					.equals(Constantes.OPCION.CONSULTAR_MOVIMIENTO_EXPEDIENTES)) {
				customComponent = new ExpedienteMovimientoConsultar(
						permisos.get(codigo));
				titulo = "CONSULTA DE MOVIMIENTO DE EXPEDIENTES";
				height = "340px";
				width = "660px";

			} else if (codigo
					.equals(Constantes.OPCION.PROCESO_IMPRIMIR_CARGO_EXPEDIENTE)) {
				customComponent = new ExpedienteBuscar(ventana, null, 3, true,
						permisos.get(codigo));
				height = "390px";
				width = "910px";
				titulo = "IMPRIMIR CARGOS";
			}

			if (customComponent != null) {
				ventana.setContent(customComponent);
				ventana.setCaption(titulo);
				ventana.setWidth(width);
				ventana.setHeight(height);
				ventana.setScrollLeft(0);
				ventana.setScrollTop(0);
				UI.getCurrent().addWindow(ventana);
			}
		}

	}

	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(false);

		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");

		// pnlCabecera
		pnlCabecera = buildPnlCabecera();
		mainLayout.addComponent(pnlCabecera);

		// pnlPrincipal
		pnlPrincipal = new VerticalLayout();
		pnlPrincipal.setImmediate(false);
		pnlPrincipal.setWidth("100.0%");
		pnlPrincipal.setHeight("100.0%");
		pnlPrincipal.setMargin(false);
		mainLayout.addComponent(pnlPrincipal);
		mainLayout.setExpandRatio(pnlPrincipal, 1.0f);

		// pnpPie
		pnpPie = buildPnpPie();
		mainLayout.addComponent(pnpPie);
		mainLayout.setComponentAlignment(pnpPie, new Alignment(24));

		return mainLayout;
	}

	@AutoGenerated
	private VerticalLayout buildPnlCabecera() {
		// common part: create layout
		pnlCabecera = new VerticalLayout();
		pnlCabecera.setImmediate(false);
		pnlCabecera.setWidth("100.0%");
		pnlCabecera.setHeight("-1px");
		pnlCabecera.setMargin(false);

		// menuPrincipal
		menuPrincipal = new BarraDeMenu();
		menuPrincipal.setImmediate(false);
		menuPrincipal.setWidth("100.0%");
		menuPrincipal.setHeight("-1px");
		pnlCabecera.addComponent(menuPrincipal);

		return pnlCabecera;
	}

	@AutoGenerated
	private VerticalLayout buildPnpPie() {
		// common part: create layout
		pnpPie = new VerticalLayout();
		pnpPie.setImmediate(false);
		pnpPie.setWidth("100.0%");
		pnpPie.setHeight("30px");
		pnpPie.setMargin(false);

		// lblPiePagina
		lblPiePagina = new Label();
		lblPiePagina.setImmediate(false);
		lblPiePagina.setWidth("-1px");
		lblPiePagina.setHeight("-1px");
		lblPiePagina
				.setValue("Sistema Integrado de Gesti&oacute;n de Expedientes");
		lblPiePagina.setContentMode(ContentMode.HTML);
		pnpPie.addComponent(lblPiePagina);
		pnpPie.setComponentAlignment(lblPiePagina, new Alignment(48));

		return pnpPie;
	}

}