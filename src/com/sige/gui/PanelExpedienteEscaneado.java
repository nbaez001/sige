package com.sige.gui;

import java.util.List;

import org.vaadin.risto.formsender.FormSenderBuilder;
import org.vaadin.risto.formsender.widgetset.client.shared.Method;

import com.sige.entidad.Expediente;
import com.sige.entidad.ExpedienteEscaneado;
import com.sige.servicio.ExpedienteEscaneadoServicio;
import com.sige.util.Constantes;
import com.sige.util.Injector;
import com.sige.util.Notificacion;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Item;
import com.vaadin.data.Property;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.util.IndexedContainer;
import com.vaadin.server.ThemeResource;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.Table;
import com.vaadin.ui.Button.ClickListener;

public class PanelExpedienteEscaneado extends CustomComponent implements
		ClickListener {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@AutoGenerated
	private AbsoluteLayout mainLayout;

	@AutoGenerated
	private Button btnDescargar;

	@AutoGenerated
	private Table tblExpedientesEscaneados;

	/**
	 * The constructor should first build the main layout, set the composition
	 * root and then do any custom initialization.
	 * 
	 * The constructor will not be automatically regenerated by the visual
	 * editor.
	 */
	private ExpedienteEscaneado expedienteEscaneadoSeleccionado;
	private Expediente expedienteSeleccionado;
	private ExpedienteEscaneadoServicio expedienteEscaneadoServicio;

	public PanelExpedienteEscaneado(Expediente expedienteSeleccionado) {
		this.expedienteEscaneadoServicio = Injector
				.obtenerServicio(ExpedienteEscaneadoServicio.class);
		buildMainLayout();
		setCompositionRoot(mainLayout);
		postBuild();
		this.expedienteSeleccionado = expedienteSeleccionado;
		getAllDocumentosCargados();
	}

	private void postBuild() {

		this.btnDescargar.addClickListener((ClickListener) this);

		IndexedContainer container = new IndexedContainer();
		container.addContainerProperty("id", Long.class, null);
		container.addContainerProperty("item", Long.class, null);
		container.addContainerProperty("dependencia", String.class, null);
		container.addContainerProperty("expediente", String.class, null);

		container.addContainerProperty("descripcion", String.class, null);
		container.addContainerProperty("usuario", String.class, null);

		tblExpedientesEscaneados.setContainerDataSource(container);
		tblExpedientesEscaneados.setVisibleColumns(new Object[] { "item",
				"dependencia", "expediente", "descripcion", "usuario" });

		tblExpedientesEscaneados.setColumnWidth("item", 25);
		tblExpedientesEscaneados.setColumnWidth("descripcion", 200);
		tblExpedientesEscaneados.setColumnWidth("dependencia", 200);
		tblExpedientesEscaneados.setColumnWidth("expediente", 150);
		tblExpedientesEscaneados.setColumnWidth("usuario", 150);

		tblExpedientesEscaneados.setColumnHeader("item", "Item");
		tblExpedientesEscaneados.setColumnHeader("descripcion", "Descripción");
		tblExpedientesEscaneados.setColumnHeader("dependencia", "Dependencia");
		tblExpedientesEscaneados.setColumnHeader("expediente", "Expediente");
		tblExpedientesEscaneados.setColumnHeader("usuario", "Usuario");

		tblExpedientesEscaneados.setColumnAlignment("item", Table.Align.CENTER);
		tblExpedientesEscaneados.setColumnAlignment("descripcion",
				Table.Align.CENTER);
		tblExpedientesEscaneados.setColumnAlignment("dependencia",
				Table.Align.CENTER);
		tblExpedientesEscaneados.setColumnAlignment("expediente",
				Table.Align.CENTER);
		tblExpedientesEscaneados.setColumnAlignment("usuario",
				Table.Align.CENTER);
		tblExpedientesEscaneados.setSelectable(true);
		tblExpedientesEscaneados.setImmediate(true);
		tblExpedientesEscaneados
				.addValueChangeListener(new Property.ValueChangeListener() {

					@Override
					public void valueChange(ValueChangeEvent event) {
						// TODO Auto-generated method stub
						Item item = tblExpedientesEscaneados
								.getItem(tblExpedientesEscaneados.getValue());
						if (item != null) {
							obtenerExpedienteEscaneado((Long) item
									.getItemProperty("id").getValue());
						}

					}

				});

	}

	@SuppressWarnings("unchecked")
	private void getAllDocumentosCargados() {
		List<ExpedienteEscaneado> expedientesEscaneados = expedienteEscaneadoServicio
				.obtenerExpedientesEscaneados(null, expedienteSeleccionado);
		for (ExpedienteEscaneado expEsc : expedientesEscaneados) {
			IndexedContainer container = (IndexedContainer) tblExpedientesEscaneados
					.getContainerDataSource();
			Item item = container.addItem(expEsc.getId());
			if (item != null) {

				item.getItemProperty("id").setValue(expEsc.getId());
				item.getItemProperty("item").setValue(
						new Long(container.size()));
				item.getItemProperty("descripcion").setValue(
						expEsc.getDescripcion());
				item.getItemProperty("dependencia").setValue(
						expEsc.getDependencia().getNombre());
				item.getItemProperty("expediente").setValue(
						expedienteSeleccionado.getAnio() + "-"
								+ expedienteSeleccionado.getNumero());
				item.getItemProperty("usuario").setValue(expEsc.getCreadoPor());

			}

		}
	}

	private void obtenerExpedienteEscaneado(Long idExpedienteEscaneado) {
		expedienteEscaneadoSeleccionado = expedienteEscaneadoServicio
				.obtener(idExpedienteEscaneado);
	}

	@Override
	public void buttonClick(ClickEvent event) {
		if (event.getSource() == this.btnDescargar) {
			if (expedienteEscaneadoSeleccionado != null) {
				FormSenderBuilder
						.create()
						.withUI(getUI())
						.withAction("./DescargarArchivo")
						.withMethod(Method.POST)
						.withValue(
								"fileLocation",
								Constantes.FILE_LOCATION.FILE_LOCATION_EXPEDIENTES_ESCANEADOS)
						.withValue(
								"fileName",
								expedienteEscaneadoSeleccionado
										.getNombreArchivo()).submit();

			} else {
				Notificacion.show(new Notificacion(
						"Debe seleccionar un expediente escaneado",
						Constantes.MENSAJE.TYPE_ERROR));
			}
		}

	}

	@AutoGenerated
	private AbsoluteLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");

		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");

		// tblExpedientesEscaneados
		tblExpedientesEscaneados = new Table();
		tblExpedientesEscaneados.setImmediate(false);
		tblExpedientesEscaneados.setWidth("620px");
		tblExpedientesEscaneados.setHeight("260px");
		mainLayout.addComponent(tblExpedientesEscaneados,
				"top:20.0px;left:20.0px;");

		// btnDescargar
		btnDescargar = new Button();
		btnDescargar.setCaption("Descargar");
		btnDescargar.setIcon(new ThemeResource("images/botones/down.png"));
		btnDescargar.setImmediate(false);
		btnDescargar.setWidth("110px");
		btnDescargar.setHeight("-1px");
		mainLayout.addComponent(btnDescargar, "top:286.0px;left:530.0px;");

		return mainLayout;
	}

}
