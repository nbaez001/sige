package com.sige.gui;

import java.util.Date;
import java.util.List;

import com.sige.entidad.Expediente;
import com.sige.entidad.ExpedienteMovimiento;
import com.sige.servicio.DiaNoHabilServicio;
import com.sige.servicio.ExpedienteMovimientoServicio;
import com.sige.servicio.ExpedientePagoServicio;
import com.sige.servicio.ExpedienteRequisitoServicio;
import com.sige.servicio.ExpedienteServicio;
import com.sige.util.Constantes;
import com.sige.util.Injector;
import com.sige.util.Notificacion;
import com.sige.util.Permiso;
import com.sige.util.SigeUtil;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Item;
import com.vaadin.data.Property;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.util.IndexedContainer;
import com.vaadin.server.ThemeResource;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.CheckBox;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.Table;
import com.vaadin.ui.UI;
import com.vaadin.ui.Window;

public class ExpedienteArchivar extends CustomComponent implements
		ClickListener {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@AutoGenerated
	private AbsoluteLayout mainLayout;
	@AutoGenerated
	private Button btnArchivar;
	@AutoGenerated
	private Table tblExpedientesVencidos;
	private ExpedienteServicio expedienteServicio;

	private ExpedienteMovimientoServicio expedienteMovimientoServicio;

	private ExpedienteRequisitoServicio expedienteRequisitoService;

	private ExpedientePagoServicio expedientePagoService;

	private DiaNoHabilServicio diaNoHabilServicio;
	/**
	 * The constructor should first build the main layout, set the composition
	 * root and then do any custom initialization.
	 * 
	 * The constructor will not be automatically regenerated by the visual
	 * editor.
	 */
	private CustomComponent quienLlama;
	private Permiso permiso;
	private ExpedienteMovimiento expedienteMovimientoSeleccionado;

	public ExpedienteArchivar(CustomComponent quienLlama, Permiso permiso) {
		expedienteServicio = Injector.obtenerServicio(ExpedienteServicio.class);
		expedienteMovimientoServicio = Injector
				.obtenerServicio(ExpedienteMovimientoServicio.class);
		expedienteRequisitoService = Injector
				.obtenerServicio(ExpedienteRequisitoServicio.class);
		expedientePagoService = Injector
				.obtenerServicio(ExpedientePagoServicio.class);
		diaNoHabilServicio = Injector.obtenerServicio(DiaNoHabilServicio.class);

		this.quienLlama = quienLlama;
		this.permiso = permiso;
		expedienteMovimientoSeleccionado = null;
		buildMainLayout();
		postBuild();
		setCompositionRoot(mainLayout);
		getAllExpedientesVencidos();

		// TODO add user code here
	}

	public void postBuild() {

		btnArchivar.addClickListener((ClickListener) this);

		IndexedContainer contenedor = new IndexedContainer();
		contenedor.addContainerProperty("id", Long.class, null);
		contenedor.addContainerProperty("codigo", String.class, null);
		contenedor.addContainerProperty("asunto", String.class, null);
		contenedor.addContainerProperty("persona", String.class, null);
		contenedor.addContainerProperty("anio", String.class, null);
		contenedor.addContainerProperty("oficina", String.class, null);
		contenedor.addContainerProperty("req", Long.class, null);
		contenedor.addContainerProperty("reqP", Long.class, null);
		contenedor.addContainerProperty("pagos", Long.class, null);
		contenedor.addContainerProperty("pagosP", Long.class, null);

		tblExpedientesVencidos.setImmediate(true);
		tblExpedientesVencidos.setSelectable(true);
		tblExpedientesVencidos.setContainerDataSource(contenedor);
		tblExpedientesVencidos.setVisibleColumns(new Object[] { "codigo",
				"asunto", "persona", "anio", "oficina", "req", "reqP", "pagos",
				"pagosP" });
		tblExpedientesVencidos.setColumnHeader("codigo", "Código");
		tblExpedientesVencidos.setColumnHeader("asunto", "Asunto");
		tblExpedientesVencidos.setColumnHeader("persona", "Nombre Solicitante");
		tblExpedientesVencidos.setColumnHeader("anio", "Año");
		tblExpedientesVencidos.setColumnHeader("oficina", "Oficina");
		tblExpedientesVencidos.setColumnHeader("req", "Req P.");
		tblExpedientesVencidos.setColumnHeader("reqP", "Req E.");
		tblExpedientesVencidos.setColumnHeader("pagos", "Pag P.");
		tblExpedientesVencidos.setColumnHeader("pagosP", "Pag E.");

		tblExpedientesVencidos.setColumnWidth("codigo", 90);
		tblExpedientesVencidos.setColumnWidth("asunto", 190);
		tblExpedientesVencidos.setColumnWidth("persona", 130);
		tblExpedientesVencidos.setColumnWidth("anio", 50);
		tblExpedientesVencidos.setColumnWidth("oficina", 100);
		tblExpedientesVencidos.setColumnWidth("req", 40);
		tblExpedientesVencidos.setColumnWidth("reqP", 40);
		tblExpedientesVencidos.setColumnWidth("pagos", 40);
		tblExpedientesVencidos.setColumnWidth("pagosp", 40);

		tblExpedientesVencidos.setColumnAlignment("codigo", Table.Align.CENTER);
		tblExpedientesVencidos.setColumnAlignment("asunto", Table.Align.CENTER);
		tblExpedientesVencidos
				.setColumnAlignment("persona", Table.Align.CENTER);
		tblExpedientesVencidos.setColumnAlignment("anio", Table.Align.CENTER);
		tblExpedientesVencidos
				.setColumnAlignment("oficina", Table.Align.CENTER);
		tblExpedientesVencidos.setColumnAlignment("req", Table.Align.CENTER);
		tblExpedientesVencidos.setColumnAlignment("reqp", Table.Align.CENTER);
		tblExpedientesVencidos.setColumnAlignment("pagos", Table.Align.CENTER);
		tblExpedientesVencidos.setColumnAlignment("pagosp", Table.Align.CENTER);

		tblExpedientesVencidos
				.addValueChangeListener(new Property.ValueChangeListener() {

					@Override
					public void valueChange(ValueChangeEvent event) {
						// TODO Auto-generated method stub
						Item item = tblExpedientesVencidos
								.getItem(tblExpedientesVencidos.getValue());
						if (item != null) {
							expedienteMovimientoSeleccionado = expedienteMovimientoServicio
									.obtenerExpedienteMovimiento(item
											.getItemProperty("codigo")
											.getValue().toString());
						}
					}
				});

	}

	@SuppressWarnings("unchecked")
	public void getAllExpedientesVencidos() {
		IndexedContainer contenedor = (IndexedContainer) tblExpedientesVencidos
				.getContainerDataSource();
		contenedor.removeAllItems();
		List<Expediente> expedientes = expedienteServicio
				.obtenerExpedientesArchivadosProvicionalmente();
		if (expedientes.size() > 0) {
			Date fechaActual = new Date();
			Date fechaExpediente;
			Date fechaVencimiento;
			for (int i = 0; i < expedientes.size(); i++) {
				fechaExpediente = new Date(expedientes.get(i)
						.getFechaExpediente().getTime());
				fechaVencimiento = SigeUtil.sumarDiasFecha(
						fechaExpediente,
						diaNoHabilServicio.getCantidadDiasNoHabiles(
								fechaExpediente, fechaActual).intValue()
								+ diaNoHabilServicio.getDiasPlazoVencimiento());
				if (!(SigeUtil.obtenerFechaFormato(fechaVencimiento.toString(),
						0)
						.compareTo(
								SigeUtil.obtenerFechaFormato(
										fechaActual.toString(), 0)) == 0 || fechaActual
						.compareTo(fechaVencimiento) > 0)) {
					expedientes.remove(i);
				}
			}

			for (int i = 0; i < expedientes.size(); i++) {

				Item item = contenedor.addItem(i);
				item.getItemProperty("codigo").setValue(
						expedientes.get(i).getCodigo());
				item.getItemProperty("asunto").setValue(
						expedientes.get(i).getAsunto());
				item.getItemProperty("anio").setValue(
						expedientes.get(i).getAnio());
				item.getItemProperty("persona")
						.setValue(
								expedientes.get(i).getSolicitante()
										.getNombreCompleto());
				item.getItemProperty("oficina").setValue(
						expedienteMovimientoServicio
								.obtenerPrimerOficinaExpediente(expedientes
										.get(i).getCodigo()));
				item.getItemProperty("req")
						.setValue(
								expedienteRequisitoService
										.obtenerCantidadRequisitosPresentados(expedientes
												.get(i).getCodigo()));
				item.getItemProperty("reqP")
						.setValue(
								expedienteRequisitoService
										.obtenerCantidadRequisitosNoPresentados(expedientes
												.get(i).getCodigo()));
				item.getItemProperty("pagos").setValue(
						expedientePagoService
								.obtenerCantidadPagosPresentados(expedientes
										.get(i).getCodigo()));
				item.getItemProperty("pagosP").setValue(
						expedientePagoService
								.obtenerCantidadPagosNoPresentados(expedientes
										.get(i).getCodigo()));

			}
		}

	}

	@Override
	public void buttonClick(ClickEvent event) {
		if (event.getSource() == this.btnArchivar) {
			if (expedienteMovimientoSeleccionado != null) {
				Window ventana = SigeUtil.generarBuscador(new Window(),
						"ARCHIVAR EXPEDIENTE", "585", "310");

				ventana.setContent(new ArchivarExpedienteProceso(this, ventana,
						expedienteMovimientoSeleccionado));
				UI.getCurrent().addWindow(ventana);
				expedienteMovimientoSeleccionado = null;
			} else {
				Notificacion.show(new Notificacion(
						"Debe seleccionar un documento <br>para archivar ",
						Constantes.MENSAJE.TYPE_ERROR));
			}
		}

	}

	public void mostrarMensajeExitoArchivar() {
		Notificacion.show(new Notificacion("Se archivo el expediente "
				+ " con éxito", Constantes.MENSAJE.TYPE_SUCCES));
	}

	@AutoGenerated
	private AbsoluteLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");

		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");

		// tblExpedientesVencidos
		tblExpedientesVencidos = new Table();
		tblExpedientesVencidos.setImmediate(false);
		tblExpedientesVencidos.setWidth("860px");
		tblExpedientesVencidos.setHeight("243px");
		mainLayout.addComponent(tblExpedientesVencidos,
				"top:11.0px;left:20.0px;");

		// btnArchivar
		btnArchivar = new Button();
		btnArchivar.setCaption("Archivar");
		btnArchivar.setIcon(new ThemeResource("images/botones/archivar.png"));
		btnArchivar.setImmediate(true);
		btnArchivar.setWidth("120px");
		btnArchivar.setHeight("-1px");
		mainLayout.addComponent(btnArchivar, "top:260.0px;left:747.0px;");

		return mainLayout;
	}

}
