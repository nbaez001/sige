package com.sige.gui;

import java.util.List;
import java.util.Map;

import com.sige.entidad.TipoTramite;
import com.sige.gui.ui.NumberField;
import com.sige.servicio.PagosTupaService;
import com.sige.servicio.RequisitoTupaService;
import com.sige.servicio.TipoTramiteService;
import com.sige.servicio.UtilService;
import com.sige.util.Boton;
import com.sige.util.Busqueda;
import com.sige.util.Constantes;
import com.sige.util.Injector;
import com.sige.util.SigeUtil;
import com.sige.util.TextField;
import com.sige.util.TipoTramiteCanonico;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Item;
import com.vaadin.data.util.IndexedContainer;
import com.vaadin.event.FieldEvents.TextChangeEvent;
import com.vaadin.event.FieldEvents.TextChangeListener;
import com.vaadin.event.ItemClickEvent;
import com.vaadin.event.ItemClickEvent.ItemClickListener;
import com.vaadin.event.ShortcutAction.KeyCode;
import com.vaadin.event.ShortcutListener;
import com.vaadin.server.ThemeResource;
import com.vaadin.shared.ui.label.ContentMode;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.CheckBox;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.Notification;
import com.vaadin.ui.Panel;
import com.vaadin.ui.Table;
import com.vaadin.ui.UI;
import com.vaadin.ui.Window;
import com.vaadin.ui.themes.Reindeer;

public class TipoTramiteBuscar extends CustomComponent implements ClickListener {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@AutoGenerated
	private AbsoluteLayout mainLayout;
	@AutoGenerated
	private Label lblInfo;
	@AutoGenerated
	private Boton btnFin;
	@AutoGenerated
	private Boton btnSiguiente;
	@AutoGenerated
	private Label lblTotalPaginas;
	@AutoGenerated
	private Label label_4;
	@AutoGenerated
	private NumberField txtPaginaActual;
	@AutoGenerated
	private Label label_1;
	@AutoGenerated
	private Boton btnAtras;
	@AutoGenerated
	private Boton btnInicio;
	@AutoGenerated
	private Table tbTipoTramite;
	@AutoGenerated
	private Panel panel_5;
	@AutoGenerated
	private AbsoluteLayout absoluteLayout_4;
	@AutoGenerated
	private TextField txtAnio;
	@AutoGenerated
	private TextField txtNombre;
	@AutoGenerated
	private Button btnTodos;
	@AutoGenerated
	private CheckBox chkTodos;
	@AutoGenerated
	private Label label_3;
	@AutoGenerated
	private Label label_2;
	private Boton botonDetalle;

	private TipoTramiteMantenimiento tbTipoTramiteNuevo;

	private TipoTramiteService tipoTramiteServie;

	private RequisitoTupaService requisitoTupaService;

	private PagosTupaService pagosTupaService;
	private List<TipoTramite> lsTipoTramites;
	private TipoTramite tTramite;
	private Window windowContiene;
	private CustomComponent quienLlama;
	private TipoTramiteCanonico canonico;
	private UtilService utilService;
	private Map<String, Integer> columnLenghts;

	/**
	 * The constructor should first build the main layout, set the composition
	 * root and then do any custom initialization.
	 * 
	 * The constructor will not be automatically regenerated by the visual
	 * editor.
	 */
	public TipoTramiteBuscar(Window windowContiene, CustomComponent quienLlama,
			TipoTramiteCanonico canonico) {
		this.canonico = canonico;
		utilService = Injector.obtenerServicio(UtilService.class);
		tipoTramiteServie = Injector.obtenerServicio(TipoTramiteService.class);
		requisitoTupaService = Injector
				.obtenerServicio(RequisitoTupaService.class);
		pagosTupaService = Injector.obtenerServicio(PagosTupaService.class);
		buildMainLayout();
		setCompositionRoot(mainLayout);
		postBuild();

		this.windowContiene = windowContiene;
		this.quienLlama = quienLlama;

		// TODO add user code here
	}

	public void postBuild() {

		label_3.setContentMode(ContentMode.HTML);
		lblInfo.setContentMode(ContentMode.HTML);
		label_1.setContentMode(ContentMode.HTML);

		columnLenghts = utilService.getLengthColumns("tipotramite");
		txtNombre.setMaxLength(columnLenghts.get("nombre"));
		txtAnio.setMaxLength(4);
		this.btnTodos.addClickListener((ClickListener) this);
		this.btnInicio.addClickListener((ClickListener) this);
		this.btnAtras.addClickListener((ClickListener) this);
		this.btnFin.addClickListener((ClickListener) this);
		this.btnSiguiente.addClickListener((ClickListener) this);
		this.btnInicio.setStyleName(Reindeer.BUTTON_LINK);
		this.lblInfo.setStyleName("mensajeinfo");
		this.btnAtras.setStyleName(Reindeer.BUTTON_LINK);
		this.btnSiguiente.setStyleName(Reindeer.BUTTON_LINK);
		this.btnFin.setStyleName(Reindeer.BUTTON_LINK);
		this.txtPaginaActual.setValue("1");
		this.txtNombre.setId("nombre");
		this.txtAnio.setId("txanio");
		this.txtPaginaActual.setId("paginaActual");
		if (this.canonico != null) {
			txtAnio.setEnabled(false);
			txtAnio.setValue(canonico.getAnio());
			this.lblInfo.setValue(canonico.getMensaje());

		} else {
			txtAnio.setEnabled(true);
			txtAnio.setValue("");
			this.lblInfo
					.setValue("<center><b>De doble click en la celda para editarla</b></center/>");
		}
		IndexedContainer contenedor = new IndexedContainer();
		contenedor.addContainerProperty("id", Long.class, null);
		contenedor.addContainerProperty("tiptramite", String.class, null);
		contenedor.addContainerProperty("nombre", String.class, null);
		contenedor.addContainerProperty("anio", String.class, null);
		contenedor.addContainerProperty("req", Long.class, null);
		contenedor.addContainerProperty("pago", String.class, null);
		contenedor.addContainerProperty("tupa", String.class, null);
		contenedor.addContainerProperty("opciones", Boton.class, null);
		tbTipoTramite.setContainerDataSource(contenedor);
		tbTipoTramite.setVisibleColumns(new Object[] { "tiptramite", "nombre",
				"anio", "tupa", "req", "pago", "opciones" });

		tbTipoTramite.setColumnHeader("tiptramite", "Cod Tramite");
		tbTipoTramite.setColumnHeader("nombre", "Nombre");
		tbTipoTramite.setColumnHeader("anio", "Año");
		tbTipoTramite.setColumnHeader("tupa", "TUPA");
		tbTipoTramite.setColumnHeader("req", "N°Req");
		tbTipoTramite.setColumnHeader("pago", "Pago");
		tbTipoTramite.setColumnHeader("opciones", "Opc");
		tbTipoTramite.setColumnWidth("opciones", 45);
		tbTipoTramite.setColumnWidth("tiptramite", 85);
		tbTipoTramite.setColumnWidth("nombre", 370);
		tbTipoTramite.setColumnWidth("anio", 40);
		tbTipoTramite.setColumnWidth("req", 35);
		tbTipoTramite.setColumnWidth("pago", 45);
		tbTipoTramite.setColumnWidth("tupa", 25);
		tbTipoTramite.setSelectable(true);
		tbTipoTramite.setImmediate(true);
		tbTipoTramite.addItemClickListener(new ItemClickListener() {

			@Override
			public void itemClick(ItemClickEvent event) {
				// TODO Auto-generated method stub
				if (event.isDoubleClick()) {
					Item item = tbTipoTramite.getItem(event.getItemId());
					respuestaTipoTramiteNuevo(new String(item
							.getItemProperty("tiptramite").getValue()
							.toString()));
				}
			}
		});

		this.txtPaginaActual.addShortcutListener(new ShortcutListener("",
				KeyCode.ENTER, null) {

			private static final long serialVersionUID = 1L;

			@Override
			public void handleAction(Object sender, Object target) {
				if (target instanceof TextField
						&& ((TextField) target).getId().equals("paginaActual")) {
					Long paginaActual = null;
					try {
						paginaActual = Long.parseLong(txtPaginaActual
								.getValue().toString());
					} catch (Exception exception) {
						paginaActual = 1L;
						Notification notificacion = new Notification(
								"Mensaje de error",
								"<br/>Debe Ingresar un n&uacute;ero");
						notificacion.setDelayMsec(10000);
						notificacion
								.setPosition(Notification.POSITION_CENTERED_TOP);
						UI.getCurrent().showNotification(notificacion);
					}
					txtPaginaActual.setValue(paginaActual.toString());
					rellenarDatosTablaTipoTramite();
				}

			}
		});

		this.txtNombre.addShortcutListener(new ShortcutListener("",
				KeyCode.ENTER, null) {

			private static final long serialVersionUID = 1L;

			@Override
			public void handleAction(Object sender, Object target) {
				// TODO Auto-generated method stub
				if (target instanceof TextField
						&& ((TextField) target).getId().equals("nombre")) {
					txtPaginaActual.setValue("1");
					rellenarDatosTablaTipoTramite();

				}
			}
		});
		this.txtAnio.addShortcutListener(new ShortcutListener("",
				KeyCode.ENTER, null) {
			private static final long serialVersionUID = 1L;

			@Override
			public void handleAction(Object sender, Object target) {
				// TODO Auto-generated method stub
				if (target instanceof NumberField
						&& ((NumberField) target).getId().equals("txanio")) {
					txtPaginaActual.setValue("1");
					rellenarDatosTablaTipoTramite();
				}
			}
		});

		this.txtNombre.setImmediate(true);
		this.txtNombre.addTextChangeListener(new TextChangeListener() {

			@Override
			public void textChange(TextChangeEvent event) {
				// TODO Auto-generated method stub
				txtPaginaActual.setValue("1");
				txtNombre.setValue(event.getText());
				rellenarDatosTablaTipoTramite();
			}
		});

		this.txtAnio.setImmediate(true);
		this.txtAnio.addTextChangeListener(new TextChangeListener() {

			@Override
			public void textChange(TextChangeEvent event) {
				// TODO Auto-generated method stub
				txtPaginaActual.setValue("1");
				txtAnio.setValue(event.getText());
				rellenarDatosTablaTipoTramite();
			}
		});
	}

	public void obtenerCanonico(TipoTramiteCanonico canonico) {
		this.canonico = canonico;
	}

	@SuppressWarnings("unchecked")
	public void rellenarDatosTablaTipoTramite() {
		IndexedContainer contenedor = (IndexedContainer) tbTipoTramite.getContainerDataSource();
		contenedor.removeAllItems();
		String nombreTipoTramite = txtNombre.getValue().toString();
		String anioTipoTramite = txtAnio.getValue().toString();
		Long pagActual = Long.parseLong(txtPaginaActual.getValue().toString());
		TipoTramite tipoTramite = new TipoTramite();
		tipoTramite.setNombre(nombreTipoTramite);
		tipoTramite.setAnio(anioTipoTramite);
		TipoTramiteCanonico canonico = this.canonico;
		Busqueda busqueda = tipoTramiteServie.BuscarPorTipoTramite(tipoTramite,pagActual, canonico);

		if (busqueda.getRegistos().size() == 0) {
			/*Notification notificacion = new Notification("Mensaje del Sistema", "\n No se encontraron datos",Notification.TYPE_WARNING_MESSAGE);
			notificacion.setDelayMsec(3000);
			notificacion.setPosition(Notification.POSITION_BOTTOM_RIGHT);
			UI.getCurrent().showNotification(notificacion);*/
		} else {
			lsTipoTramites = (List<TipoTramite>) busqueda.getRegistos();

			this.lblTotalPaginas.setValue(busqueda.getNumeroPaginas() + "");
			this.txtPaginaActual.setValue(busqueda.getPaginaActual() + "");
			Long numeroItem = (Long.parseLong(this.txtPaginaActual.getValue()
					.toString()) - 1) * Constantes.PAGINACION.TIPOTRAMITE + 1;
			HorizontalLayout botones = new HorizontalLayout();

			for (int i = 0; i < lsTipoTramites.size(); i++) {
				tTramite = lsTipoTramites.get(i);
				botonDetalle = new Boton();
				botonDetalle.setImmediate(true);
				botonDetalle.setWidth("-1px");
				botonDetalle.setHeight("-1px");
				botonDetalle
						.setId(lsTipoTramites.get(i).getCodigoTipoTramite());
				botonDetalle.addClickListener((ClickListener) this);
				botonDetalle.setIcon(new ThemeResource(
						"images/botones/detalle.png"));
				botonDetalle.setStyleName(Reindeer.BUTTON_LINK);
				botonDetalle.setDescription("Ver Detalle");
				Item item = contenedor.addItem(i);
				item.getItemProperty("id").setValue(
						lsTipoTramites.get(i).getId());
				item.getItemProperty("tiptramite").setValue(
						lsTipoTramites.get(i).getCodigoTipoTramite());
				String tupa = lsTipoTramites.get(i).getTupa();
				tupa = (tupa.equals("T")) ? "SI" : "NO";
				Long cantRequisitos = requisitoTupaService
						.obtenerCantidadRequisitosPorTramite(lsTipoTramites
								.get(i).getCodigoTipoTramite());
				Long cantPagos = pagosTupaService
						.obtenerCantidadPagosPorTramite(lsTipoTramites.get(i)
								.getCodigoTipoTramite());
				String derechoPago = (cantPagos > 0) ? "DER." : "GRAT.";
				// System.out.println("cantRquisitos" + cantRequisitos);
				item.getItemProperty("nombre").setValue(
						lsTipoTramites.get(i).getNombre());
				item.getItemProperty("anio").setValue(
						lsTipoTramites.get(i).getAnio());
				item.getItemProperty("tupa").setValue(tupa);
				item.getItemProperty("opciones").setValue(botonDetalle);
				item.getItemProperty("req").setValue(cantRequisitos);
				item.getItemProperty("pago").setValue(derechoPago);
				botonDetalle.addClickListener(new ClickListener() {

					@Override
					public void buttonClick(ClickEvent event) {
						abrirVentanaDetalle(event.getButton().getId());
					}
				});
			}

		}
	}

	private void respuestaTipoTramiteNuevo(String codTramite) {
		if (quienLlama instanceof TipoTramiteMantenimiento) {
			TipoTramiteMantenimiento panel = (TipoTramiteMantenimiento) quienLlama;
			panel.obtenerDetalleTramite(codTramite);
		} else if (quienLlama instanceof ExpedienteMantenimiento) {
			ExpedienteMantenimiento panel = (ExpedienteMantenimiento) quienLlama;
			panel.obtenerDetalleTramite(codTramite);
		} else if (quienLlama instanceof ExpedienteConsulta) {
			ExpedienteConsulta panel = (ExpedienteConsulta) quienLlama;
			panel.obtenerTipoTramite(codTramite);
		} else if (quienLlama instanceof PlantillaMantenimiento) {
			PlantillaMantenimiento panel = (PlantillaMantenimiento) quienLlama;
			panel.obtenerTipoTramite(codTramite);
		} else if (quienLlama instanceof ExpedienteTrazabilidadConsulta) {
			ExpedienteTrazabilidadConsulta panel = (ExpedienteTrazabilidadConsulta) quienLlama;
			panel.obtenerTipoTramite(codTramite);
		}
		UI.getCurrent().removeWindow(windowContiene);
	}

	public void abrirVentanaDetalle(String codTramite) {
		Window subwindow = SigeUtil.generarBuscador(new Window(),
				"Detalle de Procedimiento", "550px", "500px");
		subwindow.setContent(new DetalleRequisitosTupa(subwindow, this,
				codTramite));

		UI.getCurrent().addWindow(subwindow);
	}

	@Override
	public void buttonClick(ClickEvent event) {
		if (event.getSource() == this.btnTodos) {
			if (chkTodos.getValue()) {
				this.txtNombre.setValue("");
				this.txtAnio.setValue("");
			}
			this.txtPaginaActual.setValue("1");
			;
			rellenarDatosTablaTipoTramite();
		} else if (event.getSource() == this.btnSiguiente) {
			Long paginaActual = Long.parseLong(this.txtPaginaActual.getValue()
					.toString()) + 1;
			if (paginaActual <= Long.parseLong(this.lblTotalPaginas.getValue()
					.toString())) {
				this.txtPaginaActual.setValue(paginaActual.toString());
			}
			rellenarDatosTablaTipoTramite();
		} else if (event.getSource() == this.btnAtras) {
			Long paginaActual = Long.parseLong(this.txtPaginaActual.getValue()
					.toString()) - 1;
			if (paginaActual >= 1) {
				this.txtPaginaActual.setValue(paginaActual.toString());
			}
			rellenarDatosTablaTipoTramite();
		} else if (event.getSource() == this.btnInicio) {
			this.txtPaginaActual.setValue("1");
			rellenarDatosTablaTipoTramite();
		} else if (event.getSource() == this.btnFin) {
			this.txtPaginaActual.setValue(this.lblTotalPaginas.getValue());
			rellenarDatosTablaTipoTramite();
		}
	}

	@AutoGenerated
	private AbsoluteLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("802px");
		mainLayout.setHeight("417px");

		// top-level component properties
		setWidth("802px");
		setHeight("417px");

		// panel_5
		panel_5 = buildPanel_5();
		mainLayout.addComponent(panel_5, "top:10.0px;left:10.0px;");

		// tbTipoTramite
		tbTipoTramite = new Table();
		tbTipoTramite.setImmediate(false);
		tbTipoTramite.setWidth("750px");
		tbTipoTramite.setHeight("250px");
		mainLayout.addComponent(tbTipoTramite, "top:93.0px;left:10.0px;");

		// btnInicio
		btnInicio = new Boton();
		btnInicio.setIcon(new ThemeResource("images/botones/start.png"));
		btnInicio.setImmediate(false);
		btnInicio.setWidth("35px");
		btnInicio.setHeight("-1px");
		mainLayout.addComponent(btnInicio, "top:350.0px;left:225.0px;");

		// btnAtras
		btnAtras = new Boton();
		btnAtras.setIcon(new ThemeResource("images/botones/previous.png"));
		btnAtras.setImmediate(false);
		btnAtras.setWidth("35px");
		btnAtras.setHeight("-1px");
		mainLayout.addComponent(btnAtras, "top:350.0px;left:265.0px;");

		// label_1
		label_1 = new Label();
		label_1.setImmediate(false);
		label_1.setWidth("-1px");
		label_1.setHeight("-1px");
		label_1.setValue("P&aacute;gina");
		mainLayout.addComponent(label_1, "top:350.0px;left:316.0px;");

		// txtPaginaActual
		txtPaginaActual = new NumberField();
		txtPaginaActual.setImmediate(false);
		txtPaginaActual.setWidth("35px");
		txtPaginaActual.setHeight("20px");
		mainLayout.addComponent(txtPaginaActual, "top:350.0px;left:355.0px;");

		// label_4
		label_4 = new Label();
		label_4.setImmediate(false);
		label_4.setWidth("-1px");
		label_4.setHeight("-1px");
		label_4.setValue("/");
		mainLayout.addComponent(label_4, "top:350.0px;left:393.0px;");

		// lblTotalPaginas
		lblTotalPaginas = new Label();
		lblTotalPaginas.setImmediate(false);
		lblTotalPaginas.setWidth("-1px");
		lblTotalPaginas.setHeight("-1px");
		lblTotalPaginas.setValue("9999");
		mainLayout.addComponent(lblTotalPaginas, "top:350.0px;left:400.0px;");

		// btnSiguiente
		btnSiguiente = new Boton();
		btnSiguiente.setIcon(new ThemeResource("images/botones/next.png"));
		btnSiguiente.setImmediate(false);
		btnSiguiente.setWidth("35px");
		btnSiguiente.setHeight("-1px");
		mainLayout.addComponent(btnSiguiente, "top:350.0px;left:440.0px;");

		// btnFin
		btnFin = new Boton();
		btnFin.setIcon(new ThemeResource("images/botones/final.png"));
		btnFin.setImmediate(false);
		btnFin.setWidth("35px");
		btnFin.setHeight("-1px");
		mainLayout.addComponent(btnFin, "top:350.0px;left:480.0px;");

		// lblInfo
		lblInfo = new Label();
		lblInfo.setStyleName("mensajeinfo");
		lblInfo.setImmediate(false);
		lblInfo.setWidth("200px");
		lblInfo.setHeight("-1px");
		lblInfo.setValue("<center><b>De doble click en una celda para editarla</b></center>");
		mainLayout.addComponent(lblInfo, "top:345.0px;left:560.0px;");

		return mainLayout;
	}

	@AutoGenerated
	private Panel buildPanel_5() {
		// common part: create layout
		panel_5 = new Panel();
		panel_5.setCaption("Opciones de Busqueda");
		panel_5.setImmediate(false);
		panel_5.setWidth("750px");
		panel_5.setHeight("73px");

		// absoluteLayout_4
		absoluteLayout_4 = buildAbsoluteLayout_4();
		panel_5.setContent(absoluteLayout_4);

		return panel_5;
	}

	@AutoGenerated
	private AbsoluteLayout buildAbsoluteLayout_4() {
		// common part: create layout
		absoluteLayout_4 = new AbsoluteLayout();
		absoluteLayout_4.setImmediate(false);
		absoluteLayout_4.setWidth("100.0%");
		absoluteLayout_4.setHeight("100.0%");

		// label_2
		label_2 = new Label();
		label_2.setImmediate(false);
		label_2.setWidth("-1px");
		label_2.setHeight("-1px");
		label_2.setValue("Nombre: ");
		absoluteLayout_4.addComponent(label_2, "top:14.0px;left:9.0px;");

		// label_3
		label_3 = new Label();
		label_3.setImmediate(false);
		label_3.setWidth("-1px");
		label_3.setHeight("-1px");
		label_3.setValue("A&ntilde;o:");
		absoluteLayout_4.addComponent(label_3, "top:14.0px;left:386.0px;");

		// chkTodos
		chkTodos = new CheckBox();
		chkTodos.setCaption("Todos");
		chkTodos.setImmediate(false);
		chkTodos.setWidth("60px");
		chkTodos.setHeight("-1px");
		absoluteLayout_4.addComponent(chkTodos, "top:14.0px;right:159.0px;");

		// btnTodos
		btnTodos = new Button();
		btnTodos.setCaption("Buscar");
		btnTodos.setIcon(new ThemeResource("images/botones/find.png"));
		btnTodos.setImmediate(true);
		btnTodos.setWidth("109px");
		btnTodos.setHeight("-1px");
		absoluteLayout_4.addComponent(btnTodos, "top:10.0px;left:620.0px;");

		// txtNombre
		txtNombre = new TextField();
		txtNombre.setImmediate(false);
		txtNombre.setWidth("100.0%");
		txtNombre.setHeight("-1px");
		absoluteLayout_4.addComponent(txtNombre,
				"top:10.0px;right:371.0px;left:59.0px;");

		// txtAnio
		txtAnio = new TextField();
		txtAnio.setImmediate(false);
		txtAnio.setWidth("77px");
		txtAnio.setHeight("-1px");
		absoluteLayout_4.addComponent(txtAnio, "top:12.0px;left:429.0px;");

		return absoluteLayout_4;
	}

}
