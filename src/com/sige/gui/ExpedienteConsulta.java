package com.sige.gui;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.poi.hssf.util.HSSFColor;
import org.apache.poi.ss.usermodel.CellStyle;

import com.sige.entidad.Dependencia;
import com.sige.entidad.Expediente;
import com.sige.entidad.Persona;
import com.sige.entidad.TipoTramite;
import com.sige.entidad.Usuario;
import com.sige.servicio.DependenciaServicio;
import com.sige.servicio.ExpedienteMovimientoServicio;
import com.sige.servicio.ExpedienteServicio;
import com.sige.servicio.PersonaServicio;
import com.sige.servicio.TipoTramiteService;
import com.sige.servicio.UsuarioServicio;
import com.sige.util.Boton;
import com.sige.util.Constantes;
import com.sige.util.ExpedientePDF;
import com.sige.util.Injector;
import com.sige.util.Notificacion;
import com.sige.util.Permiso;
import com.sige.util.SigeUtil;
import com.sige.util.TextField;
import com.sige.util.TipoTramiteCanonico;
import com.vaadin.addon.tableexport.ExcelExport;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Item;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.Property.ValueChangeListener;
import com.vaadin.data.util.IndexedContainer;
import com.vaadin.server.ThemeResource;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.Label;
import com.vaadin.ui.OptionGroup;
import com.vaadin.ui.PopupDateField;
import com.vaadin.ui.Table;
import com.vaadin.ui.UI;
import com.vaadin.ui.Window;

public class ExpedienteConsulta extends CustomComponent implements
		ClickListener {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@AutoGenerated
	private AbsoluteLayout mainLayout;
	@AutoGenerated
	private Button btnImprimir;
	@AutoGenerated
	private Button btnExportar;
	@AutoGenerated
	private Button btnConsultar;
	@AutoGenerated
	private Label lblMostrar;
	@AutoGenerated
	private OptionGroup optgMostrar;
	@AutoGenerated
	private Table tblExpedientes;
	@AutoGenerated
	private PopupDateField pdfHasta;
	@AutoGenerated
	private PopupDateField dpfDesde;
	@AutoGenerated
	private Label lblHasta;
	@AutoGenerated
	private Label lblDesde;
	@AutoGenerated
	private Label lblFechaIngreso;
	@AutoGenerated
	private TextField txtValor;
	@AutoGenerated
	private TextField txtCodigo;
	@AutoGenerated
	private Boton btnBuscar;
	@AutoGenerated
	private ComboBox cbxOpcionBusqueda;
	private static final long serialVersionUID = 1L;
	private Dependencia dependenciaObtenida;
	private DependenciaServicio dependenciaService;
	private Persona contribuyenteObtenido;
	private PersonaServicio personaService;
	private TipoTramiteService tipoTramiteService;
	private TipoTramite tipoTramiteObtenido;
	private Usuario usuarioObtendo;
	private UsuarioServicio usuarioService;
	private Integer codSeleccionado = 0;
	private Integer mostrar = Constantes.OPCION_MOSTRAR.MOSTRAR_TODOS;
	private String[] opcionBusqueda = { "Todas las dependencias",
			"Dependencia Inicial", "Por Solicitante", "Por Usuario",
			"Por Procedimiento TUPA", "Tiempo de atención",
			"Por Procedimiento NO TUPA", "Dependencia actual" };
	/**
	 * The constructor should first build the main layout, set the composition
	 * root and then do any custom initialization.
	 * 
	 * The constructor will not be automatically regenerated by the visual
	 * editor.
	 */
	private ExpedienteServicio expedienteServicio;
	private ExpedienteMovimientoServicio expedienteMovimientoServicio;
	private String sheetName = "";
	private String title = "";
	private String fileName = "";
	private Date desde;
	private Date hasta;
	private ExcelExport excelExport;
	private Integer tipoBusqueda;
	private String reportName;
	private List<ExpedientePDF> expedientesPDF;
	private ExpedientePDF expedientePDF;
	private Permiso permiso;
	private Map<String, Object> parametros;

	public ExpedienteConsulta(Window quienLlama, Permiso permisos) {
		this.usuarioService = Injector.obtenerServicio(UsuarioServicio.class);
		this.tipoTramiteService = Injector
				.obtenerServicio(TipoTramiteService.class);
		this.personaService = Injector.obtenerServicio(PersonaServicio.class);
		this.dependenciaService = Injector
				.obtenerServicio(DependenciaServicio.class);
		this.expedienteServicio = Injector
				.obtenerServicio(ExpedienteServicio.class);
		this.expedienteMovimientoServicio = Injector
				.obtenerServicio(ExpedienteMovimientoServicio.class);
		this.permiso = permisos;
		buildMainLayout();
		setCompositionRoot(mainLayout);
		postBuild();
	}

	private void postBuild() {
		this.btnExportar.addClickListener((ClickListener) this);
		this.btnConsultar.addClickListener((ClickListener) this);
		this.btnBuscar.addClickListener((ClickListener) this);
		this.btnImprimir.addClickListener((ClickListener) this);
		this.btnBuscar.setStyleName("buscar");
		this.txtCodigo.setId("codigo");
		this.txtValor.setId("valor");
		txtValor.setEnabled(false);
		txtCodigo.setEnabled(false);
		this.optgMostrar.addItem(1);
		this.optgMostrar.addItem(2);
		this.optgMostrar.addItem(3);
		this.optgMostrar.addItem(4);
		this.optgMostrar.addItem(5);
		btnBuscar.setEnabled(false);

		expedientesPDF = new ArrayList<ExpedientePDF>();

		parametros = new HashMap<String, Object>();

		tipoBusqueda = Constantes.TIPO_BUSQUEDA.OTRAS;
		reportName = "ExpedientesTodos";

		this.optgMostrar.setItemCaption(1, "todos");
		this.optgMostrar.setItemCaption(2, "En proceso");
		this.optgMostrar.setItemCaption(3, "Finalizados");
		this.optgMostrar.setItemCaption(4, "Vencidos Proceso");
		this.optgMostrar.setItemCaption(5, "Vencidos Espera");
		this.optgMostrar.select(1);
		this.optgMostrar.setStyleName("horizontal ");
		this.optgMostrar.setImmediate(true);
		this.btnImprimir.setId("imprimir");
		SigeUtil.validarBotones(permiso, btnImprimir);
		this.optgMostrar.addValueChangeListener(new ValueChangeListener() {

			@Override
			public void valueChange(ValueChangeEvent event) {
				// TODO Auto-generated method stub
				tblExpedientes.setVisibleColumns(new Object[] { "expediente",
						"fecha", "glosa", "estado", "tema", "oficinaInicio",
						"oficinaActual", "tiempoTrans", "diasFaltantes" });
				if (optgMostrar.getValue().toString().equals("1")) {
					mostrar = Constantes.OPCION_MOSTRAR.MOSTRAR_TODOS;
					cambiarColumnHeader(Constantes.TIPO_BUSQUEDA.OTRAS);
					consultar();
				} else if (optgMostrar.getValue().toString().equals("2")) {
					mostrar = Constantes.OPCION_MOSTRAR.MOSTRAR_EN_PROCESO;
					cambiarColumnHeader(Constantes.TIPO_BUSQUEDA.OTRAS);
					consultar();
				} else if (optgMostrar.getValue().toString().equals("3")) {
					mostrar = Constantes.OPCION_MOSTRAR.MOSTRAR_FINALIZADOS;
					cambiarColumnHeader(Constantes.TIPO_BUSQUEDA.OTRAS);
					tblExpedientes.setVisibleColumns(new Object[] {
							"expediente", "fecha", "glosa", "estado", "tema",
							"oficinaInicio", "oficinaActual", "tiempoTrans",
							"diasFaltantes", "tipoAtencion", "atendido" });
					consultar();
				} else if (optgMostrar.getValue().toString().equals("4")) {
					mostrar = Constantes.OPCION_MOSTRAR.MOSTRAR_VENCIDOS_EN_PROCESO;
					cambiarColumnHeader(Constantes.TIPO_BUSQUEDA.OTRAS);
					tblExpedientes.setVisibleColumns(new Object[] {
							"expediente", "fecha", "glosa", "estado", "tema",
							"oficinaInicio", "oficinaActual", "tiempoTrans",
							"diasFaltantes", "diasVencido" });
					consultar();
				} else if (optgMostrar.getValue().toString().equals("5")) {
					mostrar = Constantes.OPCION_MOSTRAR.MOSTRAR_VENCIDOS_EN_ESPERA;
					cambiarColumnHeader(Constantes.TIPO_BUSQUEDA.OTRAS);
					tblExpedientes.setVisibleColumns(new Object[] {
							"expediente", "fecha", "glosa", "estado", "tema",
							"oficinaInicio", "oficinaActual", "tiempoTrans",
							"diasFaltantes", "diasVencido" });
					consultar();
				}
			}
		});

		this.dpfDesde.setDateFormat("dd/MM/yyyy");
		this.dpfDesde.setValue(SigeUtil.getPrimerDiaDelMes());
		this.pdfHasta.setDateFormat("dd/MM/yyyy");
		this.pdfHasta.setValue(new Date());

		for (int i = 0; i < opcionBusqueda.length; i++) {
			cbxOpcionBusqueda.addItem(i);
			cbxOpcionBusqueda.setItemCaption(i, opcionBusqueda[i]);
		}
		cbxOpcionBusqueda.setValue(0);
		cbxOpcionBusqueda.setNullSelectionAllowed(false);
		cbxOpcionBusqueda.setImmediate(true);
		cbxOpcionBusqueda.addValueChangeListener(new ValueChangeListener() {

			@Override
			public void valueChange(ValueChangeEvent event) {
				// TODO Auto-generated method stub

				txtCodigo.setValue("");
				txtValor.setValue("");
				if (cbxOpcionBusqueda.getValue().toString().equals("0")) {
					codSeleccionado = 0;
					btnBuscar.setEnabled(false);
					cambiarColumnHeader(Constantes.TIPO_BUSQUEDA.OTRAS);
					reportName = "ExpedientesTodos";
				} else if (cbxOpcionBusqueda.getValue().toString().equals("1")) {
					codSeleccionado = 1;
					btnBuscar.setEnabled(true);
					reportName = "ExpedientesDependenciaInicial";
					cambiarColumnHeader(Constantes.TIPO_BUSQUEDA.OTRAS);
				} else if (cbxOpcionBusqueda.getValue().toString().equals("2")) {
					codSeleccionado = 2;
					btnBuscar.setEnabled(true);
					reportName = "ExpedientesContribuyente";
					cambiarColumnHeader(Constantes.TIPO_BUSQUEDA.OTRAS);
				} else if (cbxOpcionBusqueda.getValue().toString().equals("3")) {
					codSeleccionado = 3;
					btnBuscar.setEnabled(true);
					reportName = "ExpedientesTerminalista";
					cambiarColumnHeader(Constantes.TIPO_BUSQUEDA.OTRAS);
				} else if (cbxOpcionBusqueda.getValue().toString().equals("4")) {
					codSeleccionado = 4;
					btnBuscar.setEnabled(true);
					reportName = "ExpedientesProcedimientoTupa";
					cambiarColumnHeader(Constantes.TIPO_BUSQUEDA.OTRAS);
				} else if (cbxOpcionBusqueda.getValue().toString().equals("5")) {
					codSeleccionado = 5;
					btnBuscar.setEnabled(true);
					reportName = "ExpedientesTiempoAtencion";
					cambiarColumnHeader(Constantes.TIPO_BUSQUEDA.TIEMPO_ATENCION);
				} else if (cbxOpcionBusqueda.getValue().toString().equals("6")) {
					codSeleccionado = 6;
					btnBuscar.setEnabled(true);
					reportName = "ExpedientesProcedimientoNoTupa";
					cambiarColumnHeader(Constantes.TIPO_BUSQUEDA.OTRAS);
				} else if (cbxOpcionBusqueda.getValue().toString().equals("7")) {
					codSeleccionado = 7;
					btnBuscar.setEnabled(true);
					reportName = "ExpedientesDependenciaActual";
					cambiarColumnHeader(Constantes.TIPO_BUSQUEDA.OTRAS);
				}
			}
		});

		IndexedContainer contenedor = new IndexedContainer();
		contenedor.addContainerProperty("id", Long.class, null);
		contenedor.addContainerProperty("expediente", String.class, null);
		contenedor.addContainerProperty("fecha", String.class, null);
		contenedor.addContainerProperty("glosa", String.class, null);
		contenedor.addContainerProperty("estado", String.class, null);
		contenedor.addContainerProperty("tema", String.class, null);
		contenedor.addContainerProperty("oficinaInicio", String.class, null);
		contenedor.addContainerProperty("oficinaActual", String.class, null);
		contenedor.addContainerProperty("tiempoTrans", Integer.class, null);
		contenedor.addContainerProperty("diasFaltantes", Integer.class, null);
		contenedor.addContainerProperty("tipoAtencion", String.class, null);
		contenedor.addContainerProperty("atendido", String.class, null);
		contenedor.addContainerProperty("diasVencido", Long.class, null);

		tblExpedientes.setImmediate(true);
		tblExpedientes.setSelectable(true);
		tblExpedientes.setContainerDataSource(contenedor);
		tblExpedientes.setVisibleColumns(new Object[] { "expediente", "fecha",
				"glosa", "estado", "tema", "oficinaInicio", "oficinaActual",
				"tiempoTrans", "diasFaltantes" });
		tblExpedientes.setColumnHeader("expediente", "Expediente");
		tblExpedientes.setColumnHeader("fecha", "Fecha");
		tblExpedientes.setColumnHeader("glosa", "Procedimiento/Glosa");
		tblExpedientes.setColumnHeader("estado", "Estado");
		tblExpedientes.setColumnHeader("tema", "Tema");
		tblExpedientes.setColumnHeader("oficinaInicio",
				"Primera oficina de envio");
		tblExpedientes.setColumnHeader("oficinaActual", "Oficina Actual");
		tblExpedientes.setColumnHeader("tiempoTrans", "Tiempo Transc.");
		tblExpedientes.setColumnHeader("diasFaltantes", "Tiempo Faltante");
		tblExpedientes.setColumnHeader("tipoAtencion", "Tipo Atención");
		tblExpedientes.setColumnHeader("atendido", "Atendido");
		tblExpedientes.setColumnHeader("diasVencido", "Días Vencido");

		tblExpedientes.setColumnWidth("expediente", 90);
		tblExpedientes.setColumnWidth("fecha", 180);
		tblExpedientes.setColumnWidth("glosa", 300);
		tblExpedientes.setColumnWidth("esatdo", 50);
		tblExpedientes.setColumnWidth("tema", 200);
		tblExpedientes.setColumnWidth("oficinaInicio", 200);
		tblExpedientes.setColumnWidth("oficinaActual", 200);
		tblExpedientes.setColumnWidth("tiempoTrans", 80);
		tblExpedientes.setColumnWidth("diasFaltantes", 80);
		tblExpedientes.setColumnWidth("tipoAtencion", 120);
		tblExpedientes.setColumnWidth("atendido", 180);
		tblExpedientes.setColumnWidth("diasVencido", 50);

		tblExpedientes.setColumnAlignment("expediente", Table.Align.CENTER);
		tblExpedientes.setColumnAlignment("fecha", Table.Align.CENTER);
		tblExpedientes.setColumnAlignment("glosa", Table.Align.CENTER);
		tblExpedientes.setColumnAlignment("estado", Table.Align.CENTER);
		tblExpedientes.setColumnAlignment("tema", Table.Align.CENTER);
		tblExpedientes.setColumnAlignment("oficinaInicio", Table.Align.CENTER);
		tblExpedientes.setColumnAlignment("oficinaActual", Table.Align.CENTER);
		tblExpedientes.setColumnAlignment("tiempoTrans", Table.Align.CENTER);
		tblExpedientes.setColumnAlignment("diasFaltantes", Table.Align.CENTER);
		tblExpedientes.setColumnAlignment("tipoAtencion", Table.Align.CENTER);
		tblExpedientes.setColumnAlignment("atendido", Table.Align.CENTER);
		tblExpedientes.setColumnAlignment("diasVencido", Table.Align.CENTER);
	}

	private void cambiarColumnHeader(Integer tipoBusqueda) {
		this.optgMostrar.setEnabled(true);
		expedientesPDF.removeAll(expedientesPDF);
		tblExpedientes.getContainerDataSource().removeAllItems();
		if (tipoBusqueda != this.tipoBusqueda) {
			if (tipoBusqueda == Constantes.TIPO_BUSQUEDA.TIEMPO_ATENCION) {
				tblExpedientes.setColumnHeader("expediente", "Expediente");
				tblExpedientes.setColumnHeader("fecha", "Fecha envío");
				tblExpedientes.setColumnHeader("glosa", "Fecha respuesta");
				tblExpedientes.setColumnHeader("tema", "Atendido");
				tblExpedientes.setColumnHeader("oficinaInicio",
						"tiempo transcurrido");
				tblExpedientes.setColumnHeader("oficinaActual",
						"Procedimiento/Glosa");
				tblExpedientes.setColumnHeader("tiempoTrans", "Solicitante");
				this.tipoBusqueda = Constantes.TIPO_BUSQUEDA.TIEMPO_ATENCION;
				this.optgMostrar.setEnabled(false);
			} else {
				tblExpedientes.setColumnHeader("expediente", "Expediente");
				tblExpedientes.setColumnHeader("fecha", "Fecha");
				tblExpedientes.setColumnHeader("glosa", "Procedimiento/Glosa");
				tblExpedientes.setColumnHeader("tema", "Tema");
				tblExpedientes.setColumnHeader("oficinaInicio",
						"Primera oficina de envio");
				tblExpedientes.setColumnHeader("oficinaActual",
						"Oficina Actual");
				tblExpedientes.setColumnHeader("tiempoTrans", "Tiempo Transc.");
				this.tipoBusqueda = Constantes.TIPO_BUSQUEDA.OTRAS;
			}
		}
	}

	@SuppressWarnings("unchecked")
	private void consultar() {

		List<Expediente> expedientesListado = null;
		if (dpfDesde.getValue() != null && pdfHasta.getValue() != null) {

			desde = SigeUtil.obtenerFechaFormato(this.dpfDesde.getValue()
					.toString(), 0);
			hasta = SigeUtil.obtenerFechaFormato(
					SigeUtil.sumarDiasFecha(this.pdfHasta.getValue(), 1)
							.toString(), 0);

			parametros.clear();
			parametros.put("fechaDesde", dpfDesde.getValue());
			parametros.put("fechaHasta", pdfHasta.getValue());
			if (cbxOpcionBusqueda.getValue().toString().equals("0")) {
				expedientesListado = expedienteServicio.consultar(desde, hasta,null, null, null, null, null, mostrar);
			} else if (cbxOpcionBusqueda.getValue().toString().equals("1")) {
				if (txtCodigo.getValue().toString().length() > 0) {
					expedientesListado = expedienteServicio.consultar(desde,hasta, dependenciaObtenida, null, null, null, null,mostrar);
					parametros.put("nombreDependencia", dependenciaObtenida.getNombre());
				} else {
					Notificacion.show(new Notificacion(
							"Debe elegir la dependencia inicial",
							Constantes.MENSAJE.TYPE_ERROR));
					return;
				}
			} else if (cbxOpcionBusqueda.getValue().toString().equals("2")) {
				if (txtCodigo.getValue().toString().length() > 0) {
					expedientesListado = expedienteServicio.consultar(desde,
							hasta, null, null, contribuyenteObtenido, null,
							null, mostrar);
					parametros.put("nombreContribuyente",
							contribuyenteObtenido.getNombreCompleto());
				} else {
					Notificacion.show(new Notificacion(
							"Debe elegir al contribuyente",
							Constantes.MENSAJE.TYPE_ERROR));
					return;
				}
			} else if (cbxOpcionBusqueda.getValue().toString().equals("3")) {
				if (txtCodigo.getValue().toString().length() > 0) {
					expedientesListado = expedienteServicio.consultar(desde,
							hasta, null, null, null, usuarioObtendo, null,
							mostrar);
					parametros.put("nombreTerminalista",
							usuarioObtendo.getNombres());
				} else {
					Notificacion.show(new Notificacion(
							"Debe elegir al Terminalista",
							Constantes.MENSAJE.TYPE_ERROR));
					return;
				}
			} else if (cbxOpcionBusqueda.getValue().toString().equals("4")) {
				if (txtCodigo.getValue().toString().length() > 0) {
					expedientesListado = expedienteServicio.consultar(desde,
							hasta, null, null, null, null, tipoTramiteObtenido,
							mostrar);
					parametros.put("nombreProcedimiento",
							tipoTramiteObtenido.getNombre());
				} else {
					Notificacion.show(new Notificacion(
							"Debe elegir el Trámite",
							Constantes.MENSAJE.TYPE_ERROR));
					return;
				}
			} else if (cbxOpcionBusqueda.getValue().toString().equals("5")) {
				if (txtCodigo.getValue().toString().length() > 0) {
					expedientesListado = expedienteServicio.consultar(desde,
							hasta, dependenciaObtenida, null, null, null, null,
							Constantes.OPCION_MOSTRAR.MOSTRAR_FINALIZADOS);
					parametros.put("nombreDependencia",
							dependenciaObtenida.getNombre());
				} else {
					Notificacion.show(new Notificacion(
							"Debe elegir el Dependencia",
							Constantes.MENSAJE.TYPE_ERROR));
					return;
				}
			} else if (cbxOpcionBusqueda.getValue().toString().equals("6")) {
				if (txtCodigo.getValue().toString().length() > 0) {
					expedientesListado = expedienteServicio.consultar(desde,
							hasta, null, null, null, null, tipoTramiteObtenido,
							mostrar);
					parametros.put("asunto", tipoTramiteObtenido.getNombre());
				} else {
					Notificacion.show(new Notificacion(
							"Debe elegir el Trámite",
							Constantes.MENSAJE.TYPE_ERROR));
					return;
				}
			} else if (cbxOpcionBusqueda.getValue().toString().equals("7")) {
				if (txtCodigo.getValue().toString().length() > 0) {
					expedientesListado = filtrarDependenciaActual(
							expedienteServicio.consultar(desde, hasta, null,
									dependenciaObtenida, null, null, null,
									mostrar), dependenciaObtenida.getId());
					parametros.put("nombreDependencia",
							dependenciaObtenida.getNombre());
				} else {
					Notificacion.show(new Notificacion(
							"Debe elegir la dependencia actual",
							Constantes.MENSAJE.TYPE_ERROR));
					return;
				}
			}
		} else {
			Notificacion.show(new Notificacion(
					"Debe elegir la fecha en que ingreso el expediente",
					Constantes.MENSAJE.TYPE_ERROR));
			return;
		}
		IndexedContainer contenedor = (IndexedContainer) tblExpedientes
				.getContainerDataSource();
		contenedor.removeAllItems();

		if (expedientesListado != null && expedientesListado.size() > 0) {
			if (this.tipoBusqueda == Constantes.TIPO_BUSQUEDA.OTRAS) {
				expedientesPDF.removeAll(expedientesPDF);
				for (int i = 0; i < expedientesListado.size(); i++) {
					Integer diasFaltantes = expedientesListado.get(i)
							.getDiasFaltantes();
					expedientePDF = new ExpedientePDF();
					Item item = contenedor.addItem(i);
					item.getItemProperty("id").setValue(
							expedientesListado.get(i).getId());
					item.getItemProperty("expediente").setValue(
							expedientesListado.get(i).getCodigo());
					item.getItemProperty("fecha").setValue(
							SigeUtil.obtenerFormatoFecha(expedientesListado
									.get(i).getFechaExpediente()));
					item.getItemProperty("glosa").setValue(
							expedientesListado.get(i).getAsunto());
					item.getItemProperty("estado")
							.setValue(
									expedientesListado.get(i)
											.getTramiteFinalizado() ? "Finalizado"
											: "Proceso");
					item.getItemProperty("tema")
							.setValue(
									expedientesListado.get(i).getTipoTramite()
											.getTupa().equals("T") ? "Procedimiento Tupa"
											: expedientesListado.get(i)
													.getTipoTramite()
													.getNombre());
					item.getItemProperty("oficinaInicio").setValue(getDependenciaInicio(expedientesListado.get(i)).getNombre());
					item.getItemProperty("oficinaActual").setValue(getDependenciaActual(expedientesListado.get(i)).getNombre());
					item.getItemProperty("tiempoTrans").setValue(
							expedientesListado.get(i).getDiasTranscurridos());
					item.getItemProperty("diasFaltantes").setValue(
							diasFaltantes);

					if (mostrar == Constantes.OPCION_MOSTRAR.MOSTRAR_FINALIZADOS) {
						item.getItemProperty("tipoAtencion").setValue(
								expedientesListado.get(i)
										.getExpedienteatendido()
										.getDescripcion());
						item.getItemProperty("atendido").setValue(
								expedientesListado.get(i).getAtendidoTipo());
					} else if (mostrar == Constantes.OPCION_MOSTRAR.MOSTRAR_VENCIDOS_EN_PROCESO
							|| mostrar == Constantes.OPCION_MOSTRAR.MOSTRAR_VENCIDOS_EN_ESPERA) {
						item.getItemProperty("diasVencido").setValue(
								expedientesListado.get(i).getDiasVencidos());
					}

					expedientePDF.setExpediente(expedientesListado.get(i)
							.getCodigo());
					expedientePDF.setFecha(SigeUtil
							.obtenerFormatoFecha(expedientesListado.get(i)
									.getFechaExpediente()));
					expedientePDF.setEstado(expedientesListado.get(i)
							.getTramiteFinalizado() ? "Finalizado" : "Proceso");
					expedientePDF.setDiasTranscurridos(expedientesListado
							.get(i).getDiasTranscurridos().toString());
					expedientePDF.setDiasFaltantes(diasFaltantes + "");
					expedientePDF.setNombreCiudadano(expedientesListado.get(i)
							.getSolicitante().getNombreCompleto());
					expedientePDF.setDependenciaInicial(getDependenciaInicio(
							expedientesListado.get(i)).getNombre());
					expedientePDF.setDependenciaActual(getDependenciaActual(
							expedientesListado.get(i)).getNombre());
					expedientesPDF.add(expedientePDF);
				}
			} else {
				for (int i = 0; i < expedientesListado.size(); i++) {
					Integer diasFaltantes = expedientesListado.get(i)
							.getDiasFaltantes();
					// Integer diasFaltante = (diasFaltantes < 0) ? 0:
					// diasFaltantes; original
					Integer diasFaltante = diasFaltantes;
					expedientePDF = new ExpedientePDF();
					Item item = contenedor.addItem(i);
					item.getItemProperty("id").setValue(
							expedientesListado.get(i).getId());
					item.getItemProperty("expediente").setValue(
							expedientesListado.get(i).getCodigo());
					item.getItemProperty("fecha").setValue(
							SigeUtil.obtenerFormatoFecha(expedientesListado
									.get(i).getFechaExpediente()));
					item.getItemProperty("glosa").setValue(
							SigeUtil.obtenerFormatoFecha(expedientesListado
									.get(i).getFechaFinalizado()));
					item.getItemProperty("estado")
							.setValue(
									expedientesListado.get(i)
											.getTramiteFinalizado() ? "Finalizado"
											: "Proceso");
					item.getItemProperty("tema").setValue(
							expedientesListado.get(i).getAtendido() ? "SI"
									: "NO");
					item.getItemProperty("oficinaInicio").setValue(
							SigeUtil.getTiempoTranscurrido(expedientesListado
									.get(i).getFechaExpediente(),
									expedientesListado.get(i)
											.getFechaFinalizado()));
					item.getItemProperty("oficinaActual").setValue(
							expedientesListado.get(i).getAsunto());
					item.getItemProperty("tiempoTrans").setValue(
							expedientesListado.get(i).getSolicitante()
									.getNombreCompleto());
					item.getItemProperty("diasFaltantes")
							.setValue(diasFaltante);
					expedientePDF.setExpediente(expedientesListado.get(i)
							.getCodigo());
					expedientePDF.setFecha(SigeUtil
							.obtenerFormatoFecha(expedientesListado.get(i)
									.getFechaExpediente()));
					expedientePDF.setFechaRespuesta(SigeUtil
							.obtenerFormatoFecha(expedientesListado.get(i)
									.getFechaFinalizado()));
					expedientePDF.setAtendido(expedientesListado.get(i)
							.getAtendido() ? "SI" : "NO");
					expedientePDF.setDiasTranscurridos(SigeUtil
							.getTiempoTranscurrido(expedientesListado.get(i)
									.getFechaExpediente(), expedientesListado
									.get(i).getFechaFinalizado()));
					expedientePDF.setDiasFaltantes(expedientesListado.get(i)
							.getDiasFaltantes().toString());
					expedientePDF.setEstado(expedientesListado.get(i)
							.getTramiteFinalizado() ? "Finalizado" : "Proceso");
					expedientePDF.setProcedimientoAsunto(expedientesListado
							.get(i).getAsunto());
					expedientePDF.setSolicitante(expedientesListado.get(i)
							.getSolicitante().getNombreCompleto());
					expedientesPDF.add(expedientePDF);
				}
			}
		} else {
			expedientesPDF.removeAll(expedientesPDF);
		}
		asignarParametrosExcel((Integer) cbxOpcionBusqueda.getValue());
	}

	private void asignarParametrosExcel(Integer valueOpcionBusqueda) {
		if (valueOpcionBusqueda == 0) {
			title = "Sistema Integrado de Gestion de Expedientes";
			sheetName = "Todos los expedientes";
			fileName = "EXPEDIENTES_TODOS";
		} else if (valueOpcionBusqueda == 1) {
			title = "Sistema Integrado de Gestion de Expedientes";
			sheetName = "Expedientes por Dependencia Inicial";
			fileName = "EXPEDIENTES_DEPENDENCIA_INICIAL";
		} else if (valueOpcionBusqueda == 2) {
			title = "Sistema Integrado de Gestion de Expedientes";
			sheetName = "Expediente por Contribuyente";
			fileName = "EXPEDIENTES_POR_CONTRIBUYENTE";
		} else if (valueOpcionBusqueda == 3) {
			title = "Sistema Integrado de Gestion de Expedientes";
			sheetName = "Expediente por terminalista";
			fileName = "EXPEDIENTES_TERMINALISTA";
		} else if (valueOpcionBusqueda == 4) {
			title = "Sistema Integrado de Gestion de Expedientes";
			sheetName = "Expedientes TUPA";
			fileName = "EXPEDIENTES_TUPA";
		} else if (valueOpcionBusqueda == 5) {
			title = "Sistema Integrado de Gestion de Expedientes";
			sheetName = "Expedientes por Tiempo de Atencion";
			fileName = "EXPEDIENTES_TIEMPO_ATENCION";
		} else if (valueOpcionBusqueda == 6) {
			title = "Sistema Integrado de Gestion de Expedientes";
			sheetName = "Expedientes No TUPA";
			fileName = "EXPEDIENTES_NO_TUPA";
		} else if (valueOpcionBusqueda == 7) {
			title = "Sistema Integrado de Gestion de Expedientes";
			sheetName = "Expedientes por dependencia actual";
			fileName = "EXPEDIENTES_DEPENDENCIA_ACTUAL";
		}
	}

	private List<Expediente> filtrarDependenciaActual(
			List<Expediente> expedientes, Long idDependencia) {
		for (int i = 0; i < expedientes.size(); i++) {
			if (!getDependenciaActual(expedientes.get(i)).getId().equals(
					idDependencia)) {
				expedientes.remove(i);
				i--;
			}
		}
		return expedientes;
	}

	private Dependencia getDependenciaInicio(Expediente expediente) {
		return expedienteMovimientoServicio.obtenerPrimerOficinaEnvio(expediente.getCodigo());
	}

	private Dependencia getDependenciaActual(Expediente expediente) {
		return expedienteMovimientoServicio.obtenerDependenciaActual(expediente.getCodigo());
	}

	@Override
	public void buttonClick(ClickEvent event) {
		if (event.getSource() == this.btnConsultar) {
			consultar();
		} else {
			if (event.getSource() == this.btnExportar) {
				excelExport = new ExcelExport(tblExpedientes, sheetName);
				excelExport.setReportTitle(title);
				excelExport.setExportFileName(fileName + ".xls");
				CellStyle cs = excelExport.getColumnHeaderStyle();
				cs.setFillForegroundColor(HSSFColor.LIGHT_BLUE.index);
				excelExport.setColumnHeaderStyle(cs);
				excelExport.setDisplayTotals(false);
				excelExport.export();
			} else {
				if (event.getSource() == this.btnBuscar) {
					if (this.codSeleccionado.equals(1)) {
						Window ventana = SigeUtil.generarBuscador(new Window(),
								"BUSCAR DEPENDENCIA", "645px", "375px");
						ventana.setContent(new DependenciaBuscar(ventana, this));
						UI.getCurrent().addWindow(ventana);
					} else if (codSeleccionado.equals(2)) {
						Window subWindow = SigeUtil.generarBuscador(
								new Window(), "BUSCAR REPRESENTANTE", "550px",
								"425px");
						subWindow
								.setContent(new PersonaBuscar(subWindow, this));
						UI.getCurrent().addWindow(subWindow);
					} else if (codSeleccionado.equals(3)) {
						Window subWindow = SigeUtil.generarBuscador(
								new Window(), "BUSCAR TERMINALISTA", "480px",
								"335px");
						subWindow
								.setContent(new UsuarioBuscar(subWindow, this));
						UI.getCurrent().addWindow(subWindow);
					} else if (codSeleccionado.equals(4)) {
						TipoTramiteCanonico canonico = new TipoTramiteCanonico();
						Calendar calendario = Calendar.getInstance();
						canonico.setAnio("" + calendario.get(Calendar.YEAR));
						canonico.setTupa("T");
						canonico.setMensaje("<center><b>De doble click en la celda para seleccionarla</b></center>");

						Window subWindow = SigeUtil.generarBuscador(
								new Window(), "BUSCAR PROCEDIMIENTO TUPA",
								"800px", "450px");
						TipoTramiteBuscar tipoTramiteBuscar = new TipoTramiteBuscar(
								subWindow, this, canonico);
						subWindow.setContent(tipoTramiteBuscar);
						UI.getCurrent().addWindow(subWindow);
						tipoTramiteBuscar.rellenarDatosTablaTipoTramite();
					} else if (codSeleccionado.equals(5)) {
						Window ventana = SigeUtil.generarBuscador(new Window(),
								"BUSCAR DEPENDENCIA", "645px", "375px");
						ventana.setContent(new DependenciaBuscar(ventana, this));
						UI.getCurrent().addWindow(ventana);

					} else if (codSeleccionado.equals(6)) {
						TipoTramiteCanonico canonico = new TipoTramiteCanonico();
						Calendar calendario = Calendar.getInstance();
						canonico.setAnio("" + calendario.get(Calendar.YEAR));
						canonico.setTupa("N");
						canonico.setMensaje("<center><b>De doble click en la celda para seleccionarla</b></center>");

						Window subWindow = SigeUtil.generarBuscador(
								new Window(), "BUSCAR PROCEDIMIENTO NO TUPA",
								"800px", "450px");
						TipoTramiteBuscar tipoTramiteBuscar = new TipoTramiteBuscar(
								subWindow, this, canonico);
						subWindow.setContent(tipoTramiteBuscar);
						UI.getCurrent().addWindow(subWindow);
						tipoTramiteBuscar.rellenarDatosTablaTipoTramite();
					} else if (codSeleccionado.equals(7)) {
						Window ventana = SigeUtil.generarBuscador(new Window(),
								"BUSCAR DEPENDENCIA", "645px", "375px");
						ventana.setContent(new DependenciaBuscar(ventana, this));
						UI.getCurrent().addWindow(ventana);
					}
				} else {
					if (event.getSource() == this.btnImprimir) {
						if (!reportName.equals("") && expedientesPDF.size() > 0) {
							Window ventana = SigeUtil.generarBuscador(
									new Window(), "IMPRIMIR", "800px", "550px");
							ventana.setContent(new PDFVizualizador(this,
									permiso, parametros, expedientesPDF,
									reportName, null));
							UI.getCurrent().addWindow(ventana);
						} else {
							Notificacion.show(new Notificacion(
									"No hay datos para imprimir",
									Constantes.MENSAJE.TYPE_ERROR));
						}
					}
				}
			}
		}

	}

	public void obtenerDependencia(Long codDependencia) {
		dependenciaObtenida = dependenciaService.obtener(codDependencia);
		txtCodigo.setValue(dependenciaObtenida.getId() + "");
		txtValor.setValue(dependenciaObtenida.getNombre());
	}

	public void obtenerPersona(Long codPersona) {
		contribuyenteObtenido = personaService.obtener(codPersona);
		txtCodigo.setValue(contribuyenteObtenido.getId() + "");
		txtValor.setValue(contribuyenteObtenido.getNombreCompleto());
	}

	public void obtenerTipoTramite(String codTramite) {
		tipoTramiteObtenido = tipoTramiteService
				.obtenerTipoTramitePorCod(codTramite);
		txtCodigo.setValue(tipoTramiteObtenido.getCodigoTipoTramite());
		txtValor.setValue(tipoTramiteObtenido.getNombre());
	}

	public void obtenerTerminalista(Long codUsuario) {
		usuarioObtendo = usuarioService.obtener(codUsuario);
		txtCodigo.setValue(usuarioObtendo.getUsuario());
		txtValor.setValue(usuarioObtendo.getNombres());

	}

	@AutoGenerated
	private AbsoluteLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");

		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");

		// cbxOpcionBusqueda
		cbxOpcionBusqueda = new ComboBox();
		cbxOpcionBusqueda.setImmediate(false);
		cbxOpcionBusqueda.setWidth("320px");
		cbxOpcionBusqueda.setHeight("-1px");
		mainLayout.addComponent(cbxOpcionBusqueda, "top:10.0px;left:20.0px;");

		// btnBuscar
		btnBuscar = new Boton();
		btnBuscar.setIcon(new ThemeResource("images/botones/find.png"));
		btnBuscar.setImmediate(false);
		btnBuscar.setWidth("28px");
		btnBuscar.setHeight("24px");
		mainLayout.addComponent(btnBuscar, "top:51.0px;left:20.0px;");

		// txtCodigo
		txtCodigo = new TextField();
		txtCodigo.setImmediate(false);
		txtCodigo.setWidth("100px");
		txtCodigo.setHeight("-1px");
		mainLayout.addComponent(txtCodigo, "top:51.0px;left:48.0px;");

		// txtValor
		txtValor = new TextField();
		txtValor.setImmediate(false);
		txtValor.setWidth("329px");
		txtValor.setHeight("-1px");
		mainLayout.addComponent(txtValor, "top:51.0px;left:148.0px;");

		// lblFechaIngreso
		lblFechaIngreso = new Label();
		lblFechaIngreso.setImmediate(false);
		lblFechaIngreso.setWidth("-1px");
		lblFechaIngreso.setHeight("-1px");
		lblFechaIngreso.setValue("Fecha en que ingreso el expediente");
		mainLayout.addComponent(lblFechaIngreso, "top:10.0px;left:500.0px;");

		// lblDesde
		lblDesde = new Label();
		lblDesde.setImmediate(false);
		lblDesde.setWidth("-1px");
		lblDesde.setHeight("-1px");
		lblDesde.setValue("Desde:");
		mainLayout.addComponent(lblDesde, "top:34.0px;left:500.0px;");

		// lblHasta
		lblHasta = new Label();
		lblHasta.setImmediate(false);
		lblHasta.setWidth("-1px");
		lblHasta.setHeight("-1px");
		lblHasta.setValue("Hasta:");
		mainLayout.addComponent(lblHasta, "top:34.0px;left:640.0px;");

		// dpfDesde
		dpfDesde = new PopupDateField();
		dpfDesde.setImmediate(false);
		dpfDesde.setWidth("120px");
		dpfDesde.setHeight("-1px");
		mainLayout.addComponent(dpfDesde, "top:51.0px;left:500.0px;");

		// pdfHasta
		pdfHasta = new PopupDateField();
		pdfHasta.setImmediate(false);
		pdfHasta.setWidth("120px");
		pdfHasta.setHeight("-1px");
		mainLayout.addComponent(pdfHasta, "top:51.0px;left:640.0px;");

		// tblExpedientes
		tblExpedientes = new Table();
		tblExpedientes.setImmediate(false);
		tblExpedientes.setWidth("780px");
		tblExpedientes.setHeight("235px");
		mainLayout.addComponent(tblExpedientes, "top:85.0px;left:20.0px;");

		// optgMostrar
		optgMostrar = new OptionGroup();
		optgMostrar.setImmediate(false);
		optgMostrar.setWidth("474px");
		optgMostrar.setHeight("21px");
		mainLayout.addComponent(optgMostrar, "top:334.0px;left:76.0px;");

		// lblMostrar
		lblMostrar = new Label();
		lblMostrar.setImmediate(false);
		lblMostrar.setWidth("-1px");
		lblMostrar.setHeight("-1px");
		lblMostrar.setValue("Mostrar:");
		mainLayout.addComponent(lblMostrar, "top:336.0px;left:29.0px;");

		// btnConsultar
		btnConsultar = new Button();
		btnConsultar.setCaption("Consultar");
		btnConsultar.setIcon(new ThemeResource("images/botones/consult.png"));
		btnConsultar.setImmediate(true);
		btnConsultar.setWidth("110px");
		btnConsultar.setHeight("-1px");
		mainLayout.addComponent(btnConsultar, "top:10.0px;left:366.0px;");

		// btnExportar
		btnExportar = new Button();
		btnExportar.setCaption("Exportar a excel");
		btnExportar.setIcon(new ThemeResource("images/botones/excel-icon.png"));
		btnExportar.setImmediate(true);
		btnExportar.setWidth("-1px");
		btnExportar.setHeight("-1px");
		mainLayout.addComponent(btnExportar, "top:328.0px;left:664.0px;");

		// btnImprimir
		btnImprimir = new Button();
		btnImprimir.setCaption("Imprimir");
		btnImprimir.setIcon(new ThemeResource("images/botones/print.png"));
		btnImprimir.setImmediate(true);
		btnImprimir.setWidth("100px");
		btnImprimir.setHeight("-1px");
		mainLayout.addComponent(btnImprimir, "top:328.0px;left:560.0px;");

		return mainLayout;
	}

}
