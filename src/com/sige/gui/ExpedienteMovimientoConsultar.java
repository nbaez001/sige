package com.sige.gui;

import java.util.Calendar;
import java.util.List;

import com.sige.entidad.ExpedienteMovimiento;
import com.sige.gui.ui.NumberField;
import com.sige.servicio.ExpedienteMovimientoServicio;
import com.sige.util.Constantes;
import com.sige.util.Injector;
import com.sige.util.Notificacion;
import com.sige.util.Permiso;
import com.sige.util.SigeUtil;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Item;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.Property.ValueChangeListener;
import com.vaadin.data.util.IndexedContainer;
import com.vaadin.event.FieldEvents.BlurEvent;
import com.vaadin.event.FieldEvents.BlurListener;
import com.vaadin.server.ThemeResource;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.Label;
import com.vaadin.ui.Table;
import com.vaadin.ui.UI;
import com.vaadin.ui.Window;

public class ExpedienteMovimientoConsultar extends CustomComponent implements
		ClickListener {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@AutoGenerated
	private AbsoluteLayout mainLayout;
	@AutoGenerated
	private NumberField txtAnio;
	@AutoGenerated
	private Label lblAnio;
	@AutoGenerated
	private Button btnVerDetalle;
	@AutoGenerated
	private Table tbMovimientoExpedientes;
	@AutoGenerated
	private Button btnConsultar;
	@AutoGenerated
	private NumberField txtNumeroExpediente;
	@AutoGenerated
	private Label lblNumeroExpediente;
	private Permiso permiso;

	private ExpedienteMovimientoServicio expedienteMovimientoService;
	private Boolean movimientoSeleccionado = false;
	private ExpedienteMovimiento movimientoObtenido;

	/**
	 * The constructor should first build the main layout, set the composition
	 * root and then do any custom initialization.
	 * 
	 * The constructor will not be automatically regenerated by the visual
	 * editor.
	 */
	public ExpedienteMovimientoConsultar(Permiso permiso) {
		this.expedienteMovimientoService = Injector
				.obtenerServicio(ExpedienteMovimientoServicio.class);
		buildMainLayout();
		setCompositionRoot(mainLayout);
		this.permiso = permiso;
		postBuild();

		// TODO add user code here
	}
	
	public ExpedienteMovimientoConsultar() {
		this.expedienteMovimientoService = Injector.obtenerServicio(ExpedienteMovimientoServicio.class);
		buildMainLayout();
		setCompositionRoot(mainLayout);
		postBuild2();
	}

	private void postBuild() {

		btnConsultar.setVisible(permiso.getConsultar());
		btnVerDetalle.setVisible(permiso.getConsultar());

		txtAnio.setMaxLength(4);
		Calendar calendario = Calendar.getInstance();
		txtAnio.setValue("" + calendario.get(Calendar.YEAR));
		btnConsultar.addClickListener((ClickListener) this);
		btnVerDetalle.addClickListener((ClickListener) this);

		IndexedContainer contenedorMovimientos = new IndexedContainer();
		contenedorMovimientos.addContainerProperty("id", Long.class, null);
		contenedorMovimientos.addContainerProperty("item", Long.class, null);
		contenedorMovimientos.addContainerProperty("fechaIngreso",
				String.class, null);
		contenedorMovimientos.addContainerProperty("numeroExpediente",
				String.class, null);
		contenedorMovimientos.addContainerProperty("solicitante", String.class,
				null);
		contenedorMovimientos
				.addContainerProperty("nFolios", Short.class, null);
		tbMovimientoExpedientes.setContainerDataSource(contenedorMovimientos);
		tbMovimientoExpedientes.setVisibleColumns(new Object[] { "item",
				"numeroExpediente", "solicitante", "fechaIngreso", "nFolios" });
		tbMovimientoExpedientes.setColumnWidth("item", 15);
		tbMovimientoExpedientes.setColumnWidth("numeroExpediente", 100);
		tbMovimientoExpedientes.setColumnWidth("solicitante", 300);
		tbMovimientoExpedientes.setColumnWidth("fechaIngreso", 120);
		tbMovimientoExpedientes.setColumnWidth("nFolios", 50);
		tbMovimientoExpedientes.setColumnHeader("item", "N°");
		tbMovimientoExpedientes.setColumnHeader("numeroExpediente",
				"Número de Expediente");
		tbMovimientoExpedientes.setColumnHeader("solicitante", "Solicitante");
		tbMovimientoExpedientes
				.setColumnHeader("fechaIngreso", "Fecha Ingreso");
		tbMovimientoExpedientes.setColumnHeader("nFolios", "N° Folios");
		tbMovimientoExpedientes.setImmediate(true);
		tbMovimientoExpedientes.setSelectable(true);
		tbMovimientoExpedientes
				.addValueChangeListener(new ValueChangeListener() {

					@Override
					public void valueChange(ValueChangeEvent event) {
						// TODO Auto-generated method stub
						Item item = tbMovimientoExpedientes
								.getItem(tbMovimientoExpedientes.getValue());
						if (item != null) {
							movimientoSeleccionado = true;
							getMovimientoSeleccionado(Long.parseLong(item
									.getItemProperty("id").getValue()
									.toString()));
						}

					}
				});

		txtNumeroExpediente.addBlurListener(new BlurListener() {

			@Override
			public void blur(BlurEvent event) {
				// TODO Auto-generated method stub
				if (txtNumeroExpediente.getValue().toString().equals("")) {
					txtNumeroExpediente.setValue("1");
				} else {
					if (txtNumeroExpediente.getValue().toString().length() > 8) {
						txtNumeroExpediente.setValue("0");
					} else {
						Long codExpediente = Long.parseLong(txtNumeroExpediente
								.getValue().toString());
						txtNumeroExpediente.setValue(SigeUtil.completarCeros(
								codExpediente.toString(), 8, 1));
					}
				}
			}
		});

	}
	
	private void postBuild2() {

		btnConsultar.setVisible(true);
		btnVerDetalle.setVisible(true);

		txtAnio.setMaxLength(4);
		Calendar calendario = Calendar.getInstance();
		txtAnio.setValue("" + calendario.get(Calendar.YEAR));
		btnConsultar.addClickListener((ClickListener) this);
		btnVerDetalle.addClickListener((ClickListener) this);

		IndexedContainer contenedorMovimientos = new IndexedContainer();
		contenedorMovimientos.addContainerProperty("id", Long.class, null);
		contenedorMovimientos.addContainerProperty("item", Long.class, null);
		contenedorMovimientos.addContainerProperty("fechaIngreso",
				String.class, null);
		contenedorMovimientos.addContainerProperty("numeroExpediente",
				String.class, null);
		contenedorMovimientos.addContainerProperty("solicitante", String.class,
				null);
		contenedorMovimientos
				.addContainerProperty("nFolios", Short.class, null);
		tbMovimientoExpedientes.setContainerDataSource(contenedorMovimientos);
		tbMovimientoExpedientes.setVisibleColumns(new Object[] { "item",
				"numeroExpediente", "solicitante", "fechaIngreso", "nFolios" });
		tbMovimientoExpedientes.setColumnWidth("item", 15);
		tbMovimientoExpedientes.setColumnWidth("numeroExpediente", 100);
		tbMovimientoExpedientes.setColumnWidth("solicitante", 300);
		tbMovimientoExpedientes.setColumnWidth("fechaIngreso", 120);
		tbMovimientoExpedientes.setColumnWidth("nFolios", 50);
		tbMovimientoExpedientes.setColumnHeader("item", "N°");
		tbMovimientoExpedientes.setColumnHeader("numeroExpediente",
				"Número de Expediente");
		tbMovimientoExpedientes.setColumnHeader("solicitante", "Solicitante");
		tbMovimientoExpedientes
				.setColumnHeader("fechaIngreso", "Fecha Ingreso");
		tbMovimientoExpedientes.setColumnHeader("nFolios", "N° Folios");
		tbMovimientoExpedientes.setImmediate(true);
		tbMovimientoExpedientes.setSelectable(true);
		tbMovimientoExpedientes
				.addValueChangeListener(new ValueChangeListener() {

					@Override
					public void valueChange(ValueChangeEvent event) {
						// TODO Auto-generated method stub
						Item item = tbMovimientoExpedientes
								.getItem(tbMovimientoExpedientes.getValue());
						if (item != null) {
							movimientoSeleccionado = true;
							getMovimientoSeleccionado(Long.parseLong(item
									.getItemProperty("id").getValue()
									.toString()));
						}

					}
				});

		txtNumeroExpediente.addBlurListener(new BlurListener() {

			@Override
			public void blur(BlurEvent event) {
				// TODO Auto-generated method stub
				if (txtNumeroExpediente.getValue().toString().equals("")) {
					txtNumeroExpediente.setValue("1");
				} else {
					if (txtNumeroExpediente.getValue().toString().length() > 8) {
						txtNumeroExpediente.setValue("0");
					} else {
						Long codExpediente = Long.parseLong(txtNumeroExpediente
								.getValue().toString());
						txtNumeroExpediente.setValue(SigeUtil.completarCeros(
								codExpediente.toString(), 8, 1));
					}
				}
			}
		});

	}

	public void getMovimientoSeleccionado(Long idMovimiento) {
		movimientoObtenido = expedienteMovimientoService.obtener(idMovimiento);
	}

	@SuppressWarnings("unchecked")
	public void obtenerMovimientosDelExpediente() {
		IndexedContainer contenedorMovimientos = (IndexedContainer) tbMovimientoExpedientes
				.getContainerDataSource();
		contenedorMovimientos.removeAllItems();
		Long codExpediente = Long.parseLong(txtNumeroExpediente.getValue()
				.toString());
		String anioExpediente = this.txtAnio.getValue().toString();
		String codigoExpediente = anioExpediente
				+ SigeUtil.completarCeros(codExpediente.toString(), 8, 1);
		List<ExpedienteMovimiento> movimientos = expedienteMovimientoService
				.obtenerTodosMovimientosExpediente(codigoExpediente);
		if (movimientos.size() == 0) {
			Notificacion.show(new Notificacion(
					"Lo sentimos, no se encontraron datos",
					Constantes.MENSAJE.TYPE_WARNING));
		} else {

			Long nroItem = 1L;
			for (int i = 0; i < movimientos.size(); i++) {
				Item item = contenedorMovimientos.addItem(i);

				item.getItemProperty("id").setValue(movimientos.get(i).getId());
				item.getItemProperty("item").setValue(nroItem++);
				item.getItemProperty("numeroExpediente").setValue(
						movimientos.get(i).getExpediente().getNumero());
				item.getItemProperty("solicitante").setValue(
						movimientos.get(i).getExpediente().getSolicitante()
								.getNombreCompleto());
				item.getItemProperty("fechaIngreso").setValue(
						SigeUtil.obtenerFormatoFecha(movimientos.get(i)
								.getExpediente().getFechaExpediente()));
				item.getItemProperty("nFolios").setValue(
						movimientos.get(i).getExpediente().getNumeroFolios());
			}
		}
	}

	@Override
	public void buttonClick(ClickEvent event) {
		if (event.getSource() == this.btnConsultar) {
			if (txtAnio.getValue().toString().equals("")
					|| txtNumeroExpediente.getValue().equals("")) {
				Notificacion.show(new Notificacion(
						"Debe ingresar el año y el número de expediente",
						Constantes.MENSAJE.TYPE_ERROR));
			} else {
				obtenerMovimientosDelExpediente();
			}
		} else if (event.getSource() == this.btnVerDetalle) {
			if (movimientoSeleccionado) {
				Window ventana = SigeUtil.generarBuscador(new Window(),
						"DETALLE DEL MOVIMIENTO", "720", "340");
				ventana.setContent(new PanelDetalleMovimientoExpediente(
						ventana, this.movimientoObtenido));
				UI.getCurrent().addWindow(ventana);
			} else {
				Notificacion.show(new Notificacion(
						"Debe seleccionar un elemento de la tabla",
						Constantes.MENSAJE.TYPE_ERROR));
			}
			movimientoSeleccionado = false;
			tbMovimientoExpedientes
					.unselect(tbMovimientoExpedientes.getValue());
		}

	}

	@AutoGenerated
	private AbsoluteLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");

		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");

		// lblNumeroExpediente
		lblNumeroExpediente = new Label();
		lblNumeroExpediente.setImmediate(false);
		lblNumeroExpediente.setWidth("-1px");
		lblNumeroExpediente.setHeight("-1px");
		lblNumeroExpediente.setValue("Número de Expediente :");
		mainLayout
				.addComponent(lblNumeroExpediente, "top:13.0px;left:139.0px;");

		// txtNumeroExpediente
		txtNumeroExpediente = new NumberField();
		txtNumeroExpediente.setImmediate(false);
		txtNumeroExpediente.setWidth("122px");
		txtNumeroExpediente.setHeight("-1px");
		mainLayout.addComponent(txtNumeroExpediente, "top:9.0px;left:284.0px;");

		// btnConsultar
		btnConsultar = new Button();
		btnConsultar.setCaption("Consultar");
		btnConsultar.setIcon(new ThemeResource("images/botones/consult.png"));
		btnConsultar.setImmediate(true);
		btnConsultar.setWidth("110px");
		btnConsultar.setHeight("-1px");
		mainLayout.addComponent(btnConsultar, "top:9.0px;left:443.0px;");

		// tbMovimientoExpedientes
		tbMovimientoExpedientes = new Table();
		tbMovimientoExpedientes.setImmediate(false);
		tbMovimientoExpedientes.setWidth("620px");
		tbMovimientoExpedientes.setHeight("240px");
		mainLayout.addComponent(tbMovimientoExpedientes,
				"top:60.0px;left:20.0px;");

		// btnVerDetalle
		btnVerDetalle = new Button();
		btnVerDetalle.setCaption("Ver Detalle");
		btnVerDetalle.setImmediate(true);
		btnVerDetalle.setWidth("-1px");
		btnVerDetalle.setHeight("-1px");
		mainLayout.addComponent(btnVerDetalle, "top:9.0px;left:554.0px;");

		// lblAnio
		lblAnio = new Label();
		lblAnio.setImmediate(false);
		lblAnio.setWidth("-1px");
		lblAnio.setHeight("-1px");
		lblAnio.setValue("Año :");
		mainLayout.addComponent(lblAnio, "top:13.0px;left:13.0px;");

		// txtAnio
		txtAnio = new NumberField();
		txtAnio.setImmediate(false);
		txtAnio.setWidth("80px");
		txtAnio.setHeight("-1px");
		mainLayout.addComponent(txtAnio, "top:9.0px;left:44.0px;");

		return mainLayout;
	}

}
