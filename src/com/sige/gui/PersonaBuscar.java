package com.sige.gui;

import java.util.List;
import java.util.Map;

import com.sige.entidad.Lugar;
import com.sige.entidad.Persona;
import com.sige.entidad.Via;
import com.sige.servicio.LugarServicio;
import com.sige.servicio.PersonaServicio;
import com.sige.servicio.UtilService;
import com.sige.servicio.ViaServicio;
import com.sige.util.Boton;
import com.sige.util.Busqueda;
import com.sige.util.Constantes;
import com.sige.util.Injector;
import com.sige.util.SigeUtil;
import com.sige.util.TextField;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Item;
import com.vaadin.data.util.IndexedContainer;
import com.vaadin.event.FieldEvents.TextChangeEvent;
import com.vaadin.event.FieldEvents.TextChangeListener;
import com.vaadin.event.ItemClickEvent;
import com.vaadin.event.ItemClickEvent.ItemClickListener;
import com.vaadin.event.ShortcutAction.KeyCode;
import com.vaadin.event.ShortcutListener;
import com.vaadin.server.ThemeResource;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.Label;
import com.vaadin.ui.Table;
import com.vaadin.ui.UI;
import com.vaadin.ui.Window;
import com.vaadin.ui.themes.Reindeer;

public class PersonaBuscar extends CustomComponent implements ClickListener {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@AutoGenerated
	private AbsoluteLayout mainLayout;
	@AutoGenerated
	private Boton btnLimpiarLugar;
	@AutoGenerated
	private Boton btnLimpiarVia;
	@AutoGenerated
	private Button btnBuscar;
	@AutoGenerated
	private TextField txtPaginaActual;
	@AutoGenerated
	private Label lblTotalPaginas;
	@AutoGenerated
	private Label lblSeparador;
	@AutoGenerated
	private Label lblPaginas;
	@AutoGenerated
	private Boton btnFin;
	@AutoGenerated
	private Boton btnSiguiente;
	@AutoGenerated
	private Boton btnAtras;
	@AutoGenerated
	private Boton btnInicio;
	@AutoGenerated
	private Boton btnBuscarLugar;
	@AutoGenerated
	private Boton btnBuscarVia;
	@AutoGenerated
	private TextField txtLugar;
	@AutoGenerated
	private TextField txtVia;
	@AutoGenerated
	private Label lblLugar;
	@AutoGenerated
	private Label lblVia;
	@AutoGenerated
	private TextField txtNumeroDir;
	@AutoGenerated
	private Label lblNumeroDir;
	@AutoGenerated
	private TextField txtNombreCompleto;
	@AutoGenerated
	private Label llblNombre;
	@AutoGenerated
	private Table tblPersonas;
	/**
	 * The constructor should first build the main layout, set the composition
	 * root and then do any custom initialization.
	 * 
	 * The constructor will not be automatically regenerated by the visual
	 * editor.
	 */
	private Lugar lugarSeleccionado;
	private Via viaSeleccionada;
	private LugarServicio lugarServicio;
	private ViaServicio viaServicio;
	private PersonaServicio personaServicio;
	private Window windowContiene;
	private CustomComponent quienLlama;
	private UtilService utilService;
	private Map<String, Integer> personaColumnLenghts;

	public PersonaBuscar(Window windowContiene, CustomComponent quienLlama) {
		viaServicio = Injector.obtenerServicio(ViaServicio.class);
		lugarServicio = Injector.obtenerServicio(LugarServicio.class);
		utilService = Injector.obtenerServicio(UtilService.class);
		personaServicio = Injector.obtenerServicio(PersonaServicio.class);
		this.windowContiene = windowContiene;
		this.quienLlama = quienLlama;
		buildMainLayout();
		setCompositionRoot(mainLayout);
		postBuid();
		getAllPersonas();
		// TODO add user code here
	}

	private void postBuid() {
		personaColumnLenghts = utilService.getLengthColumns("persona");
		this.txtNombreCompleto.setMaxLength(personaColumnLenghts
				.get("nombrecompleto"));
		this.btnBuscar.addClickListener((ClickListener) this);
		this.btnBuscarVia.addClickListener((ClickListener) this);
		this.btnBuscarLugar.addClickListener((ClickListener) this);
		this.btnInicio.addClickListener((ClickListener) this);
		this.btnAtras.addClickListener((ClickListener) this);
		this.btnSiguiente.addClickListener((ClickListener) this);
		this.btnFin.addClickListener((ClickListener) this);
		this.btnLimpiarLugar.addClickListener((ClickListener) this);
		this.btnLimpiarVia.addClickListener((ClickListener) this);
		this.btnInicio.setStyleName(Reindeer.BUTTON_LINK);
		this.btnLimpiarLugar.setStyleName("buscar");
		this.btnLimpiarVia.setStyleName("buscar");
		this.btnAtras.setStyleName(Reindeer.BUTTON_LINK);
		this.btnSiguiente.setStyleName(Reindeer.BUTTON_LINK);
		this.btnFin.setStyleName(Reindeer.BUTTON_LINK);
		this.txtPaginaActual.setValue("1");
		this.btnBuscarLugar.setStyleName("buscar");
		this.btnBuscarVia.setStyleName("buscar");

		this.txtPaginaActual.setId("paginaActual");
		this.txtNombreCompleto.setId("buscarNombreCompleto");
		this.txtLugar.setId("buscarLugar");
		this.txtVia.setId("buscarVia");
		this.txtNumeroDir.setId("buscarNumeroDir");
		this.txtVia.setEnabled(false);
		this.txtLugar.setEnabled(false);
		this.txtNombreCompleto.setTabIndex(1);
		btnBuscarVia.setTabIndex(2);
		btnLimpiarVia.setTabIndex(3);
		btnBuscarLugar.setTabIndex(4);
		btnLimpiarLugar.setTabIndex(5);
		txtNumeroDir.setTabIndex(6);
		btnBuscar.setTabIndex(7);
		tblPersonas.setTabIndex(8);
		btnInicio.setTabIndex(9);
		btnAtras.setTabIndex(10);
		txtPaginaActual.setTabIndex(11);
		btnSiguiente.setTabIndex(12);
		btnFin.setTabIndex(13);
		IndexedContainer container = new IndexedContainer();
		container.addContainerProperty("id", Long.class, null);
		container.addContainerProperty("item", Long.class, null);
		container.addContainerProperty("tipo", String.class, null);
		container.addContainerProperty("nombreCompleto", String.class, null);
		container.addContainerProperty("lugar", String.class, null);
		container.addContainerProperty("via", String.class, null);
		container.addContainerProperty("numeroDireccion", String.class, null);
		tblPersonas.setContainerDataSource(container);
		tblPersonas.setVisibleColumns(new Object[] { "item", "tipo",
				"nombreCompleto", "lugar", "via", "numeroDireccion" });
		tblPersonas.setColumnWidth("item", 25);
		tblPersonas.setColumnWidth("tipo", 65);
		tblPersonas.setColumnWidth("nombreCompleto", 120);
		tblPersonas.setColumnWidth("lugar", 110);
		tblPersonas.setColumnWidth("via", 110);
		tblPersonas.setColumnWidth("numeroDireccion", 68);

		tblPersonas.setColumnHeader("item", "Item");
		tblPersonas.setColumnHeader("tipo", "Tipo");
		tblPersonas.setColumnHeader("nombreCompleto", "Nombre Completo");
		tblPersonas.setColumnHeader("lugar", "Lugar");
		tblPersonas.setColumnHeader("via", "Via");
		tblPersonas.setColumnHeader("numeroDireccion", "Nr. Dirección");
		tblPersonas.setSelectable(true);
		tblPersonas.setImmediate(true);

		this.txtPaginaActual.setImmediate(true);
		this.tblPersonas.addItemClickListener(new ItemClickListener() {
			private static final long serialVersionUID = 1L;

			@Override
			public void itemClick(ItemClickEvent event) {
				if (event.isDoubleClick()) {
					Item item = tblPersonas.getItem(event.getItemId());
					respuesta(new Long(item.getItemProperty("id").getValue()
							.toString()));
				}
			}
		});

		this.txtPaginaActual.addShortcutListener(new ShortcutListener("",
				KeyCode.ENTER, null) {
			private static final long serialVersionUID = 1L;

			@Override
			public void handleAction(Object sender, Object target) {
				if (target instanceof TextField
						&& ((TextField) target).getId().equals("paginaActual")) {
					Long paginaActual = null;
					try {
						paginaActual = Long.parseLong(txtPaginaActual
								.getValue().toString());
					} catch (Exception exception) {
						paginaActual = 1L;
					}
					txtPaginaActual.setValue(paginaActual.toString());
					getAllPersonas();
				}
			}
		});

		this.txtNombreCompleto.setImmediate(true);
		this.txtNombreCompleto.addTextChangeListener(new TextChangeListener() {

			@Override
			public void textChange(TextChangeEvent event) {
				// TODO Auto-generated method stub
				txtPaginaActual.setValue("1");
				txtNombreCompleto.setValue(event.getText());
				getAllPersonas();
			}
		});

		this.txtVia.setImmediate(true);
		this.txtVia.addTextChangeListener(new TextChangeListener() {

			@Override
			public void textChange(TextChangeEvent event) {
				// TODO Auto-generated method stub
				txtPaginaActual.setValue("1");
				txtVia.setValue(event.getText());
				getAllPersonas();
			}
		});

		this.txtLugar.setImmediate(true);
		this.txtLugar.addTextChangeListener(new TextChangeListener() {

			@Override
			public void textChange(TextChangeEvent event) {
				// TODO Auto-generated method stub
				txtPaginaActual.setValue("1");
				txtLugar.setValue(event.getText());
				getAllPersonas();
			}
		});

		this.txtNumeroDir.setImmediate(true);
		this.txtNumeroDir.addTextChangeListener(new TextChangeListener() {

			@Override
			public void textChange(TextChangeEvent event) {
				// TODO Auto-generated method stub
				txtPaginaActual.setValue("1");
				txtNumeroDir.setValue(event.getText());
				getAllPersonas();
			}
		});

	}

	public void getLugarSeleccionado(Long idLugar) {
		lugarSeleccionado = lugarServicio.obtener(idLugar);
		txtLugar.setValue(lugarSeleccionado.getNombre());
	}

	public void getViaSeleccionada(Long idVia) {
		viaSeleccionada = viaServicio.obtener(idVia);
		txtVia.setValue(viaSeleccionada.getNombre());
	}

	@SuppressWarnings("unchecked")
	private void getAllPersonas() {
		IndexedContainer container = (IndexedContainer) tblPersonas
				.getContainerDataSource();
		container.removeAllItems();

		List<Persona> personasListado = null;
		Long paginaActual = Long.parseLong(this.txtPaginaActual.getValue()
				.toString());
		Persona personaBuscar = new Persona();

		personaBuscar
				.setNombreCompleto(txtNombreCompleto.getValue().toString());
		personaBuscar.setVia(viaSeleccionada);
		personaBuscar.setLugar(lugarSeleccionado);
		personaBuscar.setDireccionNumero(txtNumeroDir.getValue().toString());

		Busqueda busqueda = personaServicio.buscarPorPersona(personaBuscar,
				paginaActual);
		personasListado = (List<Persona>) busqueda.getRegistos();
		this.lblTotalPaginas.setValue(busqueda.getNumeroPaginas().toString());
		this.txtPaginaActual.setValue(busqueda.getPaginaActual().toString());

		Long numeroItem = (Long.parseLong(this.txtPaginaActual.getValue()
				.toString()) - 1) * Constantes.PAGINACION.PERSONA + 1;
		for (int i = 0; i < personasListado.size(); i++) {
			Item item = container.addItem(i);
			item.getItemProperty("id").setValue(personasListado.get(i).getId());
			item.getItemProperty("item").setValue(numeroItem++);
			String tipoPersona = (personasListado.get(i).getCodigoTipoPersona()
					.equals('1')) ? "NATURAL" : "JURIDICA";
			item.getItemProperty("tipo").setValue(tipoPersona);
			item.getItemProperty("nombreCompleto").setValue(
					personasListado.get(i).getNombreCompleto());
			item.getItemProperty("lugar").setValue(
					personasListado.get(i).getLugar().getNombre());
			item.getItemProperty("via").setValue(
					personasListado.get(i).getVia().getNombre());
			item.getItemProperty("numeroDireccion").setValue(
					personasListado.get(i).getDireccionNumero());
		}
	}

	private void respuesta(Long dependenciaId) {
		if (quienLlama instanceof PersonaMantenimiento) {
			PersonaMantenimiento panel = (PersonaMantenimiento) quienLlama;
			panel.getPersonaSeleccionada(dependenciaId);
		} else if (quienLlama instanceof ExpedienteMantenimiento) {
			ExpedienteMantenimiento panel = (ExpedienteMantenimiento) quienLlama;
			panel.obtenerPersona(dependenciaId);
		} else if (quienLlama instanceof AnexosExpedienteProceso) {
			AnexosExpedienteProceso panel = (AnexosExpedienteProceso) quienLlama;
			panel.getDatosPersona(dependenciaId);
		} else if (quienLlama instanceof ExpedienteConsulta) {
			ExpedienteConsulta panel = (ExpedienteConsulta) quienLlama;
			panel.obtenerPersona(dependenciaId);
		}
		UI.getCurrent().removeWindow(windowContiene);
	}

	private void resetearFormulario() {
		lugarSeleccionado = null;
		viaSeleccionada = null;
		txtNombreCompleto.setValue("");
		txtVia.setValue("");
		txtLugar.setValue("");
		txtNumeroDir.setValue("");
	}

	@Override
	public void buttonClick(ClickEvent event) {
		if (event.getSource() == this.btnBuscar) {
			this.txtPaginaActual.setValue("1");
			getAllPersonas();
			resetearFormulario();
		} else {
			if (event.getSource() == this.btnSiguiente) {
				Long paginaActual = Long.parseLong(this.txtPaginaActual
						.getValue().toString()) + 1;
				if (paginaActual <= Long.parseLong(this.lblTotalPaginas
						.getValue().toString())) {
					this.txtPaginaActual.setValue(paginaActual.toString());
				}
				getAllPersonas();
			} else {
				if (event.getSource() == this.btnAtras) {
					Long paginaActual = Long.parseLong(this.txtPaginaActual
							.getValue().toString()) - 1;
					if (paginaActual >= 1) {
						this.txtPaginaActual.setValue(paginaActual.toString());
					}
					getAllPersonas();
				} else {
					if (event.getSource() == this.btnInicio) {
						this.txtPaginaActual.setValue("1");
						getAllPersonas();
					} else {
						if (event.getSource() == this.btnFin) {
							this.txtPaginaActual.setValue(this.lblTotalPaginas
									.getValue());
							getAllPersonas();
						} else {
							if (event.getSource() == this.btnBuscarVia) {

								Window ventana = SigeUtil.generarBuscador(
										new Window(), "BUSCAR VIA", "460px",
										"355px");
								ventana.setContent(new ViaBuscar(ventana, this));
								UI.getCurrent().addWindow(ventana);
							} else {
								if (event.getSource() == this.btnBuscarLugar) {
									Window ventana = SigeUtil.generarBuscador(
											new Window(), "BUSCAR LUGAR",
											"560px", "410px");
									ventana.setContent(new LugarBuscar(ventana,
											this));
									UI.getCurrent().addWindow(ventana);
								} else {
									if (event.getSource() == this.btnLimpiarLugar) {
										this.txtLugar.setValue("");
										this.lugarSeleccionado = null;
									} else {
										if (event.getSource() == this.btnLimpiarVia) {
											this.txtVia.setValue("");
											this.viaSeleccionada = null;
										}
									}
								}
							}
						}
					}
				}
			}
		}

	}

	@AutoGenerated
	private AbsoluteLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");

		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");

		// tblPersonas
		tblPersonas = new Table();
		tblPersonas.setImmediate(false);
		tblPersonas.setWidth("500px");
		tblPersonas.setHeight("214px");
		mainLayout.addComponent(tblPersonas, "top:136.0px;left:20.0px;");

		// llblNombre
		llblNombre = new Label();
		llblNombre.setImmediate(false);
		llblNombre.setWidth("-1px");
		llblNombre.setHeight("-1px");
		llblNombre.setValue("Nombre");
		mainLayout.addComponent(llblNombre, "top:15.0px;left:40.0px;");

		// txtNombreCompleto
		txtNombreCompleto = new TextField();
		txtNombreCompleto.setImmediate(false);
		txtNombreCompleto.setWidth("400px");
		txtNombreCompleto.setHeight("-1px");
		mainLayout.addComponent(txtNombreCompleto, "top:12.0px;left:100.0px;");

		// lblNumeroDir
		lblNumeroDir = new Label();
		lblNumeroDir.setImmediate(false);
		lblNumeroDir.setWidth("-1px");
		lblNumeroDir.setHeight("-1px");
		lblNumeroDir.setValue("Numero de Dirección");
		mainLayout.addComponent(lblNumeroDir, "top:103.0px;left:40.0px;");

		// txtNumeroDir
		txtNumeroDir = new TextField();
		txtNumeroDir.setImmediate(false);
		txtNumeroDir.setWidth("229px");
		txtNumeroDir.setHeight("-1px");
		mainLayout.addComponent(txtNumeroDir, "top:102.0px;left:167.0px;");

		// lblVia
		lblVia = new Label();
		lblVia.setImmediate(false);
		lblVia.setWidth("-1px");
		lblVia.setHeight("-1px");
		lblVia.setValue("Via");
		mainLayout.addComponent(lblVia, "top:40.0px;left:40.0px;");

		// lblLugar
		lblLugar = new Label();
		lblLugar.setImmediate(false);
		lblLugar.setWidth("-1px");
		lblLugar.setHeight("-1px");
		lblLugar.setValue("Lugar");
		mainLayout.addComponent(lblLugar, "top:71.0px;left:40.0px;");

		// txtVia
		txtVia = new TextField();
		txtVia.setImmediate(false);
		txtVia.setWidth("356px");
		txtVia.setHeight("-1px");
		mainLayout.addComponent(txtVia, "top:40.0px;left:84.0px;");

		// txtLugar
		txtLugar = new TextField();
		txtLugar.setImmediate(false);
		txtLugar.setWidth("356px");
		txtLugar.setHeight("-1px");
		mainLayout.addComponent(txtLugar, "top:70.0px;left:84.0px;");

		// btnBuscarVia
		btnBuscarVia = new Boton();
		btnBuscarVia.setIcon(new ThemeResource("images/botones/find.png"));
		btnBuscarVia.setImmediate(true);
		btnBuscarVia.setWidth("28px");
		btnBuscarVia.setHeight("24px");
		mainLayout.addComponent(btnBuscarVia, "top:40.0px;left:440.0px;");

		// btnBuscarLugar
		btnBuscarLugar = new Boton();
		btnBuscarLugar.setIcon(new ThemeResource("images/botones/find.png"));
		btnBuscarLugar.setImmediate(true);
		btnBuscarLugar.setWidth("28px");
		btnBuscarLugar.setHeight("24px");
		mainLayout.addComponent(btnBuscarLugar, "top:71.0px;left:440.0px;");

		// btnInicio
		btnInicio = new Boton();
		btnInicio.setIcon(new ThemeResource("images/botones/start.png"));
		btnInicio.setImmediate(false);
		btnInicio.setWidth("30px");
		btnInicio.setHeight("-1px");
		mainLayout.addComponent(btnInicio, "top:360.0px;left:100.0px;");

		// btnAtras
		btnAtras = new Boton();
		btnAtras.setIcon(new ThemeResource("images/botones/previous.png"));
		btnAtras.setImmediate(false);
		btnAtras.setWidth("30px");
		btnAtras.setHeight("-1px");
		mainLayout.addComponent(btnAtras, "top:360.0px;left:130.0px;");

		// btnSiguiente
		btnSiguiente = new Boton();
		btnSiguiente.setIcon(new ThemeResource("images/botones/next.png"));
		btnSiguiente.setImmediate(false);
		btnSiguiente.setWidth("30px");
		btnSiguiente.setHeight("-1px");
		mainLayout.addComponent(btnSiguiente, "top:360.0px;left:380.0px;");

		// btnFin
		btnFin = new Boton();
		btnFin.setIcon(new ThemeResource("images/botones/final.png"));
		btnFin.setImmediate(false);
		btnFin.setWidth("30px");
		btnFin.setHeight("-1px");
		mainLayout.addComponent(btnFin, "top:360.0px;left:410.0px;");

		// lblPaginas
		lblPaginas = new Label();
		lblPaginas.setImmediate(false);
		lblPaginas.setWidth("-1px");
		lblPaginas.setHeight("-1px");
		lblPaginas.setValue("Paginá");
		mainLayout.addComponent(lblPaginas, "top:362.0px;left:202.0px;");

		// lblSeparador
		lblSeparador = new Label();
		lblSeparador.setImmediate(false);
		lblSeparador.setWidth("-1px");
		lblSeparador.setHeight("-1px");
		lblSeparador.setValue("/");
		mainLayout.addComponent(lblSeparador, "top:362.0px;left:294.0px;");

		// lblTotalPaginas
		lblTotalPaginas = new Label();
		lblTotalPaginas.setImmediate(false);
		lblTotalPaginas.setWidth("-1px");
		lblTotalPaginas.setHeight("-1px");
		lblTotalPaginas.setValue("999");
		mainLayout.addComponent(lblTotalPaginas, "top:362.0px;left:304.0px;");

		// txtPaginaActual
		txtPaginaActual = new TextField();
		txtPaginaActual.setImmediate(false);
		txtPaginaActual.setWidth("30px");
		txtPaginaActual.setHeight("-1px");
		mainLayout.addComponent(txtPaginaActual, "top:360.0px;left:255.0px;");

		// btnBuscar
		btnBuscar = new Button();
		btnBuscar.setCaption("Buscar");
		btnBuscar.setIcon(new ThemeResource("images/botones/find.png"));
		btnBuscar.setImmediate(true);
		btnBuscar.setWidth("100px");
		btnBuscar.setHeight("-1px");
		mainLayout.addComponent(btnBuscar, "top:102.0px;left:401.0px;");

		// btnLimpiarVia
		btnLimpiarVia = new Boton();
		btnLimpiarVia.setIcon(new ThemeResource("images/botones/clear.png"));
		btnLimpiarVia.setImmediate(false);
		btnLimpiarVia.setWidth("28px");
		btnLimpiarVia.setHeight("24px");
		mainLayout.addComponent(btnLimpiarVia, "top:40.0px;left:468.0px;");

		// btnLimpiarLugar
		btnLimpiarLugar = new Boton();
		btnLimpiarLugar.setIcon(new ThemeResource("images/botones/clear.png"));
		btnLimpiarLugar.setImmediate(false);
		btnLimpiarLugar.setWidth("28px");
		btnLimpiarLugar.setHeight("24px");
		mainLayout.addComponent(btnLimpiarLugar, "top:71.0px;left:468.0px;");

		return mainLayout;
	}

}
