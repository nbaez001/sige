package com.sige.gui;

import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.vaadin.dialogs.ConfirmDialog;

import com.sige.entidad.AnexoPresentado;
import com.sige.entidad.Dependencia;
import com.sige.entidad.DocumentoInterno;
import com.sige.entidad.DocumentoInternoDestino;
import com.sige.entidad.Expediente;
import com.sige.entidad.ExpedienteMovimiento;
import com.sige.entidad.UsuarioDependencia;
import com.sige.servicio.AnexoPresentadoService;
import com.sige.servicio.DependenciaServicio;
import com.sige.servicio.DiaNoHabilServicio;
import com.sige.servicio.DocumenoInternoReferenService;
import com.sige.servicio.DocumentoInternoDestinoService;
import com.sige.servicio.DocumentoInternoMapeoServicio;
import com.sige.servicio.ExpedienteMovimientoServicio;
import com.sige.servicio.TipoDocumentoServicio;
import com.sige.servicio.UsuarioDependenciaServicio;
import com.sige.util.Boton;
import com.sige.util.Constantes;
import com.sige.util.ExpedienteCanonico;
import com.sige.util.Injector;
import com.sige.util.Notificacion;
import com.sige.util.Permiso;
import com.sige.util.SigeUtil;
import com.sige.util.TextField;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Item;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.Property.ValueChangeListener;
import com.vaadin.data.util.IndexedContainer;
import com.vaadin.event.ShortcutAction.KeyCode;
import com.vaadin.event.ShortcutListener;
import com.vaadin.server.ThemeResource;
import com.vaadin.shared.ui.label.ContentMode;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.CheckBox;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.Embedded;
import com.vaadin.ui.Label;
import com.vaadin.ui.Panel;
import com.vaadin.ui.PopupDateField;
import com.vaadin.ui.Table;
import com.vaadin.ui.UI;
import com.vaadin.ui.Window;
import com.vaadin.ui.themes.Reindeer;

public class MovimientoExpedienteProceso extends CustomComponent implements
		ClickListener {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@AutoGenerated
	private AbsoluteLayout mainLayout;
	@AutoGenerated
	private Button btnConsultarEscaneos;
	@AutoGenerated
	private Button btnAdjuntarDoc;
	@AutoGenerated
	private Label lblSolicitanteValue;
	@AutoGenerated
	private Label lblSolicitante;
	@AutoGenerated
	private Button btnDescargarDocumento;
	@AutoGenerated
	private Label labTiempoFaltanteValor;
	@AutoGenerated
	private Label labTiempoFaltante;
	@AutoGenerated
	private Label lblDependenciaActualValue;
	@AutoGenerated
	private Label lblEnviadoAValue;
	@AutoGenerated
	private Label lblDependenciaActual;
	@AutoGenerated
	private Label lblEnviadoA;
	@AutoGenerated
	private Label lblDependencia;
	@AutoGenerated
	private Boton btnArchivosAnexados;
	@AutoGenerated
	private Label label_20;
	@AutoGenerated
	private Button btnVerRecorrido;
	@AutoGenerated
	private TextField txtBuscarPor;
	@AutoGenerated
	private Embedded lblRespondido;
	@AutoGenerated
	private Embedded lblFinalizado;
	@AutoGenerated
	private Embedded lblReenviado;
	@AutoGenerated
	private Embedded lblRecepcionado;
	@AutoGenerated
	private Label lblEnviadoPor;
	@AutoGenerated
	private Label lblRecepcionadoPor;
	@AutoGenerated
	private Label lblAsunto;
	@AutoGenerated
	private Label lblFolios;
	@AutoGenerated
	private Label lblDocumento;
	@AutoGenerated
	private Label lblDependenciaDestino;
	@AutoGenerated
	private Label lblExpedienteExternoO;
	@AutoGenerated
	private Label lblFechaEnvio;
	@AutoGenerated
	private Label lblDependenciaOrigen;
	@AutoGenerated
	private Label label_19;
	@AutoGenerated
	private Label label_18;
	@AutoGenerated
	private Label label_17;
	@AutoGenerated
	private Label label_15;
	@AutoGenerated
	private Table tbReferencia;
	@AutoGenerated
	private Label label_16;
	@AutoGenerated
	private Label label_14;
	@AutoGenerated
	private Label label_13;
	@AutoGenerated
	private Label label_12;
	@AutoGenerated
	private Label label_11;
	@AutoGenerated
	private Label label_10;
	@AutoGenerated
	private Button btnImprimir;
	@AutoGenerated
	private Button btnEliminar;
	@AutoGenerated
	private Button btnArchivar;
	@AutoGenerated
	private Button btnReenviar;
	@AutoGenerated
	private Button btnResponder;
	@AutoGenerated
	private Button btnRecepcionar;
	@AutoGenerated
	private Table tbMovimientoExpediente;
	@AutoGenerated
	private Panel panel_2;
	@AutoGenerated
	private AbsoluteLayout absoluteLayout_2;
	@AutoGenerated
	private CheckBox chkVerDetalle;
	@AutoGenerated
	private Label label_9;
	@AutoGenerated
	private PopupDateField popDateHasta;
	@AutoGenerated
	private PopupDateField popDateDesde;
	@AutoGenerated
	private CheckBox chkDesde;
	@AutoGenerated
	private CheckBox chkTodos;
	@AutoGenerated
	private Label label_8;
	@AutoGenerated
	private Label label_7;
	@AutoGenerated
	private Label label_6;
	@AutoGenerated
	private Label label_5;
	@AutoGenerated
	private Label label_4;
	@AutoGenerated
	private Label label_3;
	@AutoGenerated
	private ComboBox cbxFiltrarDocumentos;
	@AutoGenerated
	private Label label_2;
	@AutoGenerated
	private ComboBox cbxDependencia;
	@AutoGenerated
	private ComboBox cbxTipoBusqueda;
	@AutoGenerated
	private Label label_1;
	@AutoGenerated
	private Label lblBusqueda;
	private static final long serialVersionUID = 1L;
	private CustomComponent quienLlama;
	private Permiso permiso;
	private DependenciaServicio dependenciaService;
	private DiaNoHabilServicio diaNoHabilServicio;
	private ExpedienteMovimientoServicio expedienteMovimientoServicio;
	private String[] cboFiltrarDocumento = { "Enviados", "Recibidos" };
	private String[] cboBuscarPor = { "Dependencia", "Asunto",
			"N° Expediente Externo", " N° Documento Interno",
			"Nombre Solicitante" };
	private UsuarioDependenciaServicio usuarioDependenciaServicio;

	private DocumentoInternoDestinoService docInternoDestinoService;
	private AnexoPresentadoService anexoPresentadoService;

	private Log logger = LogFactory.getLog(MovimientoExpedienteProceso.class);
	private static final String dateFormat = "dd-MM-yyyy";
	private DocumentoInternoDestino documentoInternoDestino;
	private Boolean detalleSeleccionado = false;
	private List<ExpedienteMovimiento> movimientoExpedientes;
	private List<AnexoPresentado> anexosPresentados;
	private DocumentoInterno docInternoObtenido;
	private DocumentoInternoDestino docInternoDestinoObtenido;
	private ExpedienteMovimiento expedienteMovimientoObtenido;
	private Window windowContiene;
	private TipoDocumentoServicio tipoDocumentoService;
	private DocumenoInternoReferenService docInternoReferenService;
	private AnexoPresentado anexoPresentadoObtenido;
	private Boolean esMovimiento;
	private String codigoDocumentoSeleccionado = "";
	private DocumentoInternoMapeoServicio documentoInternoMapeoServicio;

	/**
	 * The constructor should first build the main layout, set the composition
	 * root and then do any custom initialization.
	 * 
	 * The constructor will not be automatically regenerated by the visual
	 * editor.
	 */
	public MovimientoExpedienteProceso(Window windowContiene,
			CustomComponent quienLlama, Permiso permiso) {

		anexoPresentadoService = Injector
				.obtenerServicio(AnexoPresentadoService.class);
		docInternoReferenService = Injector
				.obtenerServicio(DocumenoInternoReferenService.class);
		tipoDocumentoService = Injector
				.obtenerServicio(TipoDocumentoServicio.class);

		docInternoDestinoService = Injector
				.obtenerServicio(DocumentoInternoDestinoService.class);

		expedienteMovimientoServicio = Injector
				.obtenerServicio(ExpedienteMovimientoServicio.class);
		dependenciaService = Injector
				.obtenerServicio(DependenciaServicio.class);
		usuarioDependenciaServicio = Injector
				.obtenerServicio(UsuarioDependenciaServicio.class);
		this.documentoInternoMapeoServicio = Injector
				.obtenerServicio(DocumentoInternoMapeoServicio.class);
		diaNoHabilServicio = Injector.obtenerServicio(DiaNoHabilServicio.class);
		this.permiso = permiso;
		this.quienLlama = quienLlama;
		this.windowContiene = windowContiene;
		buildMainLayout();
		setCompositionRoot(mainLayout);
		llenarCombos();
		postBuild();

		resetearFormulario();
		getInformacionDocumento(1);
		bloquearBotones();
		// TODO add user code here
	}

	public void postBuild() {

		label_9.setContentMode(ContentMode.HTML);
		label_8.setContentMode(ContentMode.HTML);
		lblEnviadoPor.setContentMode(ContentMode.HTML);
		lblRecepcionadoPor.setContentMode(ContentMode.HTML);
		lblAsunto.setContentMode(ContentMode.HTML);
		lblFolios.setContentMode(ContentMode.HTML);
		lblEnviadoA.setContentMode(ContentMode.HTML);
		lblEnviadoAValue.setContentMode(ContentMode.HTML);
		lblDependenciaActual.setContentMode(ContentMode.HTML);
		lblDependenciaActualValue.setContentMode(ContentMode.HTML);
		lblDependencia.setContentMode(ContentMode.HTML);
		lblDocumento.setContentMode(ContentMode.HTML);
		lblDependenciaDestino.setContentMode(ContentMode.HTML);
		lblExpedienteExternoO.setContentMode(ContentMode.HTML);
		lblFechaEnvio.setContentMode(ContentMode.HTML);
		lblDependenciaOrigen.setContentMode(ContentMode.HTML);
		label_19.setContentMode(ContentMode.HTML);
		label_18.setContentMode(ContentMode.HTML);
		label_17.setContentMode(ContentMode.HTML);
		label_15.setContentMode(ContentMode.HTML);
		label_16.setContentMode(ContentMode.HTML);
		label_14.setContentMode(ContentMode.HTML);
		label_13.setContentMode(ContentMode.HTML);
		label_12.setContentMode(ContentMode.HTML);
		label_11.setContentMode(ContentMode.HTML);
		label_10.setContentMode(ContentMode.HTML);
		label_7.setContentMode(ContentMode.HTML);
		label_6.setContentMode(ContentMode.HTML);
		label_5.setContentMode(ContentMode.HTML);
		label_4.setContentMode(ContentMode.HTML);
		label_3.setContentMode(ContentMode.HTML);
		label_2.setContentMode(ContentMode.HTML);
		label_1.setContentMode(ContentMode.HTML);
		lblSolicitante.setContentMode(ContentMode.HTML);
		this.labTiempoFaltante.setContentMode(ContentMode.HTML);
		this.labTiempoFaltanteValor.setContentMode(ContentMode.HTML);
		lblBusqueda.setContentMode(ContentMode.HTML);
		lblDependencia.setVisible(true);
		this.btnArchivosAnexados.addClickListener((ClickListener) this);
		this.btnArchivosAnexados.setStyleName(Reindeer.BUTTON_LINK);
		this.btnRecepcionar.addClickListener((ClickListener) this);
		this.btnVerRecorrido.addClickListener((ClickListener) this);
		this.btnArchivar.addClickListener((ClickListener) this);
		this.btnEliminar.addClickListener((ClickListener) this);
		this.btnImprimir.addClickListener((ClickListener) this);

		this.btnDescargarDocumento.addClickListener((ClickListener) this);

		this.btnReenviar.addClickListener((ClickListener) this);
		this.btnResponder.addClickListener((ClickListener) this);
		this.btnAdjuntarDoc.addClickListener((ClickListener) this);
		this.btnConsultarEscaneos.addClickListener((ClickListener) this);

		this.popDateDesde.setDateFormat(dateFormat);
		this.popDateDesde.setInputPrompt("Desde:");

		this.popDateDesde.setLenient(true);

		this.popDateHasta.setDateFormat(dateFormat);
		this.popDateHasta.setInputPrompt("Hasta:");
		this.popDateHasta.setLenient(true);
		cbxTipoBusqueda.setTabIndex(1);
		txtBuscarPor.setTabIndex(2);
		cbxDependencia.setTabIndex(3);
		cbxFiltrarDocumentos.setTabIndex(4);
		chkVerDetalle.setTabIndex(5);

		IndexedContainer cotenedorExpediente = new IndexedContainer();
		cotenedorExpediente.addContainerProperty("id", Long.class, null);
		cotenedorExpediente.addContainerProperty("esMovimiento", Boolean.class,
				null);
		cotenedorExpediente.addContainerProperty("item", Long.class, null);
		cotenedorExpediente
				.addContainerProperty("estado", Embedded.class, null);
		cotenedorExpediente.addContainerProperty("dependenciaOrigen",
				String.class, null);
		cotenedorExpediente.addContainerProperty("fechaEnvio", String.class,
				null);
		cotenedorExpediente.addContainerProperty("documento", String.class,
				null);
		cotenedorExpediente.addContainerProperty("asunto", String.class, null);
		cotenedorExpediente.addContainerProperty("tipoTramite", String.class,
				null);
		cotenedorExpediente.addContainerProperty("expedienteOriginal",
				String.class, null);
		cotenedorExpediente.addContainerProperty("iden", String.class, null);
		tbMovimientoExpediente.setImmediate(true);
		tbMovimientoExpediente.setSelectable(true);
		tbMovimientoExpediente.setContainerDataSource(cotenedorExpediente);
		tbMovimientoExpediente.setVisibleColumns(new Object[] { "item",
				"estado", "dependenciaOrigen", "fechaEnvio", "documento",
				"tipoTramite", "expedienteOriginal", "asunto", "iden" });
		tbMovimientoExpediente.setColumnHeader("item", "N°");
		tbMovimientoExpediente.setColumnHeader("estado", " ");
		tbMovimientoExpediente.setColumnHeader("dependenciaOrigen",
				"Dependencia Origen");
		tbMovimientoExpediente.setColumnHeader("fechaEnvio", "Fecha Envio");
		tbMovimientoExpediente.setColumnHeader("documento", "Documento");
		tbMovimientoExpediente.setColumnHeader("asunto", "Asunto");
		tbMovimientoExpediente.setColumnHeader("expedienteOriginal",
				"Expediente Original");
		tbMovimientoExpediente
				.setColumnHeader("tipoTramite", "Tipo de Tramite");
		tbMovimientoExpediente.setColumnHeader("iden", "Identificador");
		tbMovimientoExpediente.setColumnWidth("item", 20);
		tbMovimientoExpediente.setColumnWidth("estado", 20);
		tbMovimientoExpediente.setColumnWidth("dependenciaOrigen", 140);
		tbMovimientoExpediente.setColumnWidth("fechaEnvio", 100);
		tbMovimientoExpediente.setColumnWidth("documento", 120);
		tbMovimientoExpediente.setColumnWidth("asunto", 250);
		tbMovimientoExpediente.setColumnWidth("expedienteOriginal", 80);
		tbMovimientoExpediente.setColumnWidth("iden", 70);
		tbMovimientoExpediente.setColumnWidth("tipoTramite", 150);
		tbMovimientoExpediente.setColumnAlignment("estado", Table.Align.CENTER);
		tbMovimientoExpediente
				.addValueChangeListener(new ValueChangeListener() {

					@Override
					public void valueChange(ValueChangeEvent event) {
						// TODO Auto-generated method stub

						Item item = tbMovimientoExpediente
								.getItem(tbMovimientoExpediente.getValue());
						if (item != null) {
							chkVerDetalle.setValue(false);
							chkVerDetalle.setEnabled(true);
							codigoDocumentoSeleccionado = item
									.getItemProperty("iden").getValue()
									.toString();
							getDetalleDocumento(
									Long.parseLong(item.getItemProperty("id")
											.getValue().toString()),
									Boolean.parseBoolean(item
											.getItemProperty("esMovimiento")
											.getValue().toString()));

							if (!docInternoObtenido.getCodigoTipoDocumento()
									.equals("34")) {
								Integer cantMovimientosExpediente = expedienteMovimientoServicio
										.obtenerCantidadMovimientosPorExpediente(expedienteMovimientoObtenido
												.getExpediente());

								if (docInternoDestinoObtenido
										.getTipoMovimiento().equals('0')
										&& docInternoDestinoObtenido
												.getRecepcionadoPor() == null
										&& cbxFiltrarDocumentos.getValue()
												.toString().equals("0")) {

									bloquearBotones();
									if (cantMovimientosExpediente == 1) {
										btnEliminar.setEnabled(true);
									} else {
										btnEliminar.setEnabled(false);
									}
									btnVerRecorrido.setEnabled(true);
								} else if (!docInternoDestinoObtenido
										.getTipoMovimiento().equals('0')
										&& cbxFiltrarDocumentos.getValue()
												.toString().equals("0")) {
									bloquearBotones();
									btnVerRecorrido.setEnabled(true);
								} else if (docInternoDestinoObtenido
										.getTipoMovimiento().equals('0')
										&& docInternoDestinoObtenido
												.getRecepcionadoPor() != null
										&& cbxFiltrarDocumentos.getValue()
												.toString().equals("0")) {
									bloquearBotones();
									btnVerRecorrido.setEnabled(true);
								} else if (docInternoDestinoObtenido
										.getTipoMovimiento().equals('0')
										&& docInternoDestinoObtenido
												.getRecepcionadoPor() == null
										&& cbxFiltrarDocumentos.getValue()
												.toString().equals("1")) {
									bloquearBotones();
									btnVerRecorrido.setEnabled(true);
									btnRecepcionar.setEnabled(true);
								}

								else if (docInternoDestinoObtenido
										.getTipoMovimiento().equals('0')
										&& docInternoDestinoObtenido
												.getRecepcionadoPor() != null
										&& cbxFiltrarDocumentos.getValue()
												.toString().equals("1")) {
									btnRecepcionar.setEnabled(false);
									btnArchivar.setEnabled(true);
									btnReenviar.setEnabled(true);
									btnResponder.setEnabled(true);
									btnImprimir.setEnabled(true);
									btnEliminar.setEnabled(false);
									btnVerRecorrido.setEnabled(true);
								} else if (docInternoDestinoObtenido
										.getTipoMovimiento().equals('3')
										&& cbxFiltrarDocumentos.getValue()
												.toString().equals("1")) {

									btnArchivar.setEnabled(false);
									btnRecepcionar.setEnabled(false);
									btnReenviar.setEnabled(false);
									btnResponder.setEnabled(false);
									btnImprimir.setEnabled(true);
									btnEliminar.setEnabled(false);
									btnVerRecorrido.setEnabled(true);

								} else if (docInternoDestinoObtenido
										.getTipoMovimiento().equals('1')
										&& cbxFiltrarDocumentos.getValue()
												.toString().equals("1")) {

									btnArchivar.setEnabled(false);
									btnRecepcionar.setEnabled(false);
									btnReenviar.setEnabled(true);
									btnResponder.setEnabled(false);
									btnImprimir.setEnabled(true);
									btnEliminar.setEnabled(false);
									btnVerRecorrido.setEnabled(true);

								} else if (docInternoDestinoObtenido
										.getTipoMovimiento().equals('2')
										&& cbxFiltrarDocumentos.getValue()
												.toString().equals("1")) {

									btnArchivar.setEnabled(false);
									btnRecepcionar.setEnabled(false);
									btnReenviar.setEnabled(true);
									btnResponder.setEnabled(false);
									btnImprimir.setEnabled(true);
									btnEliminar.setEnabled(false);
									btnVerRecorrido.setEnabled(true);

								}

							} else if (docInternoObtenido
									.getCodigoTipoDocumento().equals("34")) {
								if (docInternoDestinoObtenido
										.getTipoMovimiento().equals('0')
										&& docInternoDestinoObtenido
												.getRecepcionadoPor() == null
										&& cbxFiltrarDocumentos.getValue()
												.toString().equals("0")) {

									bloquearBotones();

								} else if (docInternoDestinoObtenido
										.getTipoMovimiento().equals('0')
										&& docInternoDestinoObtenido
												.getRecepcionadoPor() == null
										&& cbxFiltrarDocumentos.getValue()
												.toString().equals("1")) {
									bloquearBotones();
									btnRecepcionar.setEnabled(true);
								}

								else if (docInternoDestinoObtenido
										.getTipoMovimiento().equals('0')
										&& docInternoDestinoObtenido
												.getRecepcionadoPor() != null
										&& cbxFiltrarDocumentos.getValue()
												.toString().equals("1")) {
									btnRecepcionar.setEnabled(false);
									btnArchivar.setEnabled(true);
									btnReenviar.setEnabled(false);
									btnResponder.setEnabled(false);
									btnImprimir.setEnabled(false);
									btnEliminar.setEnabled(false);
									btnVerRecorrido.setEnabled(false);
								} else if (docInternoDestinoObtenido
										.getTipoMovimiento().equals('3')
										&& cbxFiltrarDocumentos.getValue()
												.toString().equals("1")) {

									btnArchivar.setEnabled(false);
									btnRecepcionar.setEnabled(false);
									btnReenviar.setEnabled(false);
									btnResponder.setEnabled(false);
									btnImprimir.setEnabled(false);
									btnEliminar.setEnabled(false);
									btnVerRecorrido.setEnabled(false);

								} else if (docInternoDestinoObtenido
										.getTipoMovimiento().equals('1')
										&& cbxFiltrarDocumentos.getValue()
												.toString().equals("1")) {

									btnArchivar.setEnabled(false);
									btnRecepcionar.setEnabled(false);
									btnReenviar.setEnabled(false);
									btnResponder.setEnabled(false);
									btnImprimir.setEnabled(false);
									btnEliminar.setEnabled(false);
									btnVerRecorrido.setEnabled(false);

								} else if (docInternoDestinoObtenido
										.getTipoMovimiento().equals('2')
										&& cbxFiltrarDocumentos.getValue()
												.toString().equals("1")) {

									btnArchivar.setEnabled(false);
									btnRecepcionar.setEnabled(false);
									btnReenviar.setEnabled(false);
									btnResponder.setEnabled(false);
									btnImprimir.setEnabled(false);
									btnEliminar.setEnabled(false);
									btnVerRecorrido.setEnabled(false);

								}

							}
						}
					}
				});
		IndexedContainer contenedorReferencia = new IndexedContainer();
		contenedorReferencia.addContainerProperty("id", Long.class, null);
		contenedorReferencia.addContainerProperty("estado", Embedded.class,
				null);
		contenedorReferencia.addContainerProperty("item", Long.class, null);
		contenedorReferencia.addContainerProperty("documento", String.class,
				null);
		contenedorReferencia.addContainerProperty("fechaEnvio",
				Timestamp.class, null);
		contenedorReferencia.addContainerProperty("dependenciaOrigen",
				String.class, null);
		contenedorReferencia.addContainerProperty("dependenciaDestino",
				String.class, null);
		contenedorReferencia.addContainerProperty("asunto", String.class, null);
		tbReferencia.setContainerDataSource(contenedorReferencia);
		tbReferencia.setVisibleColumns(new Object[] { "item", "estado",
				"documento", "fechaEnvio", "dependenciaOrigen",
				"dependenciaDestino", "asunto" });
		tbReferencia.setColumnHeader("item", "N°");
		tbReferencia.setColumnHeader("estado", " ");
		tbReferencia.setColumnHeader("documento", "Documento");
		tbReferencia.setColumnHeader("fechaEnvio", "Fecha Envío");
		tbReferencia.setColumnHeader("dependenciaOrigen", "Dependencia Origen");
		tbReferencia.setColumnHeader("dependenciaDestino",
				"Dependencia Destino");
		tbReferencia.setColumnHeader("asunto", "Asunto");
		tbReferencia.setColumnWidth("item", 10);
		tbReferencia.setColumnWidth("item", 15);
		tbReferencia.setColumnWidth("documento", 100);
		tbReferencia.setColumnWidth("fechaEnvio", 90);
		tbReferencia.setColumnWidth("dependenciaOrigen", 120);
		tbReferencia.setColumnWidth("dependenciaDestino", 120);
		tbReferencia.setColumnWidth("asunto", 300);
		chkTodos.setImmediate(true);
		chkTodos.addValueChangeListener(new ValueChangeListener() {

			@Override
			public void valueChange(ValueChangeEvent event) {
				// TODO Auto-generated method stub

				if (chkTodos.getValue()) {
					txtBuscarPor.setValue("");
					chkDesde.setValue(false);
					getInformacionDocumento(1);
				}
			}
		});

		chkDesde.setImmediate(true);
		chkDesde.addValueChangeListener(new ValueChangeListener() {

			@Override
			public void valueChange(ValueChangeEvent event) {
				// TODO Auto-generated method stub

				if (chkDesde.getValue()) {
					txtBuscarPor.setValue("");
					chkTodos.setValue(false);
					chkVerDetalle.setValue(false);
					if (popDateDesde.getValue() != null
							&& popDateHasta.getValue() != null) {
						getInformacionDocumento(2);
					} else if (popDateDesde.getValue() == null) {
						popDateDesde.focus();
					} else if (popDateHasta.getValue() == null) {
						popDateHasta.focus();
					}
				}
			}
		});

		cbxDependencia.setImmediate(true);
		cbxDependencia.addValueChangeListener(new ValueChangeListener() {

			@Override
			public void valueChange(ValueChangeEvent event) {
				// TODO Auto-generated method stub
				if (chkTodos.getValue()) {
					getInformacionDocumento(1);
				} else if (chkDesde.getValue()) {
					getInformacionDocumento(2);
				}
				tbMovimientoExpediente.unselect(tbMovimientoExpediente
						.getValue());
				detalleSeleccionado = false;
				chkVerDetalle.setValue(false);
			}
		});

		popDateDesde.setImmediate(true);
		popDateDesde.addValueChangeListener(new ValueChangeListener() {

			@Override
			public void valueChange(ValueChangeEvent event) {
				if (popDateHasta.getValue() == null) {
					popDateHasta.focus();
				} else {
					getInformacionDocumento(2);
				}
				chkVerDetalle.setValue(false);
			}
		});
		popDateHasta.setImmediate(true);
		popDateHasta.addValueChangeListener(new ValueChangeListener() {

			@Override
			public void valueChange(ValueChangeEvent event) {
				// TODO Auto-generated method stub
				if (popDateDesde.getValue() == null) {
					popDateDesde.focus();
				} else {
					getInformacionDocumento(2);
				}
				chkVerDetalle.setValue(false);
			}
		});
		chkVerDetalle.setImmediate(true);
		chkVerDetalle.addValueChangeListener(new ValueChangeListener() {

			@Override
			public void valueChange(ValueChangeEvent event) {
				// TODO Auto-generated method stub
				if (detalleSeleccionado) {
					if (chkVerDetalle.getValue()) {
						windowContiene.setImmediate(true);
						windowContiene.setHeight("600px");
						windowContiene.center();
					} else {
						windowContiene.setImmediate(true);
						windowContiene.setHeight("335px");
						windowContiene.center();
					}
				} else {
					windowContiene.setImmediate(true);
					windowContiene.setHeight("335px");
					windowContiene.center();
					chkVerDetalle.setValue(false);
					chkVerDetalle.setEnabled(false);
					// Notificacion
					// .show(new Notificacion(
					// "Por favor seleccione un elemento de la tabla <br/>para ver su detalle",
					// Constantes.MENSAJE.TYPE_WARNING));
				}
			}
		});
		cbxFiltrarDocumentos.setImmediate(true);
		cbxFiltrarDocumentos.addValueChangeListener(new ValueChangeListener() {

			@Override
			public void valueChange(ValueChangeEvent event) {
				// TODO Auto-generated method stub

				if (chkTodos.getValue()) {
					getInformacionDocumento(1);
				} else if (chkDesde.getValue()) {
					getInformacionDocumento(2);
				}
				if (cbxFiltrarDocumentos.getValue().toString().equals("0")) {
					if (cbxTipoBusqueda.getValue().toString().equals("0")) {
						lblDependencia.setVisible(true);
						lblDependencia.setValue("<b>Dependencia Destino");
					} else {
						lblDependencia.setValue("");
					}
					bloquearBotones();
				} else if (cbxFiltrarDocumentos.getValue().toString()
						.equals("1")) {
					if (cbxTipoBusqueda.getValue().toString().equals("0")) {
						lblDependencia.setValue("<b>Dependencia Origen");
					} else {
						lblDependencia.setValue("");
					}
					bloquearBotones();
					// btnEliminar.setEnabled(false);
				}
				tbMovimientoExpediente.unselect(tbMovimientoExpediente
						.getValue());
				detalleSeleccionado = false;
				chkVerDetalle.setValue(false);
			}
		});

		cbxTipoBusqueda.setImmediate(true);
		cbxTipoBusqueda.addValueChangeListener(new ValueChangeListener() {

			@Override
			public void valueChange(ValueChangeEvent event) {
				// TODO Auto-generated method stub
				txtBuscarPor.focus();
				if (cbxTipoBusqueda.getValue().toString().equals("0")) {
					if (cbxFiltrarDocumentos.getValue().toString().equals("0")) {
						lblDependencia.setVisible(true);
						lblDependencia.setValue("<b>Dependencia Destino");
					} else if (cbxFiltrarDocumentos.getValue().toString()
							.equals("1")) {
						lblDependencia.setValue("<b>Dependencia Origen");
					}
				} else {
					lblDependencia.setValue("");
				}
			}
		});

		txtBuscarPor.setImmediate(true);
		txtBuscarPor.setId("buscarPor");
		txtBuscarPor.addShortcutListener(new ShortcutListener("",
				KeyCode.ENTER, null) {

			@Override
			public void handleAction(Object sender, Object target) {
				// TODO Auto-generated method stub
				if (target instanceof TextField
						&& ((TextField) target).getId().equals("buscarPor")) {
					if (chkTodos.getValue()) {
						getInformacionDocumento(1);
					} else if (chkDesde.getValue()) {
						getInformacionDocumento(2);
					}
					chkVerDetalle.setValue(false);
				}
			}
		});

	}

	public void llenarCombos() {
		// LLenar Combo de Filtros;

		// LLenar como Buscar Por
		for (int i = 0; i < cboBuscarPor.length; i++) {
			cbxTipoBusqueda.addItem(i);
			cbxTipoBusqueda.setItemCaption(i, cboBuscarPor[i]);
		}
		cbxTipoBusqueda.setValue(0);
		cbxTipoBusqueda.setNullSelectionAllowed(false);

		for (int i = 0; i < cboFiltrarDocumento.length; i++) {
			cbxFiltrarDocumentos.addItem(i);
			cbxFiltrarDocumentos.setItemCaption(i, cboFiltrarDocumento[i]);
		}
		cbxFiltrarDocumentos.setValue(0);
		cbxFiltrarDocumentos.setNullSelectionAllowed(false);

		// List<Dependencia> dependencias = dependenciaService.obtenerTodos();
		List<UsuarioDependencia> usuarioDependencias = usuarioDependenciaServicio
				.buscarPorCodigoUsuario(SigeUtil.obtenerCodigoUsuarioSesion(),
						false);

		for (UsuarioDependencia usuarioDependencia : usuarioDependencias) {
			cbxDependencia.addItem(usuarioDependencia.getDependencia().getId());
			cbxDependencia.setItemCaption(usuarioDependencia.getDependencia()
					.getId(), usuarioDependencia.getDependencia().getNombre()
					.trim());
		}
		if (usuarioDependencias.size() > 0) {
			cbxDependencia.setValue(usuarioDependencias.get(0).getDependencia()
					.getId());
		}
	}

	@SuppressWarnings("unchecked")
	public void getDetalleDocumento(Long codDocumento, Boolean esMov) {
		this.detalleSeleccionado = true;
		if (esMov) {
			this.esMovimiento = true;
			btnArchivosAnexados.setVisible(true);
			label_20.setVisible(true);
			expedienteMovimientoObtenido = expedienteMovimientoServicio
					.obtener(codDocumento);
			lblSolicitanteValue.setValue(expedienteMovimientoObtenido
					.getExpediente().getSolicitante().getNombreCompleto());
			docInternoObtenido = expedienteMovimientoObtenido
					.getDocumentoInterno();
			docInternoDestinoObtenido = docInternoDestinoService
					.obtenerDocInternoDestinoPorDocInterno(expedienteMovimientoObtenido
							.getDocumentoInterno().getCodigodocumento());
			lblFolios.setValue(expedienteMovimientoObtenido
					.getDocumentoInterno().getNumerofolios() + "");
			lblAsunto.setValue(expedienteMovimientoObtenido.getExpediente()
					.getAsunto());
			lblFechaEnvio
					.setValue(obtenerFormatoFecha(expedienteMovimientoObtenido
							.getExpediente().getFechaCreacion()));
			lblExpedienteExternoO.setValue(expedienteMovimientoObtenido
					.getExpediente().getNumero()
					+ " - "
					+ expedienteMovimientoObtenido.getExpediente().getAnio());
			Dependencia dependenciaEnvio = expedienteMovimientoServicio
					.obtenerDependenciaEnvio(expedienteMovimientoObtenido);
			if (dependenciaEnvio == null) {
				lblEnviadoAValue.setValue("");
			} else {
				lblEnviadoAValue.setValue(dependenciaEnvio.getNombre());
			}
			lblDependenciaActualValue.setValue(expedienteMovimientoServicio
					.obtenerExpedienteMovimiento(
							expedienteMovimientoObtenido.getExpediente()
									.getCodigo()).getDependencia().getNombre());

			Date fechaInicio = (Date) expedienteMovimientoObtenido
					.getExpediente().getFechaExpediente();
			Long cantidadDiasNoHabiles = diaNoHabilServicio
					.getCantidadDiasNoHabiles(fechaInicio, new Date());
			Integer diasTranscurridos = new Integer(
					SigeUtil.getDiasTranscurridos(expedienteMovimientoObtenido
							.getExpediente().getFechaExpediente()));
			diasTranscurridos = diasTranscurridos.intValue()
					- cantidadDiasNoHabiles.intValue();
			diasTranscurridos = expedienteMovimientoObtenido.getExpediente()
					.getTipoTramite().getTipoAten().intValue()
					- diasTranscurridos.intValue();

			this.labTiempoFaltanteValor.setValue("<b><font color=\"#FF0000\">"
					+ diasTranscurridos.toString() + " dias</font></b>");
		} else {
			this.esMovimiento = false;
			btnArchivosAnexados.setVisible(false);
			label_20.setVisible(false);
			anexoPresentadoObtenido = anexoPresentadoService
					.obtener(codDocumento);
			lblSolicitanteValue.setValue(anexoPresentadoObtenido
					.getSolicitante().getNombreCompleto());
			docInternoObtenido = anexoPresentadoObtenido.getDocumentoInterno();
			docInternoDestinoObtenido = docInternoDestinoService
					.obtenerDocInternoDestinoPorDocInterno(anexoPresentadoObtenido
							.getDocumentoInterno().getCodigodocumento());
			lblFolios.setValue(anexoPresentadoObtenido.getNumeroFolios());
			lblAsunto.setValue(anexoPresentadoObtenido.getAsunto());
			lblFechaEnvio.setValue(obtenerFormatoFecha(anexoPresentadoObtenido
					.getDocumentoInterno().getFechadocumento()));
			lblExpedienteExternoO.setValue("");
		}

		lblDependenciaOrigen.setValue(docInternoObtenido.getDependencia()
				.getNombre());
		lblDependenciaDestino.setValue(docInternoDestinoObtenido
				.getDependencia().getNombre());
		lblDocumento.setValue(obtenerDocumento(docInternoObtenido));
		lblRecepcionadoPor.setValue(docInternoDestinoObtenido
				.getRecepcionadoPor());
		lblEnviadoPor.setValue(docInternoObtenido.getCreadoPor());

		IndexedContainer contenedorReferencias = (IndexedContainer) tbReferencia
				.getContainerDataSource();
		contenedorReferencias.removeAllItems();
		List<DocumentoInterno> referencias = docInternoReferenService
				.obtenerReferecias(docInternoObtenido);
		Long numItem = 1L;
		for (int i = 0; i < referencias.size(); i++) {
			Item item = contenedorReferencias.addItem(i);
			DocumentoInternoDestino docInternoDestino = docInternoDestinoService
					.obtenerDocInternoDestinoPorDocInterno(referencias.get(i)
							.getCodigodocumento());
			item.getItemProperty("id").setValue(referencias.get(i).getId());
			item.getItemProperty("item").setValue(numItem);
			item.getItemProperty("estado").setValue(
					SigeUtil.asignarEstado(docInternoDestino
							.getTipoMovimiento(), docInternoDestino
							.getRecepcionadoPor() == null ? ""
							: docInternoDestino.getRecepcionadoPor()));
			item.getItemProperty("documento").setValue(
					tipoDocumentoService.obtenerTipoDocumento(
							referencias.get(i).getCodigoTipoDocumento())
							.getNombre());
			item.getItemProperty("fechaEnvio").setValue(
					referencias.get(i).getFechadocumento());
			item.getItemProperty("dependenciaOrigen").setValue(
					referencias.get(i).getDependencia().getNombre());
			item.getItemProperty("dependenciaDestino").setValue(
					docInternoDestino.getDependencia().getNombre());
			item.getItemProperty("asunto").setValue(
					referencias.get(i).getAsunto());
		}

	}

	public String obtenerFormatoFecha(Timestamp Fecha) {
		String fecha = null;
		try {
			fecha = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss").format(Fecha);

		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return fecha;
	}

	@Override
	public void buttonClick(ClickEvent event) {
		// TODO Auto-generated method stub
		if (event.getSource() == this.btnReenviar) {
			if (detalleSeleccionado) {
				ExpedienteCanonico expedienteCanonico = new ExpedienteCanonico();
				expedienteCanonico
						.setCodExpedienteMovimiento(expedienteMovimientoObtenido
								.getId());
				expedienteCanonico.setDependenciaEntidad(dependenciaService
						.obtener(Long.parseLong(cbxDependencia.getValue()
								.toString())));
				expedienteCanonico.setDerivar(Boolean.TRUE);
				Window ventana = SigeUtil.generarBuscador(new Window(),
						"MODIFICAR DOCUMENTO", "840px", "570px");
				ventana.setContent(new ModificarDocumentoProceso(ventana, this,
						expedienteCanonico));
				UI.getCurrent().addWindow(ventana);

				detalleSeleccionado = false;
				tbMovimientoExpediente.unselect(tbMovimientoExpediente
						.getValue());
			} else {
				Notificacion
						.show(new Notificacion(
								"Por favor seleccione un elemento de la tabla <br/>para derivarlo",
								Constantes.MENSAJE.TYPE_WARNING));
			}
		} else if (event.getSource() == this.btnArchivosAnexados) {
			if (this.esMovimiento) {
				Window ventana = SigeUtil.generarBuscador(new Window(),
						"ANEXOS PRESENTADOS", "890", "345");
				ventana.setContent(new ConsultaAnexoExpedientes(ventana,
						expedienteMovimientoObtenido));
				UI.getCurrent().addWindow(ventana);
				detalleSeleccionado = false;
				tbMovimientoExpediente.unselect(tbMovimientoExpediente
						.getValue());
			}
		} else if (event.getSource() == this.btnResponder) {
			if (detalleSeleccionado) {
				ExpedienteCanonico expedienteCanonico = new ExpedienteCanonico();
				expedienteCanonico
						.setCodExpedienteMovimiento(expedienteMovimientoObtenido
								.getId());
				expedienteCanonico.setDependenciaEntidad(dependenciaService
						.obtener(Long.parseLong(cbxDependencia.getValue()
								.toString())));
				expedienteCanonico.setDerivar(Boolean.FALSE);
				Window ventana = SigeUtil.generarBuscador(new Window(),
						"MODIFICAR DOCUMENTO", "840px", "580px");
				ventana.setContent(new ModificarDocumentoProceso(ventana, this,
						expedienteCanonico));
				UI.getCurrent().addWindow(ventana);
				detalleSeleccionado = false;
				tbMovimientoExpediente.unselect(tbMovimientoExpediente
						.getValue());
			} else {
				Notificacion
						.show(new Notificacion(
								"Por favor seleccione un elemento de la tabla <br/>para derivarlo",
								Constantes.MENSAJE.TYPE_WARNING));
			}
		} else if (event.getSource() == this.btnVerRecorrido) {
			if (codigoDocumentoSeleccionado.length() > 0) {
				Window ventana = SigeUtil.generarBuscador(new Window(),"RECORRIDO DEL DOCUMENTO", "774px", "550px");
				ventana.setContent(new PanelMovimientoExpedienteGrafico(this,documentoInternoMapeoServicio.obtenerUltimoMovimiento(codigoDocumentoSeleccionado)));
				UI.getCurrent().addWindow(ventana);
			} else {
				Notificacion
						.show(new Notificacion(
								"Debe seleccionar un documento<br> para ver su recorrido",
								Constantes.MENSAJE.TYPE_ERROR));
			}
		} else if (event.getSource() == this.btnRecepcionar) {
			Date date = new Date();
			Timestamp fechaHora = new Timestamp(date.getTime());
			if (detalleSeleccionado) {
				docInternoDestinoObtenido.setFechaRecepcion(fechaHora);
				docInternoDestinoObtenido.setRecepcionadoPor(SigeUtil
						.obtenerUsuarioSesion());
				ConfirmDialog.show(UI.getCurrent(), "Confirmación",
						"¿Desea recepcionar el documento?", "Aceptar",
						"Cancelar", new ConfirmDialog.Listener() {
							private static final long serialVersionUID = 1L;

							public void onClose(ConfirmDialog dialog) {
								if (dialog.isConfirmed()) {
									docInternoDestinoService
											.actualizar(docInternoDestinoObtenido);
									if (anexoPresentadoObtenido != null) {
										Date date = new Date();
										Timestamp fechaHora = new Timestamp(
												date.getTime());
										anexoPresentadoObtenido
												.setFechaRecepcion(fechaHora);
										anexoPresentadoObtenido.setRecepcionadoPor(SigeUtil
												.obtenerUsuarioSesion());
										anexoPresentadoService
												.actualizar(anexoPresentadoObtenido);
									}
									getInformacionDocumento(1);
									Notificacion
											.show(new Notificacion(
													"El Documento ha sido recepcionado",
													Constantes.MENSAJE.TYPE_SUCCES));
									detalleSeleccionado = false;
									tbMovimientoExpediente
											.unselect(tbMovimientoExpediente
													.getValue());

								}
							}
						});
			} else {
				Notificacion
						.show(new Notificacion(
								"Por favor seleccione un elemento de la tabla <br/>para recepcionar",
								Constantes.MENSAJE.TYPE_WARNING));
			}
			bloquearBotones();
		} else if (event.getSource() == this.btnArchivar) {
			if (detalleSeleccionado) {

				if (esMovimiento) {
					Window ventana = SigeUtil.generarBuscador(new Window(),
							"ARCHIVAR EXPEDIENTE", "585", "310");
					ventana.setContent(new ArchivarExpedienteProceso(this,
							ventana, expedienteMovimientoObtenido));
					UI.getCurrent().addWindow(ventana);
				} else if (!esMovimiento) {
					ConfirmDialog
							.show(UI.getCurrent(),
									"Confirmación",
									"¿Esta seguro que desea archivar el anexo del expediente?",
									"Aceptar", "Cancelar",
									new ConfirmDialog.Listener() {
										private static final long serialVersionUID = 1L;

										public void onClose(ConfirmDialog dialog) {
											if (dialog.isConfirmed()) {
												DocumentoInterno docInternoArchivar = anexoPresentadoObtenido
														.getDocumentoInterno();
												DocumentoInternoDestino docInternoDestinoArchivar = docInternoDestinoService
														.obtenerDocInternoDestinoPorDocInterno(docInternoArchivar
																.getCodigodocumento());
												Date date = new Date();
												final Timestamp fechaHora = new Timestamp(
														date.getTime());
												docInternoDestinoArchivar
														.setFechaFinalizacion(fechaHora);
												docInternoDestinoArchivar
														.setFinalizadoPor(SigeUtil
																.obtenerCodigoUsuarioSesion()
																.toString());
												docInternoDestinoArchivar
														.setEstaFinalizado(Boolean.TRUE);
												docInternoDestinoArchivar
														.setTextoFinaliza("ANEXANDO A EXPEDIENTE");
												docInternoDestinoArchivar
														.setTipoMovimiento('3');
												docInternoDestinoService
														.actualizar(docInternoDestinoArchivar);
												Notificacion
														.show(new Notificacion(
																"El anexo ha sido archivado con éxito",
																Constantes.MENSAJE.TYPE_SUCCES));
												getInformacionDocumento(1);
											}
										}
									});
				}

				tbMovimientoExpediente.unselect(tbMovimientoExpediente
						.getValue());
				detalleSeleccionado = false;

			} else {
				Notificacion
						.show(new Notificacion(
								"Por favor seleccione un elemento de la tabla <br/>para archivarlo",
								Constantes.MENSAJE.TYPE_WARNING));
			}
			bloquearBotones();
		} else if (event.getSource() == this.btnEliminar) {
			if (detalleSeleccionado) {
				expedienteMovimientoObtenido.setEstado(Boolean.FALSE);

				ConfirmDialog.show(UI.getCurrent(), "Confirmación",
						"¿Esta seguro que desea eliminar el expediente?",
						"Aceptar", "Cancelar", new ConfirmDialog.Listener() {
							private static final long serialVersionUID = 1L;

							public void onClose(ConfirmDialog dialog) {
								if (dialog.isConfirmed()) {
									Expediente expedienteActualizar = expedienteMovimientoObtenido
											.getExpediente();
									DocumentoInterno docInternoActualizar = expedienteMovimientoObtenido
											.getDocumentoInterno();
									List<DocumentoInternoDestino> docDestinoActualizar = docInternoActualizar
											.getDocumentosInternosDestinos();
									expedienteActualizar
											.setEstado(Boolean.FALSE);
									docInternoActualizar
											.setEstado(Boolean.FALSE);
									for (DocumentoInternoDestino docDestino : docDestinoActualizar) {
										docDestino.setEstado(Boolean.FALSE);
									}
									expedienteMovimientoServicio
											.eliminarExpediente(
													expedienteActualizar,
													docInternoActualizar,
													docDestinoActualizar,
													expedienteMovimientoObtenido);
									getInformacionDocumento(1);
									Notificacion.show(new Notificacion(
											"El Documento ha sido eliminado",
											Constantes.MENSAJE.TYPE_SUCCES));
									detalleSeleccionado = false;
									tbMovimientoExpediente
											.unselect(tbMovimientoExpediente
													.getValue());

								}
							}
						});
			} else {
				Notificacion
						.show(new Notificacion(
								"Por favor seleccione un elemento de la tabla <br/>para eliminarlo",
								Constantes.MENSAJE.TYPE_ERROR));
			}
			bloquearBotones();
		} else if (event.getSource() == this.btnDescargarDocumento) {
			if (detalleSeleccionado) {
				Window ventana = SigeUtil.generarBuscador(new Window(),
						"DESCARGAR DOCUMENTOS", "640px", "330px");
				ventana.setContent(new PanelExpedienteDocumento(
						expedienteMovimientoObtenido.getExpediente()));
				UI.getCurrent().addWindow(ventana);
			} else {
				Notificacion
						.show(new Notificacion(
								"Por favor seleccione un elemento de la tabla <br/>para ver los documentos cargados",
								Constantes.MENSAJE.TYPE_ERROR));
			}

		} else if (event.getSource() == this.btnAdjuntarDoc) {
			if (detalleSeleccionado) {
				Window ventana = SigeUtil.generarBuscador(new Window(),
						"ADJUNTAR EXPEDIENTES ESCANEADOS", "580px", "440px");
				ventana.setContent(new ExpedienteAdjuntar(ventana,
						dependenciaService.obtener((Long) cbxDependencia
								.getValue()), expedienteMovimientoObtenido
								.getExpediente()));
				UI.getCurrent().addWindow(ventana);
			} else {
				Notificacion
						.show(new Notificacion(
								"Debe seleccionar un expediente para adjuntar escaneos",
								Constantes.MENSAJE.TYPE_ERROR));
			}
		} else if (event.getSource() == this.btnConsultarEscaneos) {
			if (detalleSeleccionado) {
				Window ventana = SigeUtil.generarBuscador(new Window(),
						"DESCARGAR EXPEDIENTES ESCANEADOS", "660px", "360px");
				ventana.setContent(new PanelExpedienteEscaneado(
						expedienteMovimientoObtenido.getExpediente()));
				UI.getCurrent().addWindow(ventana);
			} else {
				Notificacion
						.show(new Notificacion(
								"Por favor seleccione un elemento de la tabla <br/>para ver los expedientes escaneados",
								Constantes.MENSAJE.TYPE_ERROR));
			}
		}
	}

	@SuppressWarnings("unchecked")
	public void getInformacionDocumento(Integer Tipobusqueda) {
		Dependencia dependencia = dependenciaService.obtener(Long
				.parseLong(cbxDependencia.getValue().toString()));

		ExpedienteCanonico expedienteCanonico = obtenerExpedienteCanonico();
		if (Tipobusqueda == 1) {

			movimientoExpedientes = expedienteMovimientoServicio
					.obtenerExpedientesOficina(dependencia, expedienteCanonico);
			anexosPresentados = anexoPresentadoService.getAllAnexos(
					dependencia, expedienteCanonico);
		} else if (Tipobusqueda == 2) {

			Date fechaInicio = SigeUtil.obtenerFechaFormato(popDateDesde
					.getValue().toString(), 0);
			Date fechaFin = SigeUtil.obtenerFechaFormato(popDateHasta
					.getValue().toString(), 0);
			movimientoExpedientes = expedienteMovimientoServicio
					.obtenerExpedientesOficina(dependencia, fechaInicio,
							fechaFin, expedienteCanonico);
			anexosPresentados = anexoPresentadoService.getAllAnexos(
					dependencia, fechaInicio, fechaFin, expedienteCanonico);

		}
		IndexedContainer contenedor = (IndexedContainer) tbMovimientoExpediente
				.getContainerDataSource();
		contenedor.removeAllItems();
		if (movimientoExpedientes.size() > 0 || anexosPresentados.size() > 0) {

			Long contador = 1L;
			for (int i = 0; i < movimientoExpedientes.size(); i++) {
				Item item = tbMovimientoExpediente.addItem(i);
				item.getItemProperty("id").setValue(
						movimientoExpedientes.get(i).getId());
				item.getItemProperty("esMovimiento").setValue(Boolean.TRUE);
				item.getItemProperty("item").setValue(contador++);

				documentoInternoDestino = docInternoDestinoService
						.obtenerDocInternoDestinoPorDocInterno(movimientoExpedientes
								.get(i).getDocumentoInterno()
								.getCodigodocumento());
				String recepcionadoPor = documentoInternoDestino
						.getRecepcionadoPor() == null ? ""
						: documentoInternoDestino.getRecepcionadoPor();
				Character tipoMovimiento = documentoInternoDestino
						.getTipoMovimiento();

				item.getItemProperty("estado")
						.setValue(
								SigeUtil.asignarEstado(tipoMovimiento,
										recepcionadoPor));
				item.getItemProperty("dependenciaOrigen").setValue(
						movimientoExpedientes.get(i).getDocumentoInterno()
								.getDependencia().getNombre());
				item.getItemProperty("fechaEnvio").setValue(
						obtenerFormatoFecha(movimientoExpedientes.get(i)
								.getExpediente().getFechaExpediente()));
				item.getItemProperty("documento").setValue(
						obtenerDocumento(movimientoExpedientes.get(i)
								.getDocumentoInterno()));

				item.getItemProperty("expedienteOriginal").setValue(
						movimientoExpedientes.get(i).getExpediente()
								.getCodigo());
				if (movimientoExpedientes.get(i).getCorrelativo() == 1) {
					item.getItemProperty("asunto").setValue(
							movimientoExpedientes.get(i).getExpediente()
									.getObservaciones());
				} else {
					item.getItemProperty("asunto").setValue(
							movimientoExpedientes.get(i).getDocumentoInterno()
									.getAsunto());
				}
				item.getItemProperty("iden").setValue(
						movimientoExpedientes.get(i).getDocumentoInterno()
								.getCodigodocumento());

				item.getItemProperty("tipoTramite").setValue(
						movimientoExpedientes.get(i).getExpediente()
								.getTipoTramite().getNombre());
			}
			Long contadorAnexos = contador;
			for (int i = 0; i < anexosPresentados.size(); i++) {
				Item item;
				if (movimientoExpedientes.size() == 0) {
					item = tbMovimientoExpediente.addItem(i);
				} else {
					item = tbMovimientoExpediente.addItem(contadorAnexos++);
				}
				item.getItemProperty("esMovimiento").setValue(Boolean.FALSE);
				item.getItemProperty("id").setValue(
						anexosPresentados.get(i).getId());
				item.getItemProperty("item").setValue(contador++);

				documentoInternoDestino = docInternoDestinoService
						.obtenerDocInternoDestinoPorDocInterno(anexosPresentados
								.get(i).getDocumentoInterno()
								.getCodigodocumento());
				String recepcionadoPor = documentoInternoDestino
						.getRecepcionadoPor() == null ? ""
						: documentoInternoDestino.getRecepcionadoPor();
				Character tipoMovimiento = documentoInternoDestino
						.getTipoMovimiento();

				item.getItemProperty("estado")
						.setValue(
								SigeUtil.asignarEstado(tipoMovimiento,
										recepcionadoPor));
				item.getItemProperty("dependenciaOrigen").setValue(
						anexosPresentados.get(i).getDocumentoInterno()
								.getDependencia().getNombre());
				item.getItemProperty("fechaEnvio").setValue(
						obtenerFormatoFecha(anexosPresentados.get(i)
								.getExpediente().getFechaExpediente()));
				item.getItemProperty("documento").setValue(
						obtenerDocumento(anexosPresentados.get(i)
								.getDocumentoInterno()));
				item.getItemProperty("asunto").setValue(
						anexosPresentados.get(i).getDocumentoInterno()
								.getAsunto());

				item.getItemProperty("expedienteOriginal").setValue("");
				item.getItemProperty("iden").setValue(
						anexosPresentados.get(i).getDocumentoInterno()
								.getCodigodocumento());
				item.getItemProperty("tipoTramite").setValue(
						movimientoExpedientes.get(i).getExpediente()
								.getTipoTramite().getNombre());

			}
		}
	}

	public ExpedienteCanonico obtenerExpedienteCanonico() {
		ExpedienteCanonico expedienteCanonico = new ExpedienteCanonico();
		if (cbxTipoBusqueda.getValue().toString().equals("0")) {
			expedienteCanonico.setDependencia(txtBuscarPor.getValue()
					.toString().trim());
		} else if (cbxTipoBusqueda.getValue().toString().equals("1")) {
			expedienteCanonico.setAsunto(txtBuscarPor.getValue().toString()
					.trim());
		} else if (cbxTipoBusqueda.getValue().toString().equals("2")) {
			expedienteCanonico.setNumExpediente(txtBuscarPor.getValue()
					.toString().trim());
		} else if (cbxTipoBusqueda.getValue().toString().equals("3")) {
			expedienteCanonico.setNumDocumentoInterno(txtBuscarPor.getValue()
					.toString().trim());
		} else if (cbxTipoBusqueda.getValue().toString().equals("4")) {
			expedienteCanonico.setNombreSolicitante(txtBuscarPor.getValue());
		}

		if (cbxFiltrarDocumentos.getValue().toString().equals("0")) {
			expedienteCanonico.setRecibido(Boolean.FALSE);
		} else {
			expedienteCanonico.setRecibido(Boolean.TRUE);
		}
		return expedienteCanonico;
	}

	public String obtenerDocumento(DocumentoInterno documentoInterno) {
		String documento = "";
		String nombreDocumento = "";
		String abreviatura = "";
		String numeroDocumento = "";
		String anio = "";
		String codDocumento = documentoInterno.getCodigoTipoDocumento();
		nombreDocumento = tipoDocumentoService.obtenerTipoDocumento(
				codDocumento).getNombre();
		abreviatura = (documentoInterno.getSiglasdocumento() == null) ? ""
				: documentoInterno.getSiglasdocumento();
		numeroDocumento = (documentoInterno.getNumerodocumento() == null) ? ""
				: documentoInterno.getNumerodocumento();
		documento = nombreDocumento + " " + documentoInterno.getAñoDocumento()
				+ " " + numeroDocumento + " " + abreviatura;
		return documento;
	}

	public void mostrarMensajeExitoArchivar() {
		Notificacion.show(new Notificacion("Se archivo el expediente "
				+ " con éxito", Constantes.MENSAJE.TYPE_SUCCES));
		getInformacionDocumento(1);
	}

	public void mostrarMensajeExitoDerivar(String oficinaDestino,
			Integer cantExpDerivados, Integer operacion) {
		if (operacion == 0) {
			if (cantExpDerivados == 1) {
				Notificacion.show(new Notificacion(
						"El expediente ha sido respondido con éxito a <br/> "
								+ oficinaDestino,
						Constantes.MENSAJE.TYPE_SUCCES));
			} else {
				Notificacion.show(new Notificacion(
						"Los expedientes han sido respondidos con éxito a <br/> "
								+ oficinaDestino,
						Constantes.MENSAJE.TYPE_SUCCES));
			}
		} else if (operacion == 1) {
			if (cantExpDerivados == 1) {
				Notificacion.show(new Notificacion(
						"El expediente ha sido derivado con éxito a <br/> "
								+ oficinaDestino,
						Constantes.MENSAJE.TYPE_SUCCES));
			} else {
				Notificacion.show(new Notificacion(
						"Los expedientes han sido derivados con éxito a <br/> "
								+ oficinaDestino,
						Constantes.MENSAJE.TYPE_SUCCES));
			}
		}
		getInformacionDocumento(1);
	}

	public void resetearFormulario() {
		chkTodos.setValue(true);
		chkVerDetalle.setEnabled(false);
		chkVerDetalle.setValue(false);
	}

	public void bloquearBotones() {
		this.btnRecepcionar.setEnabled(false);
		this.btnEliminar.setEnabled(false);
		this.btnImprimir.setEnabled(false);
		this.btnVerRecorrido.setEnabled(false);
		this.btnReenviar.setEnabled(false);
		this.btnResponder.setEnabled(false);
		this.btnArchivar.setEnabled(false);
	}

	@AutoGenerated
	private AbsoluteLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("887px");
		mainLayout.setHeight("100%");

		// top-level component properties
		setWidth("887px");
		setHeight("100.0%");

		// lblBusqueda
		lblBusqueda = new Label();
		lblBusqueda.setImmediate(false);
		lblBusqueda.setWidth("-1px");
		lblBusqueda.setHeight("-1px");
		lblBusqueda.setValue("<b>Dependencia: </b>");
		mainLayout.addComponent(lblBusqueda, "top:40.0px;left:21.0px;");

		// label_1
		label_1 = new Label();
		label_1.setImmediate(false);
		label_1.setWidth("-1px");
		label_1.setHeight("-1px");
		label_1.setValue("<b>Buscar Por: </b>");
		mainLayout.addComponent(label_1, "top:5.0px;left:21.0px;");

		// cbxTipoBusqueda
		cbxTipoBusqueda = new ComboBox();
		cbxTipoBusqueda.setImmediate(false);
		cbxTipoBusqueda.setWidth("207px");
		cbxTipoBusqueda.setHeight("-1px");
		mainLayout.addComponent(cbxTipoBusqueda, "top:5.0px;left:95.0px;");

		// cbxDependencia
		cbxDependencia = new ComboBox();
		cbxDependencia.setImmediate(false);
		cbxDependencia.setWidth("760px");
		cbxDependencia.setHeight("-1px");
		mainLayout.addComponent(cbxDependencia, "top:39.0px;left:100.0px;");

		// label_2
		label_2 = new Label();
		label_2.setImmediate(false);
		label_2.setWidth("-1px");
		label_2.setHeight("-1px");
		label_2.setValue("<b>Filtrar Documentos :</b>");
		mainLayout.addComponent(label_2, "top:80.0px;left:20.0px;");

		// cbxFiltrarDocumentos
		cbxFiltrarDocumentos = new ComboBox();
		cbxFiltrarDocumentos.setImmediate(false);
		cbxFiltrarDocumentos.setWidth("-1px");
		cbxFiltrarDocumentos.setHeight("-1px");
		mainLayout.addComponent(cbxFiltrarDocumentos,
				"top:75.0px;left:142.0px;");

		// label_3
		label_3 = new Label();
		label_3.setImmediate(false);
		label_3.setWidth("-1px");
		label_3.setHeight("-1px");
		label_3.setValue("<b>Estados del Documento: </b>");
		mainLayout.addComponent(label_3, "top:65.0px;left:340.0px;");

		// label_4
		label_4 = new Label();
		label_4.setImmediate(false);
		label_4.setWidth("-1px");
		label_4.setHeight("-1px");
		label_4.setValue("Recepcionado");
		mainLayout.addComponent(label_4, "top:65.0px;left:515.0px;");

		// label_5
		label_5 = new Label();
		label_5.setImmediate(false);
		label_5.setWidth("-1px");
		label_5.setHeight("-1px");
		label_5.setValue("Reenviado");
		mainLayout.addComponent(label_5, "top:65.0px;left:681.0px;");

		// label_6
		label_6 = new Label();
		label_6.setImmediate(false);
		label_6.setWidth("-1px");
		label_6.setHeight("-1px");
		label_6.setValue("Respondido");
		mainLayout.addComponent(label_6, "top:80.0px;left:517.0px;");

		// label_7
		label_7 = new Label();
		label_7.setImmediate(false);
		label_7.setWidth("-1px");
		label_7.setHeight("-1px");
		label_7.setValue("Finalizado");
		mainLayout.addComponent(label_7, "top:80.0px;left:680.0px;");

		// panel_2
		panel_2 = buildPanel_2();
		mainLayout.addComponent(panel_2, "top:102.0px;left:20.0px;");

		// tbMovimientoExpediente
		tbMovimientoExpediente = new Table();
		tbMovimientoExpediente.setImmediate(false);
		tbMovimientoExpediente.setWidth("840px");
		tbMovimientoExpediente.setHeight("123px");
		mainLayout.addComponent(tbMovimientoExpediente,
				"top:137.0px;left:20.0px;");

		// btnRecepcionar
		btnRecepcionar = new Button();
		btnRecepcionar.setCaption("Recepcionar");
		btnRecepcionar.setIcon(new ThemeResource(
				"images/botones/recepcionar.png"));
		btnRecepcionar.setImmediate(true);
		btnRecepcionar.setDescription("R");
		btnRecepcionar.setWidth("105px");
		btnRecepcionar.setHeight("-1px");
		mainLayout.addComponent(btnRecepcionar, "top:265.0px;left:20.0px;");

		// btnResponder
		btnResponder = new Button();
		btnResponder.setCaption("Responder");
		btnResponder.setIcon(new ThemeResource("images/botones/responder.png"));
		btnResponder.setImmediate(true);
		btnResponder.setWidth("105px");
		btnResponder.setHeight("-1px");
		mainLayout.addComponent(btnResponder, "top:265.0px;left:126.0px;");

		// btnReenviar
		btnReenviar = new Button();
		btnReenviar.setCaption("Reenviar");
		btnReenviar.setIcon(new ThemeResource("images/botones/reenviar.png"));
		btnReenviar.setImmediate(true);
		btnReenviar.setWidth("100px");
		btnReenviar.setHeight("-1px");
		mainLayout.addComponent(btnReenviar, "top:265.0px;left:232.0px;");

		// btnArchivar
		btnArchivar = new Button();
		btnArchivar.setCaption("Archivar");
		btnArchivar.setIcon(new ThemeResource("images/botones/archivar.png"));
		btnArchivar.setImmediate(true);
		btnArchivar.setWidth("100px");
		btnArchivar.setHeight("-1px");
		mainLayout.addComponent(btnArchivar, "top:265.0px;left:333.0px;");

		// btnEliminar
		btnEliminar = new Button();
		btnEliminar.setCaption("Eliminar");
		btnEliminar.setIcon(new ThemeResource("images/botones/remove.png"));
		btnEliminar.setImmediate(true);
		btnEliminar.setWidth("100px");
		btnEliminar.setHeight("-1px");
		mainLayout.addComponent(btnEliminar, "top:265.0px;left:434.0px;");

		// btnImprimir
		btnImprimir = new Button();
		btnImprimir.setCaption("Imprimir");
		btnImprimir.setIcon(new ThemeResource("images/botones/print.png"));
		btnImprimir.setImmediate(true);
		btnImprimir.setWidth("100px");
		btnImprimir.setHeight("-1px");
		mainLayout.addComponent(btnImprimir, "top:265.0px;left:535.0px;");

		// label_10
		label_10 = new Label();
		label_10.setImmediate(false);
		label_10.setWidth("-1px");
		label_10.setHeight("-1px");
		label_10.setValue("<b><u>Dependencia de Origen:</u></b>");
		mainLayout.addComponent(label_10, "top:300.0px;left:21.0px;");

		// label_11
		label_11 = new Label();
		label_11.setImmediate(false);
		label_11.setWidth("-1px");
		label_11.setHeight("-1px");
		label_11.setValue("<b><u>Fecha Envío:</u></b>");
		mainLayout.addComponent(label_11, "top:344.0px;left:21.0px;");

		// label_12
		label_12 = new Label();
		label_12.setImmediate(false);
		label_12.setWidth("-1px");
		label_12.setHeight("-1px");
		label_12.setValue("<b><u>Dependencia Destino:");
		mainLayout.addComponent(label_12, "top:320.0px;left:21.0px;");

		// label_13
		label_13 = new Label();
		label_13.setImmediate(false);
		label_13.setWidth("-1px");
		label_13.setHeight("-1px");
		label_13.setValue("<b><u>Documento:");
		mainLayout.addComponent(label_13, "top:344.0px;left:477.0px;");

		// label_14
		label_14 = new Label();
		label_14.setImmediate(false);
		label_14.setWidth("-1px");
		label_14.setHeight("-1px");
		label_14.setValue("<b><u>Expediente Externo original: ");
		mainLayout.addComponent(label_14, "top:368.0px;left:21.0px;");

		// label_16
		label_16 = new Label();
		label_16.setImmediate(false);
		label_16.setWidth("-1px");
		label_16.setHeight("-1px");
		label_16.setValue("<b><u>Folios:");
		mainLayout.addComponent(label_16, "top:389.0px;left:477.0px;");

		// tbReferencia
		tbReferencia = new Table();
		tbReferencia.setImmediate(false);
		tbReferencia.setWidth("841px");
		tbReferencia.setHeight("55px");
		mainLayout.addComponent(tbReferencia, "top:410.0px;left:19.0px;");

		// label_15
		label_15 = new Label();
		label_15.setImmediate(false);
		label_15.setWidth("-1px");
		label_15.setHeight("-1px");
		label_15.setValue("<b><u>Referencia:");
		mainLayout.addComponent(label_15, "top:392.0px;left:20.0px;");

		// label_17
		label_17 = new Label();
		label_17.setImmediate(false);
		label_17.setWidth("-1px");
		label_17.setHeight("-1px");
		label_17.setValue("<b><u>Asunto: ");
		mainLayout.addComponent(label_17, "top:468.0px;left:21.0px;");

		// label_18
		label_18 = new Label();
		label_18.setImmediate(false);
		label_18.setWidth("-1px");
		label_18.setHeight("-1px");
		label_18.setValue("<b><u>Enviado Por:");
		mainLayout.addComponent(label_18, "top:521.0px;left:21.0px;");

		// label_19
		label_19 = new Label();
		label_19.setImmediate(false);
		label_19.setWidth("-1px");
		label_19.setHeight("19px");
		label_19.setValue("<b><u>Recepcionado Por:");
		mainLayout.addComponent(label_19, "top:521.0px;left:475.0px;");

		// lblDependenciaOrigen
		lblDependenciaOrigen = new Label();
		lblDependenciaOrigen.setImmediate(false);
		lblDependenciaOrigen.setWidth("453px");
		lblDependenciaOrigen.setHeight("-1px");
		lblDependenciaOrigen.setValue("Label");
		mainLayout.addComponent(lblDependenciaOrigen,
				"top:300.0px;left:160.0px;");

		// lblFechaEnvio
		lblFechaEnvio = new Label();
		lblFechaEnvio.setImmediate(false);
		lblFechaEnvio.setWidth("340px");
		lblFechaEnvio.setHeight("-1px");
		lblFechaEnvio.setValue("Label");
		mainLayout.addComponent(lblFechaEnvio, "top:344.0px;left:100.0px;");

		// lblExpedienteExternoO
		lblExpedienteExternoO = new Label();
		lblExpedienteExternoO.setImmediate(false);
		lblExpedienteExternoO.setWidth("253px");
		lblExpedienteExternoO.setHeight("-1px");
		lblExpedienteExternoO.setValue("Label");
		mainLayout.addComponent(lblExpedienteExternoO,
				"top:368.0px;left:187.0px;");

		// lblDependenciaDestino
		lblDependenciaDestino = new Label();
		lblDependenciaDestino.setImmediate(false);
		lblDependenciaDestino.setWidth("540px");
		lblDependenciaDestino.setHeight("-1px");
		lblDependenciaDestino.setValue("Label");
		mainLayout.addComponent(lblDependenciaDestino,
				"top:320.0px;left:160.0px;");

		// lblDocumento
		lblDocumento = new Label();
		lblDocumento.setImmediate(false);
		lblDocumento.setWidth("310px");
		lblDocumento.setHeight("-1px");
		lblDocumento.setValue("Label");
		mainLayout.addComponent(lblDocumento, "top:344.0px;left:550.0px;");

		// lblFolios
		lblFolios = new Label();
		lblFolios.setImmediate(false);
		lblFolios.setWidth("56px");
		lblFolios.setHeight("-1px");
		lblFolios.setValue("Label");
		mainLayout.addComponent(lblFolios, "top:389.0px;left:524.0px;");

		// lblAsunto
		lblAsunto = new Label();
		lblAsunto.setImmediate(false);
		lblAsunto.setWidth("796px");
		lblAsunto.setHeight("18px");
		lblAsunto.setValue("Label");
		mainLayout.addComponent(lblAsunto, "top:468.0px;left:69.0px;");

		// lblRecepcionadoPor
		lblRecepcionadoPor = new Label();
		lblRecepcionadoPor.setImmediate(false);
		lblRecepcionadoPor.setWidth("-1px");
		lblRecepcionadoPor.setHeight("-1px");
		lblRecepcionadoPor.setValue("Label");
		mainLayout
				.addComponent(lblRecepcionadoPor, "top:521.0px;left:625.0px;");

		// lblEnviadoPor
		lblEnviadoPor = new Label();
		lblEnviadoPor.setImmediate(false);
		lblEnviadoPor.setWidth("340px");
		lblEnviadoPor.setHeight("18px");
		lblEnviadoPor.setValue("Label");
		mainLayout.addComponent(lblEnviadoPor, "top:521.0px;left:135.0px;");

		// lblRecepcionado
		lblRecepcionado = new Embedded();
		lblRecepcionado.setImmediate(false);
		lblRecepcionado.setWidth("-1px");
		lblRecepcionado.setHeight("-1px");
		lblRecepcionado.setSource(new ThemeResource(
				"images/botones/receive.png"));
		lblRecepcionado.setType(1);
		lblRecepcionado.setMimeType("image/png");
		mainLayout.addComponent(lblRecepcionado, "top:65.0px;left:490.0px;");

		// lblReenviado
		lblReenviado = new Embedded();
		lblReenviado.setImmediate(false);
		lblReenviado.setWidth("-1px");
		lblReenviado.setHeight("-1px");
		lblReenviado.setSource(new ThemeResource("images/botones/forward.png"));
		lblReenviado.setType(1);
		lblReenviado.setMimeType("image/png");
		mainLayout.addComponent(lblReenviado, "top:65.0px;left:650.0px;");

		// lblFinalizado
		lblFinalizado = new Embedded();
		lblFinalizado.setImmediate(false);
		lblFinalizado.setWidth("-1px");
		lblFinalizado.setHeight("-1px");
		lblFinalizado.setSource(new ThemeResource(
				"images/botones/finalizado.png"));
		lblFinalizado.setType(1);
		lblFinalizado.setMimeType("image/png");
		mainLayout.addComponent(lblFinalizado, "top:80.0px;left:650.0px;");

		// lblRespondido
		lblRespondido = new Embedded();
		lblRespondido.setImmediate(false);
		lblRespondido.setWidth("-1px");
		lblRespondido.setHeight("-1px");
		lblRespondido
				.setSource(new ThemeResource("images/botones/response.png"));
		lblRespondido.setType(1);
		lblRespondido.setMimeType("image/png");
		mainLayout.addComponent(lblRespondido, "top:80.0px;left:490.0px;");

		// txtBuscarPor
		txtBuscarPor = new TextField();
		txtBuscarPor.setImmediate(false);
		txtBuscarPor.setWidth("170px");
		txtBuscarPor.setHeight("-1px");
		mainLayout.addComponent(txtBuscarPor, "top:5.0px;left:310.0px;");

		// btnVerRecorrido
		btnVerRecorrido = new Button();
		btnVerRecorrido.setCaption("Ver Recorrido");
		btnVerRecorrido.setIcon(new ThemeResource(
				"images/botones/recorrido.png"));
		btnVerRecorrido.setImmediate(true);
		btnVerRecorrido.setWidth("110px");
		btnVerRecorrido.setHeight("-1px");
		mainLayout.addComponent(btnVerRecorrido, "top:265.0px;left:636.0px;");

		// label_20
		label_20 = new Label();
		label_20.setImmediate(false);
		label_20.setWidth("-1px");
		label_20.setHeight("-1px");
		label_20.setValue("Archivos Anexados");
		mainLayout.addComponent(label_20, "top:320.0px;left:717.0px;");

		// btnArchivosAnexados
		btnArchivosAnexados = new Boton();
		btnArchivosAnexados.setIcon(new ThemeResource(
				"images/botones/consult.png"));
		btnArchivosAnexados.setImmediate(false);
		btnArchivosAnexados.setWidth("30px");
		btnArchivosAnexados.setHeight("25px");
		mainLayout.addComponent(btnArchivosAnexados,
				"top:318.0px;left:820.0px;");

		// lblDependencia
		lblDependencia = new Label();
		lblDependencia.setImmediate(false);
		lblDependencia.setWidth("-1px");
		lblDependencia.setHeight("-1px");
		lblDependencia.setValue("<b>Dependencia Destino");
		mainLayout.addComponent(lblDependencia, "top:11.0px;left:490.0px;");

		// lblEnviadoA
		lblEnviadoA = new Label();
		lblEnviadoA.setImmediate(false);
		lblEnviadoA.setWidth("-1px");
		lblEnviadoA.setHeight("-1px");
		lblEnviadoA.setValue("<b><u>Enviado A:");
		mainLayout.addComponent(lblEnviadoA, "top:486.0px;left:22.0px;");

		// lblDependenciaActual
		lblDependenciaActual = new Label();
		lblDependenciaActual.setImmediate(false);
		lblDependenciaActual.setWidth("-1px");
		lblDependenciaActual.setHeight("-1px");
		lblDependenciaActual.setValue("<b><u>Dependencia Actual:");
		mainLayout.addComponent(lblDependenciaActual,
				"top:504.0px;left:22.0px;");

		// lblEnviadoAValue
		lblEnviadoAValue = new Label();
		lblEnviadoAValue.setImmediate(false);
		lblEnviadoAValue.setWidth("773px");
		lblEnviadoAValue.setHeight("-1px");
		lblEnviadoAValue.setValue("Label");
		mainLayout.addComponent(lblEnviadoAValue, "top:486.0px;left:87.0px;");

		// lblDependenciaActualValue
		lblDependenciaActualValue = new Label();
		lblDependenciaActualValue.setImmediate(false);
		lblDependenciaActualValue.setWidth("720px");
		lblDependenciaActualValue.setHeight("-1px");
		lblDependenciaActualValue.setValue("Label");
		mainLayout.addComponent(lblDependenciaActualValue,
				"top:504.0px;left:140.0px;");

		// labTiempoFaltante
		labTiempoFaltante = new Label();
		labTiempoFaltante.setImmediate(false);
		labTiempoFaltante.setWidth("-1px");
		labTiempoFaltante.setHeight("-1px");
		labTiempoFaltante.setValue("<b><u>Tiempo Faltante:</u></b>");
		mainLayout.addComponent(labTiempoFaltante, "top:389.0px;left:678.0px;");

		// labTiempoFaltanteValor
		labTiempoFaltanteValor = new Label();
		labTiempoFaltanteValor.setImmediate(false);
		labTiempoFaltanteValor.setWidth("71px");
		labTiempoFaltanteValor.setHeight("-1px");
		labTiempoFaltanteValor.setValue("Label");
		mainLayout.addComponent(labTiempoFaltanteValor,
				"top:389.0px;left:789.0px;");

		// btnDescargarDocumento
		btnDescargarDocumento = new Button();
		btnDescargarDocumento.setCaption("Consultar  Docum.");
		btnDescargarDocumento.setImmediate(true);
		btnDescargarDocumento.setWidth("122px");
		btnDescargarDocumento.setHeight("-1px");
		mainLayout.addComponent(btnDescargarDocumento,
				"top:295.0px;left:735.0px;");

		// lblSolicitante
		lblSolicitante = new Label();
		lblSolicitante.setImmediate(false);
		lblSolicitante.setWidth("-1px");
		lblSolicitante.setHeight("-1px");
		lblSolicitante.setValue("<b><u>Solicitante: </u></b>");
		mainLayout.addComponent(lblSolicitante, "top:368.0px;left:477.0px;");

		// lblSolicitanteValue
		lblSolicitanteValue = new Label();
		lblSolicitanteValue.setImmediate(false);
		lblSolicitanteValue.setWidth("300px");
		lblSolicitanteValue.setHeight("-1px");
		lblSolicitanteValue.setValue("Label");
		mainLayout.addComponent(lblSolicitanteValue,
				"top:368.0px;left:550.0px;");

		// btnAdjuntarDoc
		btnAdjuntarDoc = new Button();
		btnAdjuntarDoc.setCaption("Adjuntar Doc.");
		btnAdjuntarDoc
				.setIcon(new ThemeResource("images/botones/adjuntar.png"));
		btnAdjuntarDoc.setImmediate(true);
		btnAdjuntarDoc.setWidth("110px");
		btnAdjuntarDoc.setHeight("-1px");
		mainLayout.addComponent(btnAdjuntarDoc, "top:265.0px;left:747.0px;");

		// btnConsultarEscaneos
		btnConsultarEscaneos = new Button();
		btnConsultarEscaneos.setCaption("Consul.  Escan.");
		btnConsultarEscaneos.setImmediate(true);
		btnConsultarEscaneos.setWidth("-1px");
		btnConsultarEscaneos.setHeight("-1px");
		mainLayout.addComponent(btnConsultarEscaneos,
				"top:295.0px;left:620.0px;");

		return mainLayout;
	}

	@AutoGenerated
	private Panel buildPanel_2() {
		// common part: create layout
		panel_2 = new Panel();
		panel_2.setImmediate(false);
		panel_2.setWidth("840px");
		panel_2.setHeight("33px");

		// absoluteLayout_2
		absoluteLayout_2 = buildAbsoluteLayout_2();
		panel_2.setContent(absoluteLayout_2);

		return panel_2;
	}

	@AutoGenerated
	private AbsoluteLayout buildAbsoluteLayout_2() {
		// common part: create layout
		absoluteLayout_2 = new AbsoluteLayout();
		absoluteLayout_2.setImmediate(false);
		absoluteLayout_2.setWidth("100.0%");
		absoluteLayout_2.setHeight("110.34%");

		// label_8
		label_8 = new Label();
		label_8.setImmediate(false);
		label_8.setWidth("-1px");
		label_8.setHeight("-1px");
		label_8.setValue("<b>Mostrar</b>");
		absoluteLayout_2.addComponent(label_8, "top:5.0px;left:10.0px;");

		// chkTodos
		chkTodos = new CheckBox();
		chkTodos.setCaption("Todos");
		chkTodos.setImmediate(false);
		chkTodos.setWidth("-1px");
		chkTodos.setHeight("-1px");
		absoluteLayout_2.addComponent(chkTodos, "top:5.0px;left:66.0px;");

		// chkDesde
		chkDesde = new CheckBox();
		chkDesde.setCaption("Desde");
		chkDesde.setImmediate(false);
		chkDesde.setWidth("-1px");
		chkDesde.setHeight("-1px");
		absoluteLayout_2.addComponent(chkDesde, "top:5.0px;left:166.0px;");

		// popDateDesde
		popDateDesde = new PopupDateField();
		popDateDesde.setImmediate(false);
		popDateDesde.setWidth("-1px");
		popDateDesde.setHeight("-1px");
		absoluteLayout_2.addComponent(popDateDesde, "top:5.0px;left:226.0px;");

		// popDateHasta
		popDateHasta = new PopupDateField();
		popDateHasta.setImmediate(false);
		popDateHasta.setWidth("-1px");
		popDateHasta.setHeight("-1px");
		absoluteLayout_2.addComponent(popDateHasta, "top:5.0px;left:399.0px;");

		// label_9
		label_9 = new Label();
		label_9.setImmediate(false);
		label_9.setWidth("-1px");
		label_9.setHeight("-1px");
		label_9.setValue("Hasta");
		absoluteLayout_2.addComponent(label_9, "top:5.0px;left:359.0px;");

		// chkVerDetalle
		chkVerDetalle = new CheckBox();
		chkVerDetalle.setCaption("Ver Detalle");
		chkVerDetalle.setImmediate(false);
		chkVerDetalle.setWidth("-1px");
		chkVerDetalle.setHeight("-1px");
		absoluteLayout_2.addComponent(chkVerDetalle, "top:5.0px;left:519.0px;");

		return absoluteLayout_2;
	}

}